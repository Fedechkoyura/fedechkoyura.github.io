function move(){var e=document.getElementById("progress"),t=1,i=autoplay/100,n=setInterval(function(){t>=100?clearInterval(n):(t++,e.style.width=t+"%")},i)}!function(e,t){"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){function i(e){var t=!!e&&"length"in e&&e.length,i=ne.type(e);return"function"!==i&&!ne.isWindow(e)&&("array"===i||0===t||"number"==typeof t&&t>0&&t-1 in e)}function n(e,t,i){if(ne.isFunction(t))return ne.grep(e,function(e,n){return!!t.call(e,n,e)!==i});if(t.nodeType)return ne.grep(e,function(e){return e===t!==i});if("string"==typeof t){if(he.test(t))return ne.filter(t,e,i);t=ne.filter(t,e)}return ne.grep(e,function(e){return Z.call(t,e)>-1!==i})}function a(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function r(e){var t={};return ne.each(e.match(we)||[],function(e,i){t[i]=!0}),t}function s(){$.removeEventListener("DOMContentLoaded",s),e.removeEventListener("load",s),ne.ready()}function o(){this.expando=ne.expando+o.uid++}function l(e,t,i){var n;if(void 0===i&&1===e.nodeType)if(n="data-"+t.replace(ze,"-$&").toLowerCase(),"string"==typeof(i=e.getAttribute(n))){try{i="true"===i||"false"!==i&&("null"===i?null:+i+""===i?+i:Se.test(i)?ne.parseJSON(i):i)}catch(e){}Ce.set(e,t,i)}else i=void 0;return i}function u(e,t,i,n){var a,r=1,s=20,o=n?function(){return n.cur()}:function(){return ne.css(e,t,"")},l=o(),u=i&&i[3]||(ne.cssNumber[t]?"":"px"),p=(ne.cssNumber[t]||"px"!==u&&+l)&&Me.exec(ne.css(e,t));if(p&&p[3]!==u){u=u||p[3],i=i||[],p=+l||1;do{p/=r=r||".5",ne.style(e,t,p+u)}while(r!==(r=o()/l)&&1!==r&&--s)}return i&&(p=+p||+l||0,a=i[1]?p+(i[1]+1)*i[2]:+i[2],n&&(n.unit=u,n.start=p,n.end=a)),a}function p(e,t){var i=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&ne.nodeName(e,t)?ne.merge([e],i):i}function d(e,t){for(var i=0,n=e.length;i<n;i++)Te.set(e[i],"globalEval",!t||Te.get(t[i],"globalEval"))}function c(e,t,i,n,a){for(var r,s,o,l,u,c,h=t.createDocumentFragment(),f=[],m=0,g=e.length;m<g;m++)if((r=e[m])||0===r)if("object"===ne.type(r))ne.merge(f,r.nodeType?[r]:r);else if(Ne.test(r)){for(s=s||h.appendChild(t.createElement("div")),o=(Le.exec(r)||["",""])[1].toLowerCase(),l=Ae[o]||Ae._default,s.innerHTML=l[1]+ne.htmlPrefilter(r)+l[2],c=l[0];c--;)s=s.lastChild;ne.merge(f,s.childNodes),(s=h.firstChild).textContent=""}else f.push(t.createTextNode(r));for(h.textContent="",m=0;r=f[m++];)if(n&&ne.inArray(r,n)>-1)a&&a.push(r);else if(u=ne.contains(r.ownerDocument,r),s=p(h.appendChild(r),"script"),u&&d(s),i)for(c=0;r=s[c++];)Ie.test(r.type||"")&&i.push(r);return h}function h(){return!0}function f(){return!1}function m(){try{return $.activeElement}catch(e){}}function g(e,t,i,n,a,r){var s,o;if("object"==typeof t){"string"!=typeof i&&(n=n||i,i=void 0);for(o in t)g(e,o,i,n,t[o],r);return e}if(null==n&&null==a?(a=i,n=i=void 0):null==a&&("string"==typeof i?(a=n,n=void 0):(a=n,n=i,i=void 0)),!1===a)a=f;else if(!a)return e;return 1===r&&(s=a,(a=function(e){return ne().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=ne.guid++)),e.each(function(){ne.event.add(this,t,a,n,i)})}function v(e,t){return ne.nodeName(e,"table")&&ne.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function w(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function y(e){var t=We.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function x(e,t){var i,n,a,r,s,o,l,u;if(1===t.nodeType){if(Te.hasData(e)&&(r=Te.access(e),s=Te.set(t,r),u=r.events)){delete s.handle,s.events={};for(a in u)for(i=0,n=u[a].length;i<n;i++)ne.event.add(t,a,u[a][i])}Ce.hasData(e)&&(o=Ce.access(e),l=ne.extend({},o),Ce.set(t,l))}}function b(e,t){var i=t.nodeName.toLowerCase();"input"===i&&Pe.test(e.type)?t.checked=e.checked:"input"!==i&&"textarea"!==i||(t.defaultValue=e.defaultValue)}function T(e,t,i,n){t=K.apply([],t);var a,r,s,o,l,u,d=0,h=e.length,f=h-1,m=t[0],g=ne.isFunction(m);if(g||h>1&&"string"==typeof m&&!ie.checkClone&&qe.test(m))return e.each(function(a){var r=e.eq(a);g&&(t[0]=m.call(this,a,r.html())),T(r,t,i,n)});if(h&&(a=c(t,e[0].ownerDocument,!1,e,n),r=a.firstChild,1===a.childNodes.length&&(a=r),r||n)){for(o=(s=ne.map(p(a,"script"),w)).length;d<h;d++)l=a,d!==f&&(l=ne.clone(l,!0,!0),o&&ne.merge(s,p(l,"script"))),i.call(e[d],l,d);if(o)for(u=s[s.length-1].ownerDocument,ne.map(s,y),d=0;d<o;d++)l=s[d],Ie.test(l.type||"")&&!Te.access(l,"globalEval")&&ne.contains(u,l)&&(l.src?ne._evalUrl&&ne._evalUrl(l.src):ne.globalEval(l.textContent.replace(je,"")))}return e}function C(e,t,i){for(var n,a=t?ne.filter(t,e):e,r=0;null!=(n=a[r]);r++)i||1!==n.nodeType||ne.cleanData(p(n)),n.parentNode&&(i&&ne.contains(n.ownerDocument,n)&&d(p(n,"script")),n.parentNode.removeChild(n));return e}function S(e,t){var i=ne(t.createElement(e)).appendTo(t.body),n=ne.css(i[0],"display");return i.detach(),n}function z(e){var t=$,i=Ye[e];return i||("none"!==(i=S(e,t))&&i||((t=(Xe=(Xe||ne("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement))[0].contentDocument).write(),t.close(),i=S(e,t),Xe.detach()),Ye[e]=i),i}function E(e,t,i){var n,a,r,s,o=e.style;return i=i||Ve(e),""!==(s=i?i.getPropertyValue(t)||i[t]:void 0)&&void 0!==s||ne.contains(e.ownerDocument,e)||(s=ne.style(e,t)),i&&!ie.pixelMarginRight()&&_e.test(s)&&Ge.test(t)&&(n=o.width,a=o.minWidth,r=o.maxWidth,o.minWidth=o.maxWidth=o.width=s,s=i.width,o.width=n,o.minWidth=a,o.maxWidth=r),void 0!==s?s+"":s}function M(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}function k(e){if(e in et)return e;for(var t=e[0].toUpperCase()+e.slice(1),i=Je.length;i--;)if((e=Je[i]+t)in et)return e}function D(e,t,i){var n=Me.exec(t);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):t}function P(e,t,i,n,a){for(var r=i===(n?"border":"content")?4:"width"===t?1:0,s=0;r<4;r+=2)"margin"===i&&(s+=ne.css(e,i+ke[r],!0,a)),n?("content"===i&&(s-=ne.css(e,"padding"+ke[r],!0,a)),"margin"!==i&&(s-=ne.css(e,"border"+ke[r]+"Width",!0,a))):(s+=ne.css(e,"padding"+ke[r],!0,a),"padding"!==i&&(s+=ne.css(e,"border"+ke[r]+"Width",!0,a)));return s}function L(e,t,i){var n=!0,a="width"===t?e.offsetWidth:e.offsetHeight,r=Ve(e),s="border-box"===ne.css(e,"boxSizing",!1,r);if(a<=0||null==a){if(((a=E(e,t,r))<0||null==a)&&(a=e.style[t]),_e.test(a))return a;n=s&&(ie.boxSizingReliable()||a===e.style[t]),a=parseFloat(a)||0}return a+P(e,t,i||(s?"border":"content"),n,r)+"px"}function I(e,t){for(var i,n,a,r=[],s=0,o=e.length;s<o;s++)(n=e[s]).style&&(r[s]=Te.get(n,"olddisplay"),i=n.style.display,t?(r[s]||"none"!==i||(n.style.display=""),""===n.style.display&&De(n)&&(r[s]=Te.access(n,"olddisplay",z(n.nodeName)))):(a=De(n),"none"===i&&a||Te.set(n,"olddisplay",a?i:ne.css(n,"display"))));for(s=0;s<o;s++)(n=e[s]).style&&(t&&"none"!==n.style.display&&""!==n.style.display||(n.style.display=t?r[s]||"":"none"));return e}function A(e,t,i,n,a){return new A.prototype.init(e,t,i,n,a)}function N(){return e.setTimeout(function(){tt=void 0}),tt=ne.now()}function B(e,t){var i,n=0,a={height:e};for(t=t?1:0;n<4;n+=2-t)a["margin"+(i=ke[n])]=a["padding"+i]=e;return t&&(a.opacity=a.width=e),a}function H(e,t,i){for(var n,a=(R.tweeners[t]||[]).concat(R.tweeners["*"]),r=0,s=a.length;r<s;r++)if(n=a[r].call(i,t,e))return n}function O(e,t){var i,n,a,r,s;for(i in e)if(n=ne.camelCase(i),a=t[n],r=e[i],ne.isArray(r)&&(a=r[1],r=e[i]=r[0]),i!==n&&(e[n]=r,delete e[i]),(s=ne.cssHooks[n])&&"expand"in s){r=s.expand(r),delete e[n];for(i in r)i in e||(e[i]=r[i],t[i]=a)}else t[n]=a}function R(e,t,i){var n,a,r=0,s=R.prefilters.length,o=ne.Deferred().always(function(){delete l.elem}),l=function(){if(a)return!1;for(var t=tt||N(),i=Math.max(0,u.startTime+u.duration-t),n=1-(i/u.duration||0),r=0,s=u.tweens.length;r<s;r++)u.tweens[r].run(n);return o.notifyWith(e,[u,n,i]),n<1&&s?i:(o.resolveWith(e,[u]),!1)},u=o.promise({elem:e,props:ne.extend({},t),opts:ne.extend(!0,{specialEasing:{},easing:ne.easing._default},i),originalProperties:t,originalOptions:i,startTime:tt||N(),duration:i.duration,tweens:[],createTween:function(t,i){var n=ne.Tween(e,u.opts,t,i,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(n),n},stop:function(t){var i=0,n=t?u.tweens.length:0;if(a)return this;for(a=!0;i<n;i++)u.tweens[i].run(1);return t?(o.notifyWith(e,[u,1,0]),o.resolveWith(e,[u,t])):o.rejectWith(e,[u,t]),this}}),p=u.props;for(O(p,u.opts.specialEasing);r<s;r++)if(n=R.prefilters[r].call(u,e,p,u.opts))return ne.isFunction(n.stop)&&(ne._queueHooks(u.elem,u.opts.queue).stop=ne.proxy(n.stop,n)),n;return ne.map(p,H,u),ne.isFunction(u.opts.start)&&u.opts.start.call(e,u),ne.fx.timer(ne.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always)}function F(e){return e.getAttribute&&e.getAttribute("class")||""}function q(e){return function(t,i){"string"!=typeof t&&(i=t,t="*");var n,a=0,r=t.toLowerCase().match(we)||[];if(ne.isFunction(i))for(;n=r[a++];)"+"===n[0]?(n=n.slice(1)||"*",(e[n]=e[n]||[]).unshift(i)):(e[n]=e[n]||[]).push(i)}}function W(e,t,i,n){function a(o){var l;return r[o]=!0,ne.each(e[o]||[],function(e,o){var u=o(t,i,n);return"string"!=typeof u||s||r[u]?s?!(l=u):void 0:(t.dataTypes.unshift(u),a(u),!1)}),l}var r={},s=e===Ct;return a(t.dataTypes[0])||!r["*"]&&a("*")}function j(e,t){var i,n,a=ne.ajaxSettings.flatOptions||{};for(i in t)void 0!==t[i]&&((a[i]?e:n||(n={}))[i]=t[i]);return n&&ne.extend(!0,e,n),e}function X(e,t,i){for(var n,a,r,s,o=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=e.mimeType||t.getResponseHeader("Content-Type"));if(n)for(a in o)if(o[a]&&o[a].test(n)){l.unshift(a);break}if(l[0]in i)r=l[0];else{for(a in i){if(!l[0]||e.converters[a+" "+l[0]]){r=a;break}s||(s=a)}r=r||s}if(r)return r!==l[0]&&l.unshift(r),i[r]}function Y(e,t,i,n){var a,r,s,o,l,u={},p=e.dataTypes.slice();if(p[1])for(s in e.converters)u[s.toLowerCase()]=e.converters[s];for(r=p.shift();r;)if(e.responseFields[r]&&(i[e.responseFields[r]]=t),!l&&n&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=p.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(s=u[l+" "+r]||u["* "+r]))for(a in u)if((o=a.split(" "))[1]===r&&(s=u[l+" "+o[0]]||u["* "+o[0]])){!0===s?s=u[a]:!0!==u[a]&&(r=o[0],p.unshift(o[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}function G(e,t,i,n){var a;if(ne.isArray(t))ne.each(t,function(t,a){i||Mt.test(e)?n(e,a):G(e+"["+("object"==typeof a&&null!=a?t:"")+"]",a,i,n)});else if(i||"object"!==ne.type(t))n(e,t);else for(a in t)G(e+"["+a+"]",t[a],i,n)}function _(e){return ne.isWindow(e)?e:9===e.nodeType&&e.defaultView}var V=[],$=e.document,U=V.slice,K=V.concat,Q=V.push,Z=V.indexOf,J={},ee=J.toString,te=J.hasOwnProperty,ie={},ne=function(e,t){return new ne.fn.init(e,t)},ae=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,re=/^-ms-/,se=/-([\da-z])/gi,oe=function(e,t){return t.toUpperCase()};ne.fn=ne.prototype={jquery:"2.2.4",constructor:ne,selector:"",length:0,toArray:function(){return U.call(this)},get:function(e){return null!=e?e<0?this[e+this.length]:this[e]:U.call(this)},pushStack:function(e){var t=ne.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e){return ne.each(this,e)},map:function(e){return this.pushStack(ne.map(this,function(t,i){return e.call(t,i,t)}))},slice:function(){return this.pushStack(U.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,i=+e+(e<0?t:0);return this.pushStack(i>=0&&i<t?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:Q,sort:V.sort,splice:V.splice},ne.extend=ne.fn.extend=function(){var e,t,i,n,a,r,s=arguments[0]||{},o=1,l=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[o]||{},o++),"object"==typeof s||ne.isFunction(s)||(s={}),o===l&&(s=this,o--);o<l;o++)if(null!=(e=arguments[o]))for(t in e)i=s[t],s!==(n=e[t])&&(u&&n&&(ne.isPlainObject(n)||(a=ne.isArray(n)))?(a?(a=!1,r=i&&ne.isArray(i)?i:[]):r=i&&ne.isPlainObject(i)?i:{},s[t]=ne.extend(u,r,n)):void 0!==n&&(s[t]=n));return s},ne.extend({expando:"jQuery"+("2.2.4"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===ne.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=e&&e.toString();return!ne.isArray(e)&&t-parseFloat(t)+1>=0},isPlainObject:function(e){var t;if("object"!==ne.type(e)||e.nodeType||ne.isWindow(e))return!1;if(e.constructor&&!te.call(e,"constructor")&&!te.call(e.constructor.prototype||{},"isPrototypeOf"))return!1;for(t in e);return void 0===t||te.call(e,t)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?J[ee.call(e)]||"object":typeof e},globalEval:function(e){var t,i=eval;(e=ne.trim(e))&&(1===e.indexOf("use strict")?((t=$.createElement("script")).text=e,$.head.appendChild(t).parentNode.removeChild(t)):i(e))},camelCase:function(e){return e.replace(re,"ms-").replace(se,oe)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t){var n,a=0;if(i(e))for(n=e.length;a<n&&!1!==t.call(e[a],a,e[a]);a++);else for(a in e)if(!1===t.call(e[a],a,e[a]))break;return e},trim:function(e){return null==e?"":(e+"").replace(ae,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(i(Object(e))?ne.merge(n,"string"==typeof e?[e]:e):Q.call(n,e)),n},inArray:function(e,t,i){return null==t?-1:Z.call(t,e,i)},merge:function(e,t){for(var i=+t.length,n=0,a=e.length;n<i;n++)e[a++]=t[n];return e.length=a,e},grep:function(e,t,i){for(var n=[],a=0,r=e.length,s=!i;a<r;a++)!t(e[a],a)!==s&&n.push(e[a]);return n},map:function(e,t,n){var a,r,s=0,o=[];if(i(e))for(a=e.length;s<a;s++)null!=(r=t(e[s],s,n))&&o.push(r);else for(s in e)null!=(r=t(e[s],s,n))&&o.push(r);return K.apply([],o)},guid:1,proxy:function(e,t){var i,n,a;if("string"==typeof t&&(i=e[t],t=e,e=i),ne.isFunction(e))return n=U.call(arguments,2),a=function(){return e.apply(t||this,n.concat(U.call(arguments)))},a.guid=e.guid=e.guid||ne.guid++,a},now:Date.now,support:ie}),"function"==typeof Symbol&&(ne.fn[Symbol.iterator]=V[Symbol.iterator]),ne.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){J["[object "+t+"]"]=t.toLowerCase()});var le=function(e){function t(e,t,i,n){var a,r,s,o,u,d,c,h,f=t&&t.ownerDocument,m=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==m&&9!==m&&11!==m)return i;if(!n&&((t?t.ownerDocument||t:R)!==P&&D(t),t=t||P,I)){if(11!==m&&(d=me.exec(e)))if(a=d[1]){if(9===m){if(!(s=t.getElementById(a)))return i;if(s.id===a)return i.push(s),i}else if(f&&(s=f.getElementById(a))&&H(t,s)&&s.id===a)return i.push(s),i}else{if(d[2])return K.apply(i,t.getElementsByTagName(e)),i;if((a=d[3])&&y.getElementsByClassName&&t.getElementsByClassName)return K.apply(i,t.getElementsByClassName(a)),i}if(y.qsa&&!X[e+" "]&&(!A||!A.test(e))){if(1!==m)f=t,h=e;else if("object"!==t.nodeName.toLowerCase()){for((o=t.getAttribute("id"))?o=o.replace(ve,"\\$&"):t.setAttribute("id",o=O),r=(c=C(e)).length,u=pe.test(o)?"#"+o:"[id='"+o+"']";r--;)c[r]=u+" "+p(c[r]);h=c.join(","),f=ge.test(e)&&l(t.parentNode)||t}if(h)try{return K.apply(i,f.querySelectorAll(h)),i}catch(e){}finally{o===O&&t.removeAttribute("id")}}}return z(e.replace(re,"$1"),t,i,n)}function i(){function e(i,n){return t.push(i+" ")>x.cacheLength&&delete e[t.shift()],e[i+" "]=n}var t=[];return e}function n(e){return e[O]=!0,e}function a(e){var t=P.createElement("div");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function r(e,t){for(var i=e.split("|"),n=i.length;n--;)x.attrHandle[i[n]]=t}function s(e,t){var i=t&&e,n=i&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||G)-(~e.sourceIndex||G);if(n)return n;if(i)for(;i=i.nextSibling;)if(i===t)return-1;return e?1:-1}function o(e){return n(function(t){return t=+t,n(function(i,n){for(var a,r=e([],i.length,t),s=r.length;s--;)i[a=r[s]]&&(i[a]=!(n[a]=i[a]))})})}function l(e){return e&&void 0!==e.getElementsByTagName&&e}function u(){}function p(e){for(var t=0,i=e.length,n="";t<i;t++)n+=e[t].value;return n}function d(e,t,i){var n=t.dir,a=i&&"parentNode"===n,r=q++;return t.first?function(t,i,r){for(;t=t[n];)if(1===t.nodeType||a)return e(t,i,r)}:function(t,i,s){var o,l,u,p=[F,r];if(s){for(;t=t[n];)if((1===t.nodeType||a)&&e(t,i,s))return!0}else for(;t=t[n];)if(1===t.nodeType||a){if(u=t[O]||(t[O]={}),l=u[t.uniqueID]||(u[t.uniqueID]={}),(o=l[n])&&o[0]===F&&o[1]===r)return p[2]=o[2];if(l[n]=p,p[2]=e(t,i,s))return!0}}}function c(e){return e.length>1?function(t,i,n){for(var a=e.length;a--;)if(!e[a](t,i,n))return!1;return!0}:e[0]}function h(e,i,n){for(var a=0,r=i.length;a<r;a++)t(e,i[a],n);return n}function f(e,t,i,n,a){for(var r,s=[],o=0,l=e.length,u=null!=t;o<l;o++)(r=e[o])&&(i&&!i(r,n,a)||(s.push(r),u&&t.push(o)));return s}function m(e,t,i,a,r,s){return a&&!a[O]&&(a=m(a)),r&&!r[O]&&(r=m(r,s)),n(function(n,s,o,l){var u,p,d,c=[],m=[],g=s.length,v=n||h(t||"*",o.nodeType?[o]:o,[]),w=!e||!n&&t?v:f(v,c,e,o,l),y=i?r||(n?e:g||a)?[]:s:w;if(i&&i(w,y,o,l),a)for(u=f(y,m),a(u,[],o,l),p=u.length;p--;)(d=u[p])&&(y[m[p]]=!(w[m[p]]=d));if(n){if(r||e){if(r){for(u=[],p=y.length;p--;)(d=y[p])&&u.push(w[p]=d);r(null,y=[],u,l)}for(p=y.length;p--;)(d=y[p])&&(u=r?Z(n,d):c[p])>-1&&(n[u]=!(s[u]=d))}}else y=f(y===s?y.splice(g,y.length):y),r?r(null,s,y,l):K.apply(s,y)})}function g(e){for(var t,i,n,a=e.length,r=x.relative[e[0].type],s=r||x.relative[" "],o=r?1:0,l=d(function(e){return e===t},s,!0),u=d(function(e){return Z(t,e)>-1},s,!0),h=[function(e,i,n){var a=!r&&(n||i!==E)||((t=i).nodeType?l(e,i,n):u(e,i,n));return t=null,a}];o<a;o++)if(i=x.relative[e[o].type])h=[d(c(h),i)];else{if((i=x.filter[e[o].type].apply(null,e[o].matches))[O]){for(n=++o;n<a&&!x.relative[e[n].type];n++);return m(o>1&&c(h),o>1&&p(e.slice(0,o-1).concat({value:" "===e[o-2].type?"*":""})).replace(re,"$1"),i,o<n&&g(e.slice(o,n)),n<a&&g(e=e.slice(n)),n<a&&p(e))}h.push(i)}return c(h)}function v(e,i){var a=i.length>0,r=e.length>0,s=function(n,s,o,l,u){var p,d,c,h=0,m="0",g=n&&[],v=[],w=E,y=n||r&&x.find.TAG("*",u),b=F+=null==w?1:Math.random()||.1,T=y.length;for(u&&(E=s===P||s||u);m!==T&&null!=(p=y[m]);m++){if(r&&p){for(d=0,s||p.ownerDocument===P||(D(p),o=!I);c=e[d++];)if(c(p,s||P,o)){l.push(p);break}u&&(F=b)}a&&((p=!c&&p)&&h--,n&&g.push(p))}if(h+=m,a&&m!==h){for(d=0;c=i[d++];)c(g,v,s,o);if(n){if(h>0)for(;m--;)g[m]||v[m]||(v[m]=$.call(l));v=f(v)}K.apply(l,v),u&&!n&&v.length>0&&h+i.length>1&&t.uniqueSort(l)}return u&&(F=b,E=w),g};return a?n(s):s}var w,y,x,b,T,C,S,z,E,M,k,D,P,L,I,A,N,B,H,O="sizzle"+1*new Date,R=e.document,F=0,q=0,W=i(),j=i(),X=i(),Y=function(e,t){return e===t&&(k=!0),0},G=1<<31,_={}.hasOwnProperty,V=[],$=V.pop,U=V.push,K=V.push,Q=V.slice,Z=function(e,t){for(var i=0,n=e.length;i<n;i++)if(e[i]===t)return i;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ee="[\\x20\\t\\r\\n\\f]",te="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",ie="\\["+ee+"*("+te+")(?:"+ee+"*([*^$|!~]?=)"+ee+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+te+"))|)"+ee+"*\\]",ne=":("+te+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ie+")*)|.*)\\)|)",ae=new RegExp(ee+"+","g"),re=new RegExp("^"+ee+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ee+"+$","g"),se=new RegExp("^"+ee+"*,"+ee+"*"),oe=new RegExp("^"+ee+"*([>+~]|"+ee+")"+ee+"*"),le=new RegExp("="+ee+"*([^\\]'\"]*?)"+ee+"*\\]","g"),ue=new RegExp(ne),pe=new RegExp("^"+te+"$"),de={ID:new RegExp("^#("+te+")"),CLASS:new RegExp("^\\.("+te+")"),TAG:new RegExp("^("+te+"|[*])"),ATTR:new RegExp("^"+ie),PSEUDO:new RegExp("^"+ne),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ee+"*(even|odd|(([+-]|)(\\d*)n|)"+ee+"*(?:([+-]|)"+ee+"*(\\d+)|))"+ee+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+ee+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ee+"*((?:-\\d)?\\d*)"+ee+"*\\)|)(?=[^-]|$)","i")},ce=/^(?:input|select|textarea|button)$/i,he=/^h\d$/i,fe=/^[^{]+\{\s*\[native \w/,me=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ge=/[+~]/,ve=/'|\\/g,we=new RegExp("\\\\([\\da-f]{1,6}"+ee+"?|("+ee+")|.)","ig"),ye=function(e,t,i){var n="0x"+t-65536;return n!==n||i?t:n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)},xe=function(){D()};try{K.apply(V=Q.call(R.childNodes),R.childNodes),V[R.childNodes.length].nodeType}catch(e){K={apply:V.length?function(e,t){U.apply(e,Q.call(t))}:function(e,t){for(var i=e.length,n=0;e[i++]=t[n++];);e.length=i-1}}}y=t.support={},T=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},D=t.setDocument=function(e){var t,i,n=e?e.ownerDocument||e:R;return n!==P&&9===n.nodeType&&n.documentElement?(P=n,L=P.documentElement,I=!T(P),(i=P.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",xe,!1):i.attachEvent&&i.attachEvent("onunload",xe)),y.attributes=a(function(e){return e.className="i",!e.getAttribute("className")}),y.getElementsByTagName=a(function(e){return e.appendChild(P.createComment("")),!e.getElementsByTagName("*").length}),y.getElementsByClassName=fe.test(P.getElementsByClassName),y.getById=a(function(e){return L.appendChild(e).id=O,!P.getElementsByName||!P.getElementsByName(O).length}),y.getById?(x.find.ID=function(e,t){if(void 0!==t.getElementById&&I){var i=t.getElementById(e);return i?[i]:[]}},x.filter.ID=function(e){var t=e.replace(we,ye);return function(e){return e.getAttribute("id")===t}}):(delete x.find.ID,x.filter.ID=function(e){var t=e.replace(we,ye);return function(e){var i=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return i&&i.value===t}}),x.find.TAG=y.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):y.qsa?t.querySelectorAll(e):void 0}:function(e,t){var i,n=[],a=0,r=t.getElementsByTagName(e);if("*"===e){for(;i=r[a++];)1===i.nodeType&&n.push(i);return n}return r},x.find.CLASS=y.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&I)return t.getElementsByClassName(e)},N=[],A=[],(y.qsa=fe.test(P.querySelectorAll))&&(a(function(e){L.appendChild(e).innerHTML="<a id='"+O+"'></a><select id='"+O+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&A.push("[*^$]="+ee+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||A.push("\\["+ee+"*(?:value|"+J+")"),e.querySelectorAll("[id~="+O+"-]").length||A.push("~="),e.querySelectorAll(":checked").length||A.push(":checked"),e.querySelectorAll("a#"+O+"+*").length||A.push(".#.+[+~]")}),a(function(e){var t=P.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&A.push("name"+ee+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||A.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),A.push(",.*:")})),(y.matchesSelector=fe.test(B=L.matches||L.webkitMatchesSelector||L.mozMatchesSelector||L.oMatchesSelector||L.msMatchesSelector))&&a(function(e){y.disconnectedMatch=B.call(e,"div"),B.call(e,"[s!='']:x"),N.push("!=",ne)}),A=A.length&&new RegExp(A.join("|")),N=N.length&&new RegExp(N.join("|")),t=fe.test(L.compareDocumentPosition),H=t||fe.test(L.contains)?function(e,t){var i=9===e.nodeType?e.documentElement:e,n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},Y=t?function(e,t){if(e===t)return k=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!y.sortDetached&&t.compareDocumentPosition(e)===i?e===P||e.ownerDocument===R&&H(R,e)?-1:t===P||t.ownerDocument===R&&H(R,t)?1:M?Z(M,e)-Z(M,t):0:4&i?-1:1)}:function(e,t){if(e===t)return k=!0,0;var i,n=0,a=e.parentNode,r=t.parentNode,o=[e],l=[t];if(!a||!r)return e===P?-1:t===P?1:a?-1:r?1:M?Z(M,e)-Z(M,t):0;if(a===r)return s(e,t);for(i=e;i=i.parentNode;)o.unshift(i);for(i=t;i=i.parentNode;)l.unshift(i);for(;o[n]===l[n];)n++;return n?s(o[n],l[n]):o[n]===R?-1:l[n]===R?1:0},P):P},t.matches=function(e,i){return t(e,null,null,i)},t.matchesSelector=function(e,i){if((e.ownerDocument||e)!==P&&D(e),i=i.replace(le,"='$1']"),y.matchesSelector&&I&&!X[i+" "]&&(!N||!N.test(i))&&(!A||!A.test(i)))try{var n=B.call(e,i);if(n||y.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){}return t(i,P,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==P&&D(e),H(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==P&&D(e);var i=x.attrHandle[t.toLowerCase()],n=i&&_.call(x.attrHandle,t.toLowerCase())?i(e,t,!I):void 0;return void 0!==n?n:y.attributes||!I?e.getAttribute(t):(n=e.getAttributeNode(t))&&n.specified?n.value:null},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,i=[],n=0,a=0;if(k=!y.detectDuplicates,M=!y.sortStable&&e.slice(0),e.sort(Y),k){for(;t=e[a++];)t===e[a]&&(n=i.push(a));for(;n--;)e.splice(i[n],1)}return M=null,e},b=t.getText=function(e){var t,i="",n=0,a=e.nodeType;if(a){if(1===a||9===a||11===a){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)i+=b(e)}else if(3===a||4===a)return e.nodeValue}else for(;t=e[n++];)i+=b(t);return i},(x=t.selectors={cacheLength:50,createPseudo:n,match:de,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(we,ye),e[3]=(e[3]||e[4]||e[5]||"").replace(we,ye),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,i=!e[6]&&e[2];return de.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":i&&ue.test(i)&&(t=C(i,!0))&&(t=i.indexOf(")",i.length-t)-i.length)&&(e[0]=e[0].slice(0,t),e[2]=i.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(we,ye).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=W[e+" "];return t||(t=new RegExp("(^|"+ee+")"+e+"("+ee+"|$)"))&&W(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,i,n){return function(a){var r=t.attr(a,e);return null==r?"!="===i:!i||(r+="","="===i?r===n:"!="===i?r!==n:"^="===i?n&&0===r.indexOf(n):"*="===i?n&&r.indexOf(n)>-1:"$="===i?n&&r.slice(-n.length)===n:"~="===i?(" "+r.replace(ae," ")+" ").indexOf(n)>-1:"|="===i&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,i,n,a){var r="nth"!==e.slice(0,3),s="last"!==e.slice(-4),o="of-type"===t;return 1===n&&0===a?function(e){return!!e.parentNode}:function(t,i,l){var u,p,d,c,h,f,m=r!==s?"nextSibling":"previousSibling",g=t.parentNode,v=o&&t.nodeName.toLowerCase(),w=!l&&!o,y=!1;if(g){if(r){for(;m;){for(c=t;c=c[m];)if(o?c.nodeName.toLowerCase()===v:1===c.nodeType)return!1;f=m="only"===e&&!f&&"nextSibling"}return!0}if(f=[s?g.firstChild:g.lastChild],s&&w){for(y=(h=(u=(p=(d=(c=g)[O]||(c[O]={}))[c.uniqueID]||(d[c.uniqueID]={}))[e]||[])[0]===F&&u[1])&&u[2],c=h&&g.childNodes[h];c=++h&&c&&c[m]||(y=h=0)||f.pop();)if(1===c.nodeType&&++y&&c===t){p[e]=[F,h,y];break}}else if(w&&(y=h=(u=(p=(d=(c=t)[O]||(c[O]={}))[c.uniqueID]||(d[c.uniqueID]={}))[e]||[])[0]===F&&u[1]),!1===y)for(;(c=++h&&c&&c[m]||(y=h=0)||f.pop())&&((o?c.nodeName.toLowerCase()!==v:1!==c.nodeType)||!++y||(w&&((p=(d=c[O]||(c[O]={}))[c.uniqueID]||(d[c.uniqueID]={}))[e]=[F,y]),c!==t)););return(y-=a)===n||y%n==0&&y/n>=0}}},PSEUDO:function(e,i){var a,r=x.pseudos[e]||x.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return r[O]?r(i):r.length>1?(a=[e,e,"",i],x.setFilters.hasOwnProperty(e.toLowerCase())?n(function(e,t){for(var n,a=r(e,i),s=a.length;s--;)e[n=Z(e,a[s])]=!(t[n]=a[s])}):function(e){return r(e,0,a)}):r}},pseudos:{not:n(function(e){var t=[],i=[],a=S(e.replace(re,"$1"));return a[O]?n(function(e,t,i,n){for(var r,s=a(e,null,n,[]),o=e.length;o--;)(r=s[o])&&(e[o]=!(t[o]=r))}):function(e,n,r){return t[0]=e,a(t,null,r,i),t[0]=null,!i.pop()}}),has:n(function(e){return function(i){return t(e,i).length>0}}),contains:n(function(e){return e=e.replace(we,ye),function(t){return(t.textContent||t.innerText||b(t)).indexOf(e)>-1}}),lang:n(function(e){return pe.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(we,ye).toLowerCase(),function(t){var i;do{if(i=I?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(i=i.toLowerCase())===e||0===i.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var i=e.location&&e.location.hash;return i&&i.slice(1)===t.id},root:function(e){return e===L},focus:function(e){return e===P.activeElement&&(!P.hasFocus||P.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return!1===e.disabled},disabled:function(e){return!0===e.disabled},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return he.test(e.nodeName)},input:function(e){return ce.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:o(function(){return[0]}),last:o(function(e,t){return[t-1]}),eq:o(function(e,t,i){return[i<0?i+t:i]}),even:o(function(e,t){for(var i=0;i<t;i+=2)e.push(i);return e}),odd:o(function(e,t){for(var i=1;i<t;i+=2)e.push(i);return e}),lt:o(function(e,t,i){for(var n=i<0?i+t:i;--n>=0;)e.push(n);return e}),gt:o(function(e,t,i){for(var n=i<0?i+t:i;++n<t;)e.push(n);return e})}}).pseudos.nth=x.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[w]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(w);for(w in{submit:!0,reset:!0})x.pseudos[w]=function(e){return function(t){var i=t.nodeName.toLowerCase();return("input"===i||"button"===i)&&t.type===e}}(w);return u.prototype=x.filters=x.pseudos,x.setFilters=new u,C=t.tokenize=function(e,i){var n,a,r,s,o,l,u,p=j[e+" "];if(p)return i?0:p.slice(0);for(o=e,l=[],u=x.preFilter;o;){n&&!(a=se.exec(o))||(a&&(o=o.slice(a[0].length)||o),l.push(r=[])),n=!1,(a=oe.exec(o))&&(n=a.shift(),r.push({value:n,type:a[0].replace(re," ")}),o=o.slice(n.length));for(s in x.filter)!(a=de[s].exec(o))||u[s]&&!(a=u[s](a))||(n=a.shift(),r.push({value:n,type:s,matches:a}),o=o.slice(n.length));if(!n)break}return i?o.length:o?t.error(e):j(e,l).slice(0)},S=t.compile=function(e,t){var i,n=[],a=[],r=X[e+" "];if(!r){for(t||(t=C(e)),i=t.length;i--;)(r=g(t[i]))[O]?n.push(r):a.push(r);(r=X(e,v(a,n))).selector=e}return r},z=t.select=function(e,t,i,n){var a,r,s,o,u,d="function"==typeof e&&e,c=!n&&C(e=d.selector||e);if(i=i||[],1===c.length){if((r=c[0]=c[0].slice(0)).length>2&&"ID"===(s=r[0]).type&&y.getById&&9===t.nodeType&&I&&x.relative[r[1].type]){if(!(t=(x.find.ID(s.matches[0].replace(we,ye),t)||[])[0]))return i;d&&(t=t.parentNode),e=e.slice(r.shift().value.length)}for(a=de.needsContext.test(e)?0:r.length;a--&&(s=r[a],!x.relative[o=s.type]);)if((u=x.find[o])&&(n=u(s.matches[0].replace(we,ye),ge.test(r[0].type)&&l(t.parentNode)||t))){if(r.splice(a,1),!(e=n.length&&p(r)))return K.apply(i,n),i;break}}return(d||S(e,c))(n,t,!I,i,!t||ge.test(e)&&l(t.parentNode)||t),i},y.sortStable=O.split("").sort(Y).join("")===O,y.detectDuplicates=!!k,D(),y.sortDetached=a(function(e){return 1&e.compareDocumentPosition(P.createElement("div"))}),a(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||r("type|href|height|width",function(e,t,i){if(!i)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),y.attributes&&a(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||r("value",function(e,t,i){if(!i&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),a(function(e){return null==e.getAttribute("disabled")})||r(J,function(e,t,i){var n;if(!i)return!0===e[t]?t.toLowerCase():(n=e.getAttributeNode(t))&&n.specified?n.value:null}),t}(e);ne.find=le,ne.expr=le.selectors,ne.expr[":"]=ne.expr.pseudos,ne.uniqueSort=ne.unique=le.uniqueSort,ne.text=le.getText,ne.isXMLDoc=le.isXML,ne.contains=le.contains;var ue=function(e,t,i){for(var n=[],a=void 0!==i;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(a&&ne(e).is(i))break;n.push(e)}return n},pe=function(e,t){for(var i=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&i.push(e);return i},de=ne.expr.match.needsContext,ce=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,he=/^.[^:#\[\.,]*$/;ne.filter=function(e,t,i){var n=t[0];return i&&(e=":not("+e+")"),1===t.length&&1===n.nodeType?ne.find.matchesSelector(n,e)?[n]:[]:ne.find.matches(e,ne.grep(t,function(e){return 1===e.nodeType}))},ne.fn.extend({find:function(e){var t,i=this.length,n=[],a=this;if("string"!=typeof e)return this.pushStack(ne(e).filter(function(){for(t=0;t<i;t++)if(ne.contains(a[t],this))return!0}));for(t=0;t<i;t++)ne.find(e,a[t],n);return n=this.pushStack(i>1?ne.unique(n):n),n.selector=this.selector?this.selector+" "+e:e,n},filter:function(e){return this.pushStack(n(this,e||[],!1))},not:function(e){return this.pushStack(n(this,e||[],!0))},is:function(e){return!!n(this,"string"==typeof e&&de.test(e)?ne(e):e||[],!1).length}});var fe,me=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;(ne.fn.init=function(e,t,i){var n,a;if(!e)return this;if(i=i||fe,"string"==typeof e){if(!(n="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:me.exec(e))||!n[1]&&t)return!t||t.jquery?(t||i).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof ne?t[0]:t,ne.merge(this,ne.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:$,!0)),ce.test(n[1])&&ne.isPlainObject(t))for(n in t)ne.isFunction(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}return(a=$.getElementById(n[2]))&&a.parentNode&&(this.length=1,this[0]=a),this.context=$,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):ne.isFunction(e)?void 0!==i.ready?i.ready(e):e(ne):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),ne.makeArray(e,this))}).prototype=ne.fn,fe=ne($);var ge=/^(?:parents|prev(?:Until|All))/,ve={children:!0,contents:!0,next:!0,prev:!0};ne.fn.extend({has:function(e){var t=ne(e,this),i=t.length;return this.filter(function(){for(var e=0;e<i;e++)if(ne.contains(this,t[e]))return!0})},closest:function(e,t){for(var i,n=0,a=this.length,r=[],s=de.test(e)||"string"!=typeof e?ne(e,t||this.context):0;n<a;n++)for(i=this[n];i&&i!==t;i=i.parentNode)if(i.nodeType<11&&(s?s.index(i)>-1:1===i.nodeType&&ne.find.matchesSelector(i,e))){r.push(i);break}return this.pushStack(r.length>1?ne.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?Z.call(ne(e),this[0]):Z.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(ne.uniqueSort(ne.merge(this.get(),ne(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),ne.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return ue(e,"parentNode")},parentsUntil:function(e,t,i){return ue(e,"parentNode",i)},next:function(e){return a(e,"nextSibling")},prev:function(e){return a(e,"previousSibling")},nextAll:function(e){return ue(e,"nextSibling")},prevAll:function(e){return ue(e,"previousSibling")},nextUntil:function(e,t,i){return ue(e,"nextSibling",i)},prevUntil:function(e,t,i){return ue(e,"previousSibling",i)},siblings:function(e){return pe((e.parentNode||{}).firstChild,e)},children:function(e){return pe(e.firstChild)},contents:function(e){return e.contentDocument||ne.merge([],e.childNodes)}},function(e,t){ne.fn[e]=function(i,n){var a=ne.map(this,t,i);return"Until"!==e.slice(-5)&&(n=i),n&&"string"==typeof n&&(a=ne.filter(n,a)),this.length>1&&(ve[e]||ne.uniqueSort(a),ge.test(e)&&a.reverse()),this.pushStack(a)}});var we=/\S+/g;ne.Callbacks=function(e){e="string"==typeof e?r(e):ne.extend({},e);var t,i,n,a,s=[],o=[],l=-1,u=function(){for(a=e.once,n=t=!0;o.length;l=-1)for(i=o.shift();++l<s.length;)!1===s[l].apply(i[0],i[1])&&e.stopOnFalse&&(l=s.length,i=!1);e.memory||(i=!1),t=!1,a&&(s=i?[]:"")},p={add:function(){return s&&(i&&!t&&(l=s.length-1,o.push(i)),function t(i){ne.each(i,function(i,n){ne.isFunction(n)?e.unique&&p.has(n)||s.push(n):n&&n.length&&"string"!==ne.type(n)&&t(n)})}(arguments),i&&!t&&u()),this},remove:function(){return ne.each(arguments,function(e,t){for(var i;(i=ne.inArray(t,s,i))>-1;)s.splice(i,1),i<=l&&l--}),this},has:function(e){return e?ne.inArray(e,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return a=o=[],s=i="",this},disabled:function(){return!s},lock:function(){return a=o=[],i||(s=i=""),this},locked:function(){return!!a},fireWith:function(e,i){return a||(i=[e,(i=i||[]).slice?i.slice():i],o.push(i),t||u()),this},fire:function(){return p.fireWith(this,arguments),this},fired:function(){return!!n}};return p},ne.extend({Deferred:function(e){var t=[["resolve","done",ne.Callbacks("once memory"),"resolved"],["reject","fail",ne.Callbacks("once memory"),"rejected"],["notify","progress",ne.Callbacks("memory")]],i="pending",n={state:function(){return i},always:function(){return a.done(arguments).fail(arguments),this},then:function(){var e=arguments;return ne.Deferred(function(i){ne.each(t,function(t,r){var s=ne.isFunction(e[t])&&e[t];a[r[1]](function(){var e=s&&s.apply(this,arguments);e&&ne.isFunction(e.promise)?e.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[r[0]+"With"](this===n?i.promise():this,s?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?ne.extend(e,n):n}},a={};return n.pipe=n.then,ne.each(t,function(e,r){var s=r[2],o=r[3];n[r[1]]=s.add,o&&s.add(function(){i=o},t[1^e][2].disable,t[2][2].lock),a[r[0]]=function(){return a[r[0]+"With"](this===a?n:this,arguments),this},a[r[0]+"With"]=s.fireWith}),n.promise(a),e&&e.call(a,a),a},when:function(e){var t,i,n,a=0,r=U.call(arguments),s=r.length,o=1!==s||e&&ne.isFunction(e.promise)?s:0,l=1===o?e:ne.Deferred(),u=function(e,i,n){return function(a){i[e]=this,n[e]=arguments.length>1?U.call(arguments):a,n===t?l.notifyWith(i,n):--o||l.resolveWith(i,n)}};if(s>1)for(t=new Array(s),i=new Array(s),n=new Array(s);a<s;a++)r[a]&&ne.isFunction(r[a].promise)?r[a].promise().progress(u(a,i,t)).done(u(a,n,r)).fail(l.reject):--o;return o||l.resolveWith(n,r),l.promise()}});var ye;ne.fn.ready=function(e){return ne.ready.promise().done(e),this},ne.extend({isReady:!1,readyWait:1,holdReady:function(e){e?ne.readyWait++:ne.ready(!0)},ready:function(e){(!0===e?--ne.readyWait:ne.isReady)||(ne.isReady=!0,!0!==e&&--ne.readyWait>0||(ye.resolveWith($,[ne]),ne.fn.triggerHandler&&(ne($).triggerHandler("ready"),ne($).off("ready"))))}}),ne.ready.promise=function(t){return ye||(ye=ne.Deferred(),"complete"===$.readyState||"loading"!==$.readyState&&!$.documentElement.doScroll?e.setTimeout(ne.ready):($.addEventListener("DOMContentLoaded",s),e.addEventListener("load",s))),ye.promise(t)},ne.ready.promise();var xe=function(e,t,i,n,a,r,s){var o=0,l=e.length,u=null==i;if("object"===ne.type(i)){a=!0;for(o in i)xe(e,t,o,i[o],!0,r,s)}else if(void 0!==n&&(a=!0,ne.isFunction(n)||(s=!0),u&&(s?(t.call(e,n),t=null):(u=t,t=function(e,t,i){return u.call(ne(e),i)})),t))for(;o<l;o++)t(e[o],i,s?n:n.call(e[o],o,t(e[o],i)));return a?e:u?t.call(e):l?t(e[0],i):r},be=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};o.uid=1,o.prototype={register:function(e,t){var i=t||{};return e.nodeType?e[this.expando]=i:Object.defineProperty(e,this.expando,{value:i,writable:!0,configurable:!0}),e[this.expando]},cache:function(e){if(!be(e))return{};var t=e[this.expando];return t||(t={},be(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,i){var n,a=this.cache(e);if("string"==typeof t)a[t]=i;else for(n in t)a[n]=t[n];return a},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][t]},access:function(e,t,i){var n;return void 0===t||t&&"string"==typeof t&&void 0===i?void 0!==(n=this.get(e,t))?n:this.get(e,ne.camelCase(t)):(this.set(e,t,i),void 0!==i?i:t)},remove:function(e,t){var i,n,a,r=e[this.expando];if(void 0!==r){if(void 0===t)this.register(e);else{ne.isArray(t)?n=t.concat(t.map(ne.camelCase)):(a=ne.camelCase(t),n=t in r?[t,a]:(n=a)in r?[n]:n.match(we)||[]),i=n.length;for(;i--;)delete r[n[i]]}(void 0===t||ne.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!ne.isEmptyObject(t)}};var Te=new o,Ce=new o,Se=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ze=/[A-Z]/g;ne.extend({hasData:function(e){return Ce.hasData(e)||Te.hasData(e)},data:function(e,t,i){return Ce.access(e,t,i)},removeData:function(e,t){Ce.remove(e,t)},_data:function(e,t,i){return Te.access(e,t,i)},_removeData:function(e,t){Te.remove(e,t)}}),ne.fn.extend({data:function(e,t){var i,n,a,r=this[0],s=r&&r.attributes;if(void 0===e){if(this.length&&(a=Ce.get(r),1===r.nodeType&&!Te.get(r,"hasDataAttrs"))){for(i=s.length;i--;)s[i]&&0===(n=s[i].name).indexOf("data-")&&(n=ne.camelCase(n.slice(5)),l(r,n,a[n]));Te.set(r,"hasDataAttrs",!0)}return a}return"object"==typeof e?this.each(function(){Ce.set(this,e)}):xe(this,function(t){var i,n;if(r&&void 0===t){if(void 0!==(i=Ce.get(r,e)||Ce.get(r,e.replace(ze,"-$&").toLowerCase())))return i;if(n=ne.camelCase(e),void 0!==(i=Ce.get(r,n)))return i;if(void 0!==(i=l(r,n,void 0)))return i}else n=ne.camelCase(e),this.each(function(){var i=Ce.get(this,n);Ce.set(this,n,t),e.indexOf("-")>-1&&void 0!==i&&Ce.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Ce.remove(this,e)})}}),ne.extend({queue:function(e,t,i){var n;if(e)return t=(t||"fx")+"queue",n=Te.get(e,t),i&&(!n||ne.isArray(i)?n=Te.access(e,t,ne.makeArray(i)):n.push(i)),n||[]},dequeue:function(e,t){t=t||"fx";var i=ne.queue(e,t),n=i.length,a=i.shift(),r=ne._queueHooks(e,t);"inprogress"===a&&(a=i.shift(),n--),a&&("fx"===t&&i.unshift("inprogress"),delete r.stop,a.call(e,function(){ne.dequeue(e,t)},r)),!n&&r&&r.empty.fire()},_queueHooks:function(e,t){var i=t+"queueHooks";return Te.get(e,i)||Te.access(e,i,{empty:ne.Callbacks("once memory").add(function(){Te.remove(e,[t+"queue",i])})})}}),ne.fn.extend({queue:function(e,t){var i=2;return"string"!=typeof e&&(t=e,e="fx",i--),arguments.length<i?ne.queue(this[0],e):void 0===t?this:this.each(function(){var i=ne.queue(this,e,t);ne._queueHooks(this,e),"fx"===e&&"inprogress"!==i[0]&&ne.dequeue(this,e)})},dequeue:function(e){return this.each(function(){ne.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var i,n=1,a=ne.Deferred(),r=this,s=this.length,o=function(){--n||a.resolveWith(r,[r])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(i=Te.get(r[s],e+"queueHooks"))&&i.empty&&(n++,i.empty.add(o));return o(),a.promise(t)}});var Ee=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Me=new RegExp("^(?:([+-])=|)("+Ee+")([a-z%]*)$","i"),ke=["Top","Right","Bottom","Left"],De=function(e,t){return e=t||e,"none"===ne.css(e,"display")||!ne.contains(e.ownerDocument,e)},Pe=/^(?:checkbox|radio)$/i,Le=/<([\w:-]+)/,Ie=/^$|\/(?:java|ecma)script/i,Ae={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ae.optgroup=Ae.option,Ae.tbody=Ae.tfoot=Ae.colgroup=Ae.caption=Ae.thead,Ae.th=Ae.td;var Ne=/<|&#?\w+;/;!function(){var e=$.createDocumentFragment().appendChild($.createElement("div")),t=$.createElement("input");t.setAttribute("type","radio"),t.setAttribute("checked","checked"),t.setAttribute("name","t"),e.appendChild(t),ie.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",ie.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var Be=/^key/,He=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Oe=/^([^.]*)(?:\.(.+)|)/;ne.event={global:{},add:function(e,t,i,n,a){var r,s,o,l,u,p,d,c,h,f,m,g=Te.get(e);if(g)for(i.handler&&(i=(r=i).handler,a=r.selector),i.guid||(i.guid=ne.guid++),(l=g.events)||(l=g.events={}),(s=g.handle)||(s=g.handle=function(t){return void 0!==ne&&ne.event.triggered!==t.type?ne.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(we)||[""]).length;u--;)h=m=(o=Oe.exec(t[u])||[])[1],f=(o[2]||"").split(".").sort(),h&&(d=ne.event.special[h]||{},h=(a?d.delegateType:d.bindType)||h,d=ne.event.special[h]||{},p=ne.extend({type:h,origType:m,data:n,handler:i,guid:i.guid,selector:a,needsContext:a&&ne.expr.match.needsContext.test(a),namespace:f.join(".")},r),(c=l[h])||((c=l[h]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,n,f,s)||e.addEventListener&&e.addEventListener(h,s)),d.add&&(d.add.call(e,p),p.handler.guid||(p.handler.guid=i.guid)),a?c.splice(c.delegateCount++,0,p):c.push(p),ne.event.global[h]=!0)},remove:function(e,t,i,n,a){var r,s,o,l,u,p,d,c,h,f,m,g=Te.hasData(e)&&Te.get(e);if(g&&(l=g.events)){for(u=(t=(t||"").match(we)||[""]).length;u--;)if(o=Oe.exec(t[u])||[],h=m=o[1],f=(o[2]||"").split(".").sort(),h){for(d=ne.event.special[h]||{},c=l[h=(n?d.delegateType:d.bindType)||h]||[],o=o[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=c.length;r--;)p=c[r],!a&&m!==p.origType||i&&i.guid!==p.guid||o&&!o.test(p.namespace)||n&&n!==p.selector&&("**"!==n||!p.selector)||(c.splice(r,1),p.selector&&c.delegateCount--,d.remove&&d.remove.call(e,p));s&&!c.length&&(d.teardown&&!1!==d.teardown.call(e,f,g.handle)||ne.removeEvent(e,h,g.handle),delete l[h])}else for(h in l)ne.event.remove(e,h+t[u],i,n,!0);ne.isEmptyObject(l)&&Te.remove(e,"handle events")}},dispatch:function(e){e=ne.event.fix(e);var t,i,n,a,r,s=[],o=U.call(arguments),l=(Te.get(this,"events")||{})[e.type]||[],u=ne.event.special[e.type]||{};if(o[0]=e,e.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,e)){for(s=ne.event.handlers.call(this,e,l),t=0;(a=s[t++])&&!e.isPropagationStopped();)for(e.currentTarget=a.elem,i=0;(r=a.handlers[i++])&&!e.isImmediatePropagationStopped();)e.rnamespace&&!e.rnamespace.test(r.namespace)||(e.handleObj=r,e.data=r.data,void 0!==(n=((ne.event.special[r.origType]||{}).handle||r.handler).apply(a.elem,o))&&!1===(e.result=n)&&(e.preventDefault(),e.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,e),e.result}},handlers:function(e,t){var i,n,a,r,s=[],o=t.delegateCount,l=e.target;if(o&&l.nodeType&&("click"!==e.type||isNaN(e.button)||e.button<1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&(!0!==l.disabled||"click"!==e.type)){for(n=[],i=0;i<o;i++)void 0===n[a=(r=t[i]).selector+" "]&&(n[a]=r.needsContext?ne(a,this).index(l)>-1:ne.find(a,this,null,[l]).length),n[a]&&n.push(r);n.length&&s.push({elem:l,handlers:n})}return o<t.length&&s.push({elem:this,handlers:t.slice(o)}),s},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var i,n,a,r=t.button;return null==e.pageX&&null!=t.clientX&&(n=(i=e.target.ownerDocument||$).documentElement,a=i.body,e.pageX=t.clientX+(n&&n.scrollLeft||a&&a.scrollLeft||0)-(n&&n.clientLeft||a&&a.clientLeft||0),e.pageY=t.clientY+(n&&n.scrollTop||a&&a.scrollTop||0)-(n&&n.clientTop||a&&a.clientTop||0)),e.which||void 0===r||(e.which=1&r?1:2&r?3:4&r?2:0),e}},fix:function(e){if(e[ne.expando])return e;var t,i,n,a=e.type,r=e,s=this.fixHooks[a];for(s||(this.fixHooks[a]=s=He.test(a)?this.mouseHooks:Be.test(a)?this.keyHooks:{}),n=s.props?this.props.concat(s.props):this.props,e=new ne.Event(r),t=n.length;t--;)e[i=n[t]]=r[i];return e.target||(e.target=$),3===e.target.nodeType&&(e.target=e.target.parentNode),s.filter?s.filter(e,r):e},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==m()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===m()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&ne.nodeName(this,"input"))return this.click(),!1},_default:function(e){return ne.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},ne.removeEvent=function(e,t,i){e.removeEventListener&&e.removeEventListener(t,i)},ne.Event=function(e,t){if(!(this instanceof ne.Event))return new ne.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?h:f):this.type=e,t&&ne.extend(this,t),this.timeStamp=e&&e.timeStamp||ne.now(),this[ne.expando]=!0},ne.Event.prototype={constructor:ne.Event,isDefaultPrevented:f,isPropagationStopped:f,isImmediatePropagationStopped:f,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=h,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=h,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=h,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},ne.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){ne.event.special[e]={delegateType:t,bindType:t,handle:function(e){var i,n=this,a=e.relatedTarget,r=e.handleObj;return a&&(a===n||ne.contains(n,a))||(e.type=r.origType,i=r.handler.apply(this,arguments),e.type=t),i}}}),ne.fn.extend({on:function(e,t,i,n){return g(this,e,t,i,n)},one:function(e,t,i,n){return g(this,e,t,i,n,1)},off:function(e,t,i){var n,a;if(e&&e.preventDefault&&e.handleObj)return n=e.handleObj,ne(e.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof e){for(a in e)this.off(a,t,e[a]);return this}return!1!==t&&"function"!=typeof t||(i=t,t=void 0),!1===i&&(i=f),this.each(function(){ne.event.remove(this,e,i,t)})}});var Re=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,Fe=/<script|<style|<link/i,qe=/checked\s*(?:[^=]|=\s*.checked.)/i,We=/^true\/(.*)/,je=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;ne.extend({htmlPrefilter:function(e){return e.replace(Re,"<$1></$2>")},clone:function(e,t,i){var n,a,r,s,o=e.cloneNode(!0),l=ne.contains(e.ownerDocument,e);if(!(ie.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||ne.isXMLDoc(e)))for(s=p(o),n=0,a=(r=p(e)).length;n<a;n++)b(r[n],s[n]);if(t)if(i)for(r=r||p(e),s=s||p(o),n=0,a=r.length;n<a;n++)x(r[n],s[n]);else x(e,o);return(s=p(o,"script")).length>0&&d(s,!l&&p(e,"script")),o},cleanData:function(e){for(var t,i,n,a=ne.event.special,r=0;void 0!==(i=e[r]);r++)if(be(i)){if(t=i[Te.expando]){if(t.events)for(n in t.events)a[n]?ne.event.remove(i,n):ne.removeEvent(i,n,t.handle);i[Te.expando]=void 0}i[Ce.expando]&&(i[Ce.expando]=void 0)}}}),ne.fn.extend({domManip:T,detach:function(e){return C(this,e,!0)},remove:function(e){return C(this,e)},text:function(e){return xe(this,function(e){return void 0===e?ne.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return T(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||v(this,e).appendChild(e)})},prepend:function(){return T(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=v(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return T(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return T(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(ne.cleanData(p(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return ne.clone(this,e,t)})},html:function(e){return xe(this,function(e){var t=this[0]||{},i=0,n=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Fe.test(e)&&!Ae[(Le.exec(e)||["",""])[1].toLowerCase()]){e=ne.htmlPrefilter(e);try{for(;i<n;i++)1===(t=this[i]||{}).nodeType&&(ne.cleanData(p(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return T(this,arguments,function(t){var i=this.parentNode;ne.inArray(this,e)<0&&(ne.cleanData(p(this)),i&&i.replaceChild(t,this))},e)}}),ne.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){ne.fn[e]=function(e){for(var i,n=[],a=ne(e),r=a.length-1,s=0;s<=r;s++)i=s===r?this:this.clone(!0),ne(a[s])[t](i),Q.apply(n,i.get());return this.pushStack(n)}});var Xe,Ye={HTML:"block",BODY:"block"},Ge=/^margin/,_e=new RegExp("^("+Ee+")(?!px)[a-z%]+$","i"),Ve=function(t){var i=t.ownerDocument.defaultView;return i&&i.opener||(i=e),i.getComputedStyle(t)},$e=function(e,t,i,n){var a,r,s={};for(r in t)s[r]=e.style[r],e.style[r]=t[r];a=i.apply(e,n||[]);for(r in t)e.style[r]=s[r];return a},Ue=$.documentElement;!function(){function t(){o.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",o.innerHTML="",Ue.appendChild(s);var t=e.getComputedStyle(o);i="1%"!==t.top,r="2px"===t.marginLeft,n="4px"===t.width,o.style.marginRight="50%",a="4px"===t.marginRight,Ue.removeChild(s)}var i,n,a,r,s=$.createElement("div"),o=$.createElement("div");o.style&&(o.style.backgroundClip="content-box",o.cloneNode(!0).style.backgroundClip="",ie.clearCloneStyle="content-box"===o.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(o),ne.extend(ie,{pixelPosition:function(){return t(),i},boxSizingReliable:function(){return null==n&&t(),n},pixelMarginRight:function(){return null==n&&t(),a},reliableMarginLeft:function(){return null==n&&t(),r},reliableMarginRight:function(){var t,i=o.appendChild($.createElement("div"));return i.style.cssText=o.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",i.style.marginRight=i.style.width="0",o.style.width="1px",Ue.appendChild(s),t=!parseFloat(e.getComputedStyle(i).marginRight),Ue.removeChild(s),o.removeChild(i),t}}))}();var Ke=/^(none|table(?!-c[ea]).+)/,Qe={position:"absolute",visibility:"hidden",display:"block"},Ze={letterSpacing:"0",fontWeight:"400"},Je=["Webkit","O","Moz","ms"],et=$.createElement("div").style;ne.extend({cssHooks:{opacity:{get:function(e,t){if(t){var i=E(e,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,i,n){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var a,r,s,o=ne.camelCase(t),l=e.style;if(t=ne.cssProps[o]||(ne.cssProps[o]=k(o)||o),s=ne.cssHooks[t]||ne.cssHooks[o],void 0===i)return s&&"get"in s&&void 0!==(a=s.get(e,!1,n))?a:l[t];"string"==(r=typeof i)&&(a=Me.exec(i))&&a[1]&&(i=u(e,t,a),r="number"),null!=i&&i===i&&("number"===r&&(i+=a&&a[3]||(ne.cssNumber[o]?"":"px")),ie.clearCloneStyle||""!==i||0!==t.indexOf("background")||(l[t]="inherit"),s&&"set"in s&&void 0===(i=s.set(e,i,n))||(l[t]=i))}},css:function(e,t,i,n){var a,r,s,o=ne.camelCase(t);return t=ne.cssProps[o]||(ne.cssProps[o]=k(o)||o),(s=ne.cssHooks[t]||ne.cssHooks[o])&&"get"in s&&(a=s.get(e,!0,i)),void 0===a&&(a=E(e,t,n)),"normal"===a&&t in Ze&&(a=Ze[t]),""===i||i?(r=parseFloat(a),!0===i||isFinite(r)?r||0:a):a}}),ne.each(["height","width"],function(e,t){ne.cssHooks[t]={get:function(e,i,n){if(i)return Ke.test(ne.css(e,"display"))&&0===e.offsetWidth?$e(e,Qe,function(){return L(e,t,n)}):L(e,t,n)},set:function(e,i,n){var a,r=n&&Ve(e),s=n&&P(e,t,n,"border-box"===ne.css(e,"boxSizing",!1,r),r);return s&&(a=Me.exec(i))&&"px"!==(a[3]||"px")&&(e.style[t]=i,i=ne.css(e,t)),D(0,i,s)}}}),ne.cssHooks.marginLeft=M(ie.reliableMarginLeft,function(e,t){if(t)return(parseFloat(E(e,"marginLeft"))||e.getBoundingClientRect().left-$e(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),ne.cssHooks.marginRight=M(ie.reliableMarginRight,function(e,t){if(t)return $e(e,{display:"inline-block"},E,[e,"marginRight"])}),ne.each({margin:"",padding:"",border:"Width"},function(e,t){ne.cssHooks[e+t]={expand:function(i){for(var n=0,a={},r="string"==typeof i?i.split(" "):[i];n<4;n++)a[e+ke[n]+t]=r[n]||r[n-2]||r[0];return a}},Ge.test(e)||(ne.cssHooks[e+t].set=D)}),ne.fn.extend({css:function(e,t){return xe(this,function(e,t,i){var n,a,r={},s=0;if(ne.isArray(t)){for(n=Ve(e),a=t.length;s<a;s++)r[t[s]]=ne.css(e,t[s],!1,n);return r}return void 0!==i?ne.style(e,t,i):ne.css(e,t)},e,t,arguments.length>1)},show:function(){return I(this,!0)},hide:function(){return I(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){De(this)?ne(this).show():ne(this).hide()})}}),ne.Tween=A,A.prototype={constructor:A,init:function(e,t,i,n,a,r){this.elem=e,this.prop=i,this.easing=a||ne.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=n,this.unit=r||(ne.cssNumber[i]?"":"px")},cur:function(){var e=A.propHooks[this.prop];return e&&e.get?e.get(this):A.propHooks._default.get(this)},run:function(e){var t,i=A.propHooks[this.prop];return this.options.duration?this.pos=t=ne.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):A.propHooks._default.set(this),this}},A.prototype.init.prototype=A.prototype,A.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=ne.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){ne.fx.step[e.prop]?ne.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[ne.cssProps[e.prop]]&&!ne.cssHooks[e.prop]?e.elem[e.prop]=e.now:ne.style(e.elem,e.prop,e.now+e.unit)}}},A.propHooks.scrollTop=A.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},ne.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},ne.fx=A.prototype.init,ne.fx.step={};var tt,it,nt=/^(?:toggle|show|hide)$/,at=/queueHooks$/;ne.Animation=ne.extend(R,{tweeners:{"*":[function(e,t){var i=this.createTween(e,t);return u(i.elem,e,Me.exec(t),i),i}]},tweener:function(e,t){ne.isFunction(e)?(t=e,e=["*"]):e=e.match(we);for(var i,n=0,a=e.length;n<a;n++)i=e[n],R.tweeners[i]=R.tweeners[i]||[],R.tweeners[i].unshift(t)},prefilters:[function(e,t,i){var n,a,r,s,o,l,u,p=this,d={},c=e.style,h=e.nodeType&&De(e),f=Te.get(e,"fxshow");i.queue||(null==(o=ne._queueHooks(e,"fx")).unqueued&&(o.unqueued=0,l=o.empty.fire,o.empty.fire=function(){o.unqueued||l()}),o.unqueued++,p.always(function(){p.always(function(){o.unqueued--,ne.queue(e,"fx").length||o.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(i.overflow=[c.overflow,c.overflowX,c.overflowY],"inline"===("none"===(u=ne.css(e,"display"))?Te.get(e,"olddisplay")||z(e.nodeName):u)&&"none"===ne.css(e,"float")&&(c.display="inline-block")),i.overflow&&(c.overflow="hidden",p.always(function(){c.overflow=i.overflow[0],c.overflowX=i.overflow[1],c.overflowY=i.overflow[2]}));for(n in t)if(a=t[n],nt.exec(a)){if(delete t[n],r=r||"toggle"===a,a===(h?"hide":"show")){if("show"!==a||!f||void 0===f[n])continue;h=!0}d[n]=f&&f[n]||ne.style(e,n)}else u=void 0;if(ne.isEmptyObject(d))"inline"===("none"===u?z(e.nodeName):u)&&(c.display=u);else{f?"hidden"in f&&(h=f.hidden):f=Te.access(e,"fxshow",{}),r&&(f.hidden=!h),h?ne(e).show():p.done(function(){ne(e).hide()}),p.done(function(){var t;Te.remove(e,"fxshow");for(t in d)ne.style(e,t,d[t])});for(n in d)s=H(h?f[n]:0,n,p),n in f||(f[n]=s.start,h&&(s.end=s.start,s.start="width"===n||"height"===n?1:0))}}],prefilter:function(e,t){t?R.prefilters.unshift(e):R.prefilters.push(e)}}),ne.speed=function(e,t,i){var n=e&&"object"==typeof e?ne.extend({},e):{complete:i||!i&&t||ne.isFunction(e)&&e,duration:e,easing:i&&t||t&&!ne.isFunction(t)&&t};return n.duration=ne.fx.off?0:"number"==typeof n.duration?n.duration:n.duration in ne.fx.speeds?ne.fx.speeds[n.duration]:ne.fx.speeds._default,null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){ne.isFunction(n.old)&&n.old.call(this),n.queue&&ne.dequeue(this,n.queue)},n},ne.fn.extend({fadeTo:function(e,t,i,n){return this.filter(De).css("opacity",0).show().end().animate({opacity:t},e,i,n)},animate:function(e,t,i,n){var a=ne.isEmptyObject(e),r=ne.speed(t,i,n),s=function(){var t=R(this,ne.extend({},e),r);(a||Te.get(this,"finish"))&&t.stop(!0)};return s.finish=s,a||!1===r.queue?this.each(s):this.queue(r.queue,s)},stop:function(e,t,i){var n=function(e){var t=e.stop;delete e.stop,t(i)};return"string"!=typeof e&&(i=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,a=null!=e&&e+"queueHooks",r=ne.timers,s=Te.get(this);if(a)s[a]&&s[a].stop&&n(s[a]);else for(a in s)s[a]&&s[a].stop&&at.test(a)&&n(s[a]);for(a=r.length;a--;)r[a].elem!==this||null!=e&&r[a].queue!==e||(r[a].anim.stop(i),t=!1,r.splice(a,1));!t&&i||ne.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,i=Te.get(this),n=i[e+"queue"],a=i[e+"queueHooks"],r=ne.timers,s=n?n.length:0;for(i.finish=!0,ne.queue(this,e,[]),a&&a.stop&&a.stop.call(this,!0),t=r.length;t--;)r[t].elem===this&&r[t].queue===e&&(r[t].anim.stop(!0),r.splice(t,1));for(t=0;t<s;t++)n[t]&&n[t].finish&&n[t].finish.call(this);delete i.finish})}}),ne.each(["toggle","show","hide"],function(e,t){var i=ne.fn[t];ne.fn[t]=function(e,n,a){return null==e||"boolean"==typeof e?i.apply(this,arguments):this.animate(B(t,!0),e,n,a)}}),ne.each({slideDown:B("show"),slideUp:B("hide"),slideToggle:B("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){ne.fn[e]=function(e,i,n){return this.animate(t,e,i,n)}}),ne.timers=[],ne.fx.tick=function(){var e,t=0,i=ne.timers;for(tt=ne.now();t<i.length;t++)(e=i[t])()||i[t]!==e||i.splice(t--,1);i.length||ne.fx.stop(),tt=void 0},ne.fx.timer=function(e){ne.timers.push(e),e()?ne.fx.start():ne.timers.pop()},ne.fx.interval=13,ne.fx.start=function(){it||(it=e.setInterval(ne.fx.tick,ne.fx.interval))},ne.fx.stop=function(){e.clearInterval(it),it=null},ne.fx.speeds={slow:600,fast:200,_default:400},ne.fn.delay=function(t,i){return t=ne.fx?ne.fx.speeds[t]||t:t,i=i||"fx",this.queue(i,function(i,n){var a=e.setTimeout(i,t);n.stop=function(){e.clearTimeout(a)}})},function(){var e=$.createElement("input"),t=$.createElement("select"),i=t.appendChild($.createElement("option"));e.type="checkbox",ie.checkOn=""!==e.value,ie.optSelected=i.selected,t.disabled=!0,ie.optDisabled=!i.disabled,(e=$.createElement("input")).value="t",e.type="radio",ie.radioValue="t"===e.value}();var rt,st=ne.expr.attrHandle;ne.fn.extend({attr:function(e,t){return xe(this,ne.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){ne.removeAttr(this,e)})}}),ne.extend({attr:function(e,t,i){var n,a,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?ne.prop(e,t,i):(1===r&&ne.isXMLDoc(e)||(t=t.toLowerCase(),a=ne.attrHooks[t]||(ne.expr.match.bool.test(t)?rt:void 0)),void 0!==i?null===i?void ne.removeAttr(e,t):a&&"set"in a&&void 0!==(n=a.set(e,i,t))?n:(e.setAttribute(t,i+""),i):a&&"get"in a&&null!==(n=a.get(e,t))?n:null==(n=ne.find.attr(e,t))?void 0:n)},attrHooks:{type:{set:function(e,t){if(!ie.radioValue&&"radio"===t&&ne.nodeName(e,"input")){var i=e.value;return e.setAttribute("type",t),i&&(e.value=i),t}}}},removeAttr:function(e,t){var i,n,a=0,r=t&&t.match(we);if(r&&1===e.nodeType)for(;i=r[a++];)n=ne.propFix[i]||i,ne.expr.match.bool.test(i)&&(e[n]=!1),e.removeAttribute(i)}}),rt={set:function(e,t,i){return!1===t?ne.removeAttr(e,i):e.setAttribute(i,i),i}},ne.each(ne.expr.match.bool.source.match(/\w+/g),function(e,t){var i=st[t]||ne.find.attr;st[t]=function(e,t,n){var a,r;return n||(r=st[t],st[t]=a,a=null!=i(e,t,n)?t.toLowerCase():null,st[t]=r),a}});var ot=/^(?:input|select|textarea|button)$/i,lt=/^(?:a|area)$/i;ne.fn.extend({prop:function(e,t){return xe(this,ne.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[ne.propFix[e]||e]})}}),ne.extend({prop:function(e,t,i){var n,a,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&ne.isXMLDoc(e)||(t=ne.propFix[t]||t,a=ne.propHooks[t]),void 0!==i?a&&"set"in a&&void 0!==(n=a.set(e,i,t))?n:e[t]=i:a&&"get"in a&&null!==(n=a.get(e,t))?n:e[t]},propHooks:{tabIndex:{get:function(e){var t=ne.find.attr(e,"tabindex");return t?parseInt(t,10):ot.test(e.nodeName)||lt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),ie.optSelected||(ne.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),ne.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){ne.propFix[this.toLowerCase()]=this});var ut=/[\t\r\n\f]/g;ne.fn.extend({addClass:function(e){var t,i,n,a,r,s,o,l=0;if(ne.isFunction(e))return this.each(function(t){ne(this).addClass(e.call(this,t,F(this)))});if("string"==typeof e&&e)for(t=e.match(we)||[];i=this[l++];)if(a=F(i),n=1===i.nodeType&&(" "+a+" ").replace(ut," ")){for(s=0;r=t[s++];)n.indexOf(" "+r+" ")<0&&(n+=r+" ");a!==(o=ne.trim(n))&&i.setAttribute("class",o)}return this},removeClass:function(e){var t,i,n,a,r,s,o,l=0;if(ne.isFunction(e))return this.each(function(t){ne(this).removeClass(e.call(this,t,F(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(we)||[];i=this[l++];)if(a=F(i),n=1===i.nodeType&&(" "+a+" ").replace(ut," ")){for(s=0;r=t[s++];)for(;n.indexOf(" "+r+" ")>-1;)n=n.replace(" "+r+" "," ");a!==(o=ne.trim(n))&&i.setAttribute("class",o)}return this},toggleClass:function(e,t){var i=typeof e;return"boolean"==typeof t&&"string"===i?t?this.addClass(e):this.removeClass(e):ne.isFunction(e)?this.each(function(i){ne(this).toggleClass(e.call(this,i,F(this),t),t)}):this.each(function(){var t,n,a,r;if("string"===i)for(n=0,a=ne(this),r=e.match(we)||[];t=r[n++];)a.hasClass(t)?a.removeClass(t):a.addClass(t);else void 0!==e&&"boolean"!==i||((t=F(this))&&Te.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Te.get(this,"__className__")||""))})},hasClass:function(e){var t,i,n=0;for(t=" "+e+" ";i=this[n++];)if(1===i.nodeType&&(" "+F(i)+" ").replace(ut," ").indexOf(t)>-1)return!0;return!1}});var pt=/\r/g,dt=/[\x20\t\r\n\f]+/g;ne.fn.extend({val:function(e){var t,i,n,a=this[0];{if(arguments.length)return n=ne.isFunction(e),this.each(function(i){var a;1===this.nodeType&&(null==(a=n?e.call(this,i,ne(this).val()):e)?a="":"number"==typeof a?a+="":ne.isArray(a)&&(a=ne.map(a,function(e){return null==e?"":e+""})),(t=ne.valHooks[this.type]||ne.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,a,"value")||(this.value=a))});if(a)return(t=ne.valHooks[a.type]||ne.valHooks[a.nodeName.toLowerCase()])&&"get"in t&&void 0!==(i=t.get(a,"value"))?i:"string"==typeof(i=a.value)?i.replace(pt,""):null==i?"":i}}}),ne.extend({valHooks:{option:{get:function(e){var t=ne.find.attr(e,"value");return null!=t?t:ne.trim(ne.text(e)).replace(dt," ")}},select:{get:function(e){for(var t,i,n=e.options,a=e.selectedIndex,r="select-one"===e.type||a<0,s=r?null:[],o=r?a+1:n.length,l=a<0?o:r?a:0;l<o;l++)if(((i=n[l]).selected||l===a)&&(ie.optDisabled?!i.disabled:null===i.getAttribute("disabled"))&&(!i.parentNode.disabled||!ne.nodeName(i.parentNode,"optgroup"))){if(t=ne(i).val(),r)return t;s.push(t)}return s},set:function(e,t){for(var i,n,a=e.options,r=ne.makeArray(t),s=a.length;s--;)((n=a[s]).selected=ne.inArray(ne.valHooks.option.get(n),r)>-1)&&(i=!0);return i||(e.selectedIndex=-1),r}}}}),ne.each(["radio","checkbox"],function(){ne.valHooks[this]={set:function(e,t){if(ne.isArray(t))return e.checked=ne.inArray(ne(e).val(),t)>-1}},ie.checkOn||(ne.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var ct=/^(?:focusinfocus|focusoutblur)$/;ne.extend(ne.event,{trigger:function(t,i,n,a){var r,s,o,l,u,p,d,c=[n||$],h=te.call(t,"type")?t.type:t,f=te.call(t,"namespace")?t.namespace.split("."):[];if(s=o=n=n||$,3!==n.nodeType&&8!==n.nodeType&&!ct.test(h+ne.event.triggered)&&(h.indexOf(".")>-1&&(h=(f=h.split(".")).shift(),f.sort()),u=h.indexOf(":")<0&&"on"+h,t=t[ne.expando]?t:new ne.Event(h,"object"==typeof t&&t),t.isTrigger=a?2:3,t.namespace=f.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),i=null==i?[t]:ne.makeArray(i,[t]),d=ne.event.special[h]||{},a||!d.trigger||!1!==d.trigger.apply(n,i))){if(!a&&!d.noBubble&&!ne.isWindow(n)){for(l=d.delegateType||h,ct.test(l+h)||(s=s.parentNode);s;s=s.parentNode)c.push(s),o=s;o===(n.ownerDocument||$)&&c.push(o.defaultView||o.parentWindow||e)}for(r=0;(s=c[r++])&&!t.isPropagationStopped();)t.type=r>1?l:d.bindType||h,(p=(Te.get(s,"events")||{})[t.type]&&Te.get(s,"handle"))&&p.apply(s,i),(p=u&&s[u])&&p.apply&&be(s)&&(t.result=p.apply(s,i),!1===t.result&&t.preventDefault());return t.type=h,a||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(c.pop(),i)||!be(n)||u&&ne.isFunction(n[h])&&!ne.isWindow(n)&&((o=n[u])&&(n[u]=null),ne.event.triggered=h,n[h](),ne.event.triggered=void 0,o&&(n[u]=o)),t.result}},simulate:function(e,t,i){var n=ne.extend(new ne.Event,i,{type:e,isSimulated:!0});ne.event.trigger(n,null,t)}}),ne.fn.extend({trigger:function(e,t){return this.each(function(){ne.event.trigger(e,t,this)})},triggerHandler:function(e,t){var i=this[0];if(i)return ne.event.trigger(e,t,i,!0)}}),ne.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){ne.fn[t]=function(e,i){return arguments.length>0?this.on(t,null,e,i):this.trigger(t)}}),ne.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),ie.focusin="onfocusin"in e,ie.focusin||ne.each({focus:"focusin",blur:"focusout"},function(e,t){var i=function(e){ne.event.simulate(t,e.target,ne.event.fix(e))};ne.event.special[t]={setup:function(){var n=this.ownerDocument||this,a=Te.access(n,t);a||n.addEventListener(e,i,!0),Te.access(n,t,(a||0)+1)},teardown:function(){var n=this.ownerDocument||this,a=Te.access(n,t)-1;a?Te.access(n,t,a):(n.removeEventListener(e,i,!0),Te.remove(n,t))}}});var ht=e.location,ft=ne.now(),mt=/\?/;ne.parseJSON=function(e){return JSON.parse(e+"")},ne.parseXML=function(t){var i;if(!t||"string"!=typeof t)return null;try{i=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){i=void 0}return i&&!i.getElementsByTagName("parsererror").length||ne.error("Invalid XML: "+t),i};var gt=/#.*$/,vt=/([?&])_=[^&]*/,wt=/^(.*?):[ \t]*([^\r\n]*)$/gm,yt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,xt=/^(?:GET|HEAD)$/,bt=/^\/\//,Tt={},Ct={},St="*/".concat("*"),zt=$.createElement("a");zt.href=ht.href,ne.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ht.href,type:"GET",isLocal:yt.test(ht.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":St,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":ne.parseJSON,"text xml":ne.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?j(j(e,ne.ajaxSettings),t):j(ne.ajaxSettings,e)},ajaxPrefilter:q(Tt),ajaxTransport:q(Ct),ajax:function(t,i){function n(t,i,n,o){var u,d,w,y,b,C=i;2!==x&&(x=2,l&&e.clearTimeout(l),a=void 0,s=o||"",T.readyState=t>0?4:0,u=t>=200&&t<300||304===t,n&&(y=X(c,T,n)),y=Y(c,y,T,u),u?(c.ifModified&&((b=T.getResponseHeader("Last-Modified"))&&(ne.lastModified[r]=b),(b=T.getResponseHeader("etag"))&&(ne.etag[r]=b)),204===t||"HEAD"===c.type?C="nocontent":304===t?C="notmodified":(C=y.state,d=y.data,u=!(w=y.error))):(w=C,!t&&C||(C="error",t<0&&(t=0))),T.status=t,T.statusText=(i||C)+"",u?m.resolveWith(h,[d,C,T]):m.rejectWith(h,[T,C,w]),T.statusCode(v),v=void 0,p&&f.trigger(u?"ajaxSuccess":"ajaxError",[T,c,u?d:w]),g.fireWith(h,[T,C]),p&&(f.trigger("ajaxComplete",[T,c]),--ne.active||ne.event.trigger("ajaxStop")))}"object"==typeof t&&(i=t,t=void 0),i=i||{};var a,r,s,o,l,u,p,d,c=ne.ajaxSetup({},i),h=c.context||c,f=c.context&&(h.nodeType||h.jquery)?ne(h):ne.event,m=ne.Deferred(),g=ne.Callbacks("once memory"),v=c.statusCode||{},w={},y={},x=0,b="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(2===x){if(!o)for(o={};t=wt.exec(s);)o[t[1].toLowerCase()]=t[2];t=o[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===x?s:null},setRequestHeader:function(e,t){var i=e.toLowerCase();return x||(e=y[i]=y[i]||e,w[e]=t),this},overrideMimeType:function(e){return x||(c.mimeType=e),this},statusCode:function(e){var t;if(e)if(x<2)for(t in e)v[t]=[v[t],e[t]];else T.always(e[T.status]);return this},abort:function(e){var t=e||b;return a&&a.abort(t),n(0,t),this}};if(m.promise(T).complete=g.add,T.success=T.done,T.error=T.fail,c.url=((t||c.url||ht.href)+"").replace(gt,"").replace(bt,ht.protocol+"//"),c.type=i.method||i.type||c.method||c.type,c.dataTypes=ne.trim(c.dataType||"*").toLowerCase().match(we)||[""],null==c.crossDomain){u=$.createElement("a");try{u.href=c.url,u.href=u.href,c.crossDomain=zt.protocol+"//"+zt.host!=u.protocol+"//"+u.host}catch(e){c.crossDomain=!0}}if(c.data&&c.processData&&"string"!=typeof c.data&&(c.data=ne.param(c.data,c.traditional)),W(Tt,c,i,T),2===x)return T;(p=ne.event&&c.global)&&0==ne.active++&&ne.event.trigger("ajaxStart"),c.type=c.type.toUpperCase(),c.hasContent=!xt.test(c.type),r=c.url,c.hasContent||(c.data&&(r=c.url+=(mt.test(r)?"&":"?")+c.data,delete c.data),!1===c.cache&&(c.url=vt.test(r)?r.replace(vt,"$1_="+ft++):r+(mt.test(r)?"&":"?")+"_="+ft++)),c.ifModified&&(ne.lastModified[r]&&T.setRequestHeader("If-Modified-Since",ne.lastModified[r]),ne.etag[r]&&T.setRequestHeader("If-None-Match",ne.etag[r])),(c.data&&c.hasContent&&!1!==c.contentType||i.contentType)&&T.setRequestHeader("Content-Type",c.contentType),T.setRequestHeader("Accept",c.dataTypes[0]&&c.accepts[c.dataTypes[0]]?c.accepts[c.dataTypes[0]]+("*"!==c.dataTypes[0]?", "+St+"; q=0.01":""):c.accepts["*"]);for(d in c.headers)T.setRequestHeader(d,c.headers[d]);if(c.beforeSend&&(!1===c.beforeSend.call(h,T,c)||2===x))return T.abort();b="abort";for(d in{success:1,error:1,complete:1})T[d](c[d]);if(a=W(Ct,c,i,T)){if(T.readyState=1,p&&f.trigger("ajaxSend",[T,c]),2===x)return T;c.async&&c.timeout>0&&(l=e.setTimeout(function(){T.abort("timeout")},c.timeout));try{x=1,a.send(w,n)}catch(e){if(!(x<2))throw e;n(-1,e)}}else n(-1,"No Transport");return T},getJSON:function(e,t,i){return ne.get(e,t,i,"json")},getScript:function(e,t){return ne.get(e,void 0,t,"script")}}),ne.each(["get","post"],function(e,t){ne[t]=function(e,i,n,a){return ne.isFunction(i)&&(a=a||n,n=i,i=void 0),ne.ajax(ne.extend({url:e,type:t,dataType:a,data:i,success:n},ne.isPlainObject(e)&&e))}}),ne._evalUrl=function(e){return ne.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,throws:!0})},ne.fn.extend({wrapAll:function(e){var t;return ne.isFunction(e)?this.each(function(t){ne(this).wrapAll(e.call(this,t))}):(this[0]&&(t=ne(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this)},wrapInner:function(e){return ne.isFunction(e)?this.each(function(t){ne(this).wrapInner(e.call(this,t))}):this.each(function(){var t=ne(this),i=t.contents();i.length?i.wrapAll(e):t.append(e)})},wrap:function(e){var t=ne.isFunction(e);return this.each(function(i){ne(this).wrapAll(t?e.call(this,i):e)})},unwrap:function(){return this.parent().each(function(){ne.nodeName(this,"body")||ne(this).replaceWith(this.childNodes)}).end()}}),ne.expr.filters.hidden=function(e){return!ne.expr.filters.visible(e)},ne.expr.filters.visible=function(e){return e.offsetWidth>0||e.offsetHeight>0||e.getClientRects().length>0};var Et=/%20/g,Mt=/\[\]$/,kt=/\r?\n/g,Dt=/^(?:submit|button|image|reset|file)$/i,Pt=/^(?:input|select|textarea|keygen)/i;ne.param=function(e,t){var i,n=[],a=function(e,t){t=ne.isFunction(t)?t():null==t?"":t,n[n.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=ne.ajaxSettings&&ne.ajaxSettings.traditional),ne.isArray(e)||e.jquery&&!ne.isPlainObject(e))ne.each(e,function(){a(this.name,this.value)});else for(i in e)G(i,e[i],t,a);return n.join("&").replace(Et,"+")},ne.fn.extend({serialize:function(){return ne.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=ne.prop(this,"elements");return e?ne.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!ne(this).is(":disabled")&&Pt.test(this.nodeName)&&!Dt.test(e)&&(this.checked||!Pe.test(e))}).map(function(e,t){var i=ne(this).val();return null==i?null:ne.isArray(i)?ne.map(i,function(e){return{name:t.name,value:e.replace(kt,"\r\n")}}):{name:t.name,value:i.replace(kt,"\r\n")}}).get()}}),ne.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Lt={0:200,1223:204},It=ne.ajaxSettings.xhr();ie.cors=!!It&&"withCredentials"in It,ie.ajax=It=!!It,ne.ajaxTransport(function(t){var i,n;if(ie.cors||It&&!t.crossDomain)return{send:function(a,r){var s,o=t.xhr();if(o.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)o[s]=t.xhrFields[s];t.mimeType&&o.overrideMimeType&&o.overrideMimeType(t.mimeType),t.crossDomain||a["X-Requested-With"]||(a["X-Requested-With"]="XMLHttpRequest");for(s in a)o.setRequestHeader(s,a[s]);i=function(e){return function(){i&&(i=n=o.onload=o.onerror=o.onabort=o.onreadystatechange=null,"abort"===e?o.abort():"error"===e?"number"!=typeof o.status?r(0,"error"):r(o.status,o.statusText):r(Lt[o.status]||o.status,o.statusText,"text"!==(o.responseType||"text")||"string"!=typeof o.responseText?{binary:o.response}:{text:o.responseText},o.getAllResponseHeaders()))}},o.onload=i(),n=o.onerror=i("error"),void 0!==o.onabort?o.onabort=n:o.onreadystatechange=function(){4===o.readyState&&e.setTimeout(function(){i&&n()})},i=i("abort");try{o.send(t.hasContent&&t.data||null)}catch(e){if(i)throw e}},abort:function(){i&&i()}}}),ne.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return ne.globalEval(e),e}}}),ne.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),ne.ajaxTransport("script",function(e){if(e.crossDomain){var t,i;return{send:function(n,a){t=ne("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",i=function(e){t.remove(),i=null,e&&a("error"===e.type?404:200,e.type)}),$.head.appendChild(t[0])},abort:function(){i&&i()}}}});var At=[],Nt=/(=)\?(?=&|$)|\?\?/;ne.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=At.pop()||ne.expando+"_"+ft++;return this[e]=!0,e}}),ne.ajaxPrefilter("json jsonp",function(t,i,n){var a,r,s,o=!1!==t.jsonp&&(Nt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Nt.test(t.data)&&"data");if(o||"jsonp"===t.dataTypes[0])return a=t.jsonpCallback=ne.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,o?t[o]=t[o].replace(Nt,"$1"+a):!1!==t.jsonp&&(t.url+=(mt.test(t.url)?"&":"?")+t.jsonp+"="+a),t.converters["script json"]=function(){return s||ne.error(a+" was not called"),s[0]},t.dataTypes[0]="json",r=e[a],e[a]=function(){s=arguments},n.always(function(){void 0===r?ne(e).removeProp(a):e[a]=r,t[a]&&(t.jsonpCallback=i.jsonpCallback,At.push(a)),s&&ne.isFunction(r)&&r(s[0]),s=r=void 0}),"script"}),ne.parseHTML=function(e,t,i){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(i=t,t=!1),t=t||$;var n=ce.exec(e),a=!i&&[];return n?[t.createElement(n[1])]:(n=c([e],t,a),a&&a.length&&ne(a).remove(),ne.merge([],n.childNodes))};var Bt=ne.fn.load;ne.fn.load=function(e,t,i){if("string"!=typeof e&&Bt)return Bt.apply(this,arguments);var n,a,r,s=this,o=e.indexOf(" ");return o>-1&&(n=ne.trim(e.slice(o)),e=e.slice(0,o)),ne.isFunction(t)?(i=t,t=void 0):t&&"object"==typeof t&&(a="POST"),s.length>0&&ne.ajax({url:e,type:a||"GET",dataType:"html",data:t}).done(function(e){r=arguments,s.html(n?ne("<div>").append(ne.parseHTML(e)).find(n):e)}).always(i&&function(e,t){s.each(function(){i.apply(this,r||[e.responseText,t,e])})}),this},ne.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){ne.fn[t]=function(e){return this.on(t,e)}}),ne.expr.filters.animated=function(e){return ne.grep(ne.timers,function(t){return e===t.elem}).length},ne.offset={setOffset:function(e,t,i){var n,a,r,s,o,l,u=ne.css(e,"position"),p=ne(e),d={};"static"===u&&(e.style.position="relative"),o=p.offset(),r=ne.css(e,"top"),l=ne.css(e,"left"),("absolute"===u||"fixed"===u)&&(r+l).indexOf("auto")>-1?(s=(n=p.position()).top,a=n.left):(s=parseFloat(r)||0,a=parseFloat(l)||0),ne.isFunction(t)&&(t=t.call(e,i,ne.extend({},o))),null!=t.top&&(d.top=t.top-o.top+s),null!=t.left&&(d.left=t.left-o.left+a),"using"in t?t.using.call(e,d):p.css(d)}},ne.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){ne.offset.setOffset(this,e,t)});var t,i,n=this[0],a={top:0,left:0},r=n&&n.ownerDocument;if(r)return t=r.documentElement,ne.contains(t,n)?(a=n.getBoundingClientRect(),i=_(r),{top:a.top+i.pageYOffset-t.clientTop,left:a.left+i.pageXOffset-t.clientLeft}):a},position:function(){if(this[0]){var e,t,i=this[0],n={top:0,left:0};return"fixed"===ne.css(i,"position")?t=i.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),ne.nodeName(e[0],"html")||(n=e.offset()),n.top+=ne.css(e[0],"borderTopWidth",!0),n.left+=ne.css(e[0],"borderLeftWidth",!0)),{top:t.top-n.top-ne.css(i,"marginTop",!0),left:t.left-n.left-ne.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===ne.css(e,"position");)e=e.offsetParent;return e||Ue})}}),ne.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var i="pageYOffset"===t;ne.fn[e]=function(n){return xe(this,function(e,n,a){var r=_(e);if(void 0===a)return r?r[t]:e[n];r?r.scrollTo(i?r.pageXOffset:a,i?a:r.pageYOffset):e[n]=a},e,n,arguments.length)}}),ne.each(["top","left"],function(e,t){ne.cssHooks[t]=M(ie.pixelPosition,function(e,i){if(i)return i=E(e,t),_e.test(i)?ne(e).position()[t]+"px":i})}),ne.each({Height:"height",Width:"width"},function(e,t){ne.each({padding:"inner"+e,content:t,"":"outer"+e},function(i,n){ne.fn[n]=function(n,a){var r=arguments.length&&(i||"boolean"!=typeof n),s=i||(!0===n||!0===a?"margin":"border");return xe(this,function(t,i,n){var a;return ne.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(a=t.documentElement,Math.max(t.body["scroll"+e],a["scroll"+e],t.body["offset"+e],a["offset"+e],a["client"+e])):void 0===n?ne.css(t,i,s):ne.style(t,i,n,s)},t,r?n:void 0,r,null)}})}),ne.fn.extend({bind:function(e,t,i){return this.on(e,null,t,i)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,i,n){return this.on(t,e,i,n)},undelegate:function(e,t,i){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",i)},size:function(){return this.length}}),ne.fn.andSelf=ne.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return ne});var Ht=e.jQuery,Ot=e.$;return ne.noConflict=function(t){return e.$===ne&&(e.$=Ot),t&&e.jQuery===ne&&(e.jQuery=Ht),ne},t||(e.jQuery=e.$=ne),ne}),function(){"use strict";var e,t=function(n,a){function r(e){return Math.floor(e)}function s(){var e=b.params.autoplay,t=b.slides.eq(b.activeIndex);t.attr("data-swiper-autoplay")&&(e=t.attr("data-swiper-autoplay")||b.params.autoplay),b.autoplayTimeoutId=setTimeout(function(){b.params.loop?(b.fixLoop(),b._slideNext(),b.emit("onAutoplay",b)):b.isEnd?a.autoplayStopOnLast?b.stopAutoplay():(b._slideTo(0),b.emit("onAutoplay",b)):(b._slideNext(),b.emit("onAutoplay",b))},e)}function o(t,i){var n=e(t.target);if(!n.is(i))if("string"==typeof i)n=n.parents(i);else if(i.nodeType){var a;return n.parents().each(function(e,t){t===i&&(a=i)}),a?i:void 0}if(0!==n.length)return n[0]}function l(e,t){t=t||{};var i=new(window.MutationObserver||window.WebkitMutationObserver)(function(e){e.forEach(function(e){b.onResize(!0),b.emit("onObserverUpdate",b,e)})});i.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),b.observers.push(i)}function u(e){e.originalEvent&&(e=e.originalEvent);var t=e.keyCode||e.charCode;if(!b.params.allowSwipeToNext&&(b.isHorizontal()&&39===t||!b.isHorizontal()&&40===t))return!1;if(!b.params.allowSwipeToPrev&&(b.isHorizontal()&&37===t||!b.isHorizontal()&&38===t))return!1;if(!(e.shiftKey||e.altKey||e.ctrlKey||e.metaKey||document.activeElement&&document.activeElement.nodeName&&("input"===document.activeElement.nodeName.toLowerCase()||"textarea"===document.activeElement.nodeName.toLowerCase()))){if(37===t||39===t||38===t||40===t){var i=!1;if(b.container.parents("."+b.params.slideClass).length>0&&0===b.container.parents("."+b.params.slideActiveClass).length)return;var n={left:window.pageXOffset,top:window.pageYOffset},a=window.innerWidth,r=window.innerHeight,s=b.container.offset();b.rtl&&(s.left=s.left-b.container[0].scrollLeft);for(var o=[[s.left,s.top],[s.left+b.width,s.top],[s.left,s.top+b.height],[s.left+b.width,s.top+b.height]],l=0;l<o.length;l++){var u=o[l];u[0]>=n.left&&u[0]<=n.left+a&&u[1]>=n.top&&u[1]<=n.top+r&&(i=!0)}if(!i)return}b.isHorizontal()?(37!==t&&39!==t||(e.preventDefault?e.preventDefault():e.returnValue=!1),(39===t&&!b.rtl||37===t&&b.rtl)&&b.slideNext(),(37===t&&!b.rtl||39===t&&b.rtl)&&b.slidePrev()):(38!==t&&40!==t||(e.preventDefault?e.preventDefault():e.returnValue=!1),40===t&&b.slideNext(),38===t&&b.slidePrev()),b.emit("onKeyPress",b,t)}}function p(e){var t=0,i=0,n=0,a=0;return"detail"in e&&(i=e.detail),"wheelDelta"in e&&(i=-e.wheelDelta/120),"wheelDeltaY"in e&&(i=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=i,i=0),n=10*t,a=10*i,"deltaY"in e&&(a=e.deltaY),"deltaX"in e&&(n=e.deltaX),(n||a)&&e.deltaMode&&(1===e.deltaMode?(n*=40,a*=40):(n*=800,a*=800)),n&&!t&&(t=n<1?-1:1),a&&!i&&(i=a<1?-1:1),{spinX:t,spinY:i,pixelX:n,pixelY:a}}function d(e){e.originalEvent&&(e=e.originalEvent);var t=0,i=b.rtl?-1:1,n=p(e);if(b.params.mousewheelForceToAxis)if(b.isHorizontal()){if(!(Math.abs(n.pixelX)>Math.abs(n.pixelY)))return;t=n.pixelX*i}else{if(!(Math.abs(n.pixelY)>Math.abs(n.pixelX)))return;t=n.pixelY}else t=Math.abs(n.pixelX)>Math.abs(n.pixelY)?-n.pixelX*i:-n.pixelY;if(0!==t){if(b.params.mousewheelInvert&&(t=-t),b.params.freeMode){var a=b.getWrapperTranslate()+t*b.params.mousewheelSensitivity,r=b.isBeginning,s=b.isEnd;if(a>=b.minTranslate()&&(a=b.minTranslate()),a<=b.maxTranslate()&&(a=b.maxTranslate()),b.setWrapperTransition(0),b.setWrapperTranslate(a),b.updateProgress(),b.updateActiveIndex(),(!r&&b.isBeginning||!s&&b.isEnd)&&b.updateClasses(),b.params.freeModeSticky?(clearTimeout(b.mousewheel.timeout),b.mousewheel.timeout=setTimeout(function(){b.slideReset()},300)):b.params.lazyLoading&&b.lazy&&b.lazy.load(),b.emit("onScroll",b,e),b.params.autoplay&&b.params.autoplayDisableOnInteraction&&b.stopAutoplay(),0===a||a===b.maxTranslate())return}else{if((new window.Date).getTime()-b.mousewheel.lastScrollTime>60)if(t<0)if(b.isEnd&&!b.params.loop||b.animating){if(b.params.mousewheelReleaseOnEdges)return!0}else b.slideNext(),b.emit("onScroll",b,e);else if(b.isBeginning&&!b.params.loop||b.animating){if(b.params.mousewheelReleaseOnEdges)return!0}else b.slidePrev(),b.emit("onScroll",b,e);b.mousewheel.lastScrollTime=(new window.Date).getTime()}return e.preventDefault?e.preventDefault():e.returnValue=!1,!1}}function c(t,i){t=e(t);var n,a,r,s=b.rtl?-1:1;n=t.attr("data-swiper-parallax")||"0",a=t.attr("data-swiper-parallax-x"),r=t.attr("data-swiper-parallax-y"),a||r?(a=a||"0",r=r||"0"):b.isHorizontal()?(a=n,r="0"):(r=n,a="0"),a=a.indexOf("%")>=0?parseInt(a,10)*i*s+"%":a*i*s+"px",r=r.indexOf("%")>=0?parseInt(r,10)*i+"%":r*i+"px",t.transform("translate3d("+a+", "+r+",0px)")}function h(e){return 0!==e.indexOf("on")&&(e=e[0]!==e[0].toUpperCase()?"on"+e[0].toUpperCase()+e.substring(1):"on"+e),e}if(!(this instanceof t))return new t(n,a);var f={direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,autoplay:!1,autoplayDisableOnInteraction:!0,autoplayStopOnLast:!1,iOSEdgeSwipeDetection:!1,iOSEdgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",coverflow:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:!0},flip:{slideShadows:!0,limitRotation:!0},cube:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94},fade:{crossFade:!1},parallax:!1,zoom:!1,zoomMax:3,zoomMin:1,zoomToggle:!0,scrollbar:null,scrollbarHide:!0,scrollbarDraggable:!1,scrollbarSnapOnRelease:!1,keyboardControl:!1,mousewheelControl:!1,mousewheelReleaseOnEdges:!1,mousewheelInvert:!1,mousewheelForceToAxis:!1,mousewheelSensitivity:1,mousewheelEventsTarged:"container",hashnav:!1,hashnavWatchState:!1,history:!1,replaceState:!1,breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,centeredSlides:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,onlyExternal:!1,threshold:0,touchMoveStopPropagation:!0,touchReleaseOnEdges:!1,uniqueNavElements:!0,pagination:null,paginationElement:"span",paginationClickable:!1,paginationHide:!1,paginationBulletRender:null,paginationProgressRender:null,paginationFractionRender:null,paginationCustomRender:null,paginationType:"bullets",resistance:!0,resistanceRatio:.85,nextButton:null,prevButton:null,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,lazyLoading:!1,lazyLoadingInPrevNext:!1,lazyLoadingInPrevNextAmount:1,lazyLoadingOnTransitionStart:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,control:void 0,controlInverse:!1,controlBy:"slide",normalizeSlideIndex:!0,allowSwipeToPrev:!0,allowSwipeToNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",buttonDisabledClass:"swiper-button-disabled",paginationCurrentClass:"swiper-pagination-current",paginationTotalClass:"swiper-pagination-total",paginationHiddenClass:"swiper-pagination-hidden",paginationProgressbarClass:"swiper-pagination-progressbar",paginationClickableClass:"swiper-pagination-clickable",paginationModifierClass:"swiper-pagination-",lazyLoadingClass:"swiper-lazy",lazyStatusLoadingClass:"swiper-lazy-loading",lazyStatusLoadedClass:"swiper-lazy-loaded",lazyPreloaderClass:"swiper-lazy-preloader",notificationClass:"swiper-notification",preloaderClass:"preloader",zoomContainerClass:"swiper-zoom-container",observer:!1,observeParents:!1,a11y:!1,prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",runCallbacksOnInit:!0},m=a&&a.virtualTranslate;a=a||{};var g={};for(var v in a)if("object"!=typeof a[v]||null===a[v]||(a[v].nodeType||a[v]===window||a[v]===document||void 0!==i&&a[v]instanceof i||"undefined"!=typeof jQuery&&a[v]instanceof jQuery))g[v]=a[v];else{g[v]={};for(var w in a[v])g[v][w]=a[v][w]}for(var y in f)if(void 0===a[y])a[y]=f[y];else if("object"==typeof a[y])for(var x in f[y])void 0===a[y][x]&&(a[y][x]=f[y][x]);var b=this;if(b.params=a,b.originalParams=g,b.classNames=[],void 0!==e&&void 0!==i&&(e=i),(void 0!==e||(e=void 0===i?window.Dom7||window.Zepto||window.jQuery:i))&&(b.$=e,b.currentBreakpoint=void 0,b.getActiveBreakpoint=function(){if(!b.params.breakpoints)return!1;var e,t=!1,i=[];for(e in b.params.breakpoints)b.params.breakpoints.hasOwnProperty(e)&&i.push(e);i.sort(function(e,t){return parseInt(e,10)>parseInt(t,10)});for(var n=0;n<i.length;n++)(e=i[n])>=window.innerWidth&&!t&&(t=e);return t||"max"},b.setBreakpoint=function(){var e=b.getActiveBreakpoint();if(e&&b.currentBreakpoint!==e){var t=e in b.params.breakpoints?b.params.breakpoints[e]:b.originalParams,i=b.params.loop&&t.slidesPerView!==b.params.slidesPerView;for(var n in t)b.params[n]=t[n];b.currentBreakpoint=e,i&&b.destroyLoop&&b.reLoop(!0)}},b.params.breakpoints&&b.setBreakpoint(),b.container=e(n),0!==b.container.length)){if(b.container.length>1){var T=[];return b.container.each(function(){T.push(new t(this,a))}),T}b.container[0].swiper=b,b.container.data("swiper",b),b.classNames.push(b.params.containerModifierClass+b.params.direction),b.params.freeMode&&b.classNames.push(b.params.containerModifierClass+"free-mode"),b.support.flexbox||(b.classNames.push(b.params.containerModifierClass+"no-flexbox"),b.params.slidesPerColumn=1),b.params.autoHeight&&b.classNames.push(b.params.containerModifierClass+"autoheight"),(b.params.parallax||b.params.watchSlidesVisibility)&&(b.params.watchSlidesProgress=!0),b.params.touchReleaseOnEdges&&(b.params.resistanceRatio=0),["cube","coverflow","flip"].indexOf(b.params.effect)>=0&&(b.support.transforms3d?(b.params.watchSlidesProgress=!0,b.classNames.push(b.params.containerModifierClass+"3d")):b.params.effect="slide"),"slide"!==b.params.effect&&b.classNames.push(b.params.containerModifierClass+b.params.effect),"cube"===b.params.effect&&(b.params.resistanceRatio=0,b.params.slidesPerView=1,b.params.slidesPerColumn=1,b.params.slidesPerGroup=1,b.params.centeredSlides=!1,b.params.spaceBetween=0,b.params.virtualTranslate=!0),"fade"!==b.params.effect&&"flip"!==b.params.effect||(b.params.slidesPerView=1,b.params.slidesPerColumn=1,b.params.slidesPerGroup=1,b.params.watchSlidesProgress=!0,b.params.spaceBetween=0,void 0===m&&(b.params.virtualTranslate=!0)),b.params.grabCursor&&b.support.touch&&(b.params.grabCursor=!1),b.wrapper=b.container.children("."+b.params.wrapperClass),b.params.pagination&&(b.paginationContainer=e(b.params.pagination),b.params.uniqueNavElements&&"string"==typeof b.params.pagination&&b.paginationContainer.length>1&&1===b.container.find(b.params.pagination).length&&(b.paginationContainer=b.container.find(b.params.pagination)),"bullets"===b.params.paginationType&&b.params.paginationClickable?b.paginationContainer.addClass(b.params.paginationModifierClass+"clickable"):b.params.paginationClickable=!1,b.paginationContainer.addClass(b.params.paginationModifierClass+b.params.paginationType)),(b.params.nextButton||b.params.prevButton)&&(b.params.nextButton&&(b.nextButton=e(b.params.nextButton),b.params.uniqueNavElements&&"string"==typeof b.params.nextButton&&b.nextButton.length>1&&1===b.container.find(b.params.nextButton).length&&(b.nextButton=b.container.find(b.params.nextButton))),b.params.prevButton&&(b.prevButton=e(b.params.prevButton),b.params.uniqueNavElements&&"string"==typeof b.params.prevButton&&b.prevButton.length>1&&1===b.container.find(b.params.prevButton).length&&(b.prevButton=b.container.find(b.params.prevButton)))),b.isHorizontal=function(){return"horizontal"===b.params.direction},b.rtl=b.isHorizontal()&&("rtl"===b.container[0].dir.toLowerCase()||"rtl"===b.container.css("direction")),b.rtl&&b.classNames.push(b.params.containerModifierClass+"rtl"),b.rtl&&(b.wrongRTL="-webkit-box"===b.wrapper.css("display")),b.params.slidesPerColumn>1&&b.classNames.push(b.params.containerModifierClass+"multirow"),b.device.android&&b.classNames.push(b.params.containerModifierClass+"android"),b.container.addClass(b.classNames.join(" ")),b.translate=0,b.progress=0,b.velocity=0,b.lockSwipeToNext=function(){b.params.allowSwipeToNext=!1,!1===b.params.allowSwipeToPrev&&b.params.grabCursor&&b.unsetGrabCursor()},b.lockSwipeToPrev=function(){b.params.allowSwipeToPrev=!1,!1===b.params.allowSwipeToNext&&b.params.grabCursor&&b.unsetGrabCursor()},b.lockSwipes=function(){b.params.allowSwipeToNext=b.params.allowSwipeToPrev=!1,b.params.grabCursor&&b.unsetGrabCursor()},b.unlockSwipeToNext=function(){b.params.allowSwipeToNext=!0,!0===b.params.allowSwipeToPrev&&b.params.grabCursor&&b.setGrabCursor()},b.unlockSwipeToPrev=function(){b.params.allowSwipeToPrev=!0,!0===b.params.allowSwipeToNext&&b.params.grabCursor&&b.setGrabCursor()},b.unlockSwipes=function(){b.params.allowSwipeToNext=b.params.allowSwipeToPrev=!0,b.params.grabCursor&&b.setGrabCursor()},b.setGrabCursor=function(e){b.container[0].style.cursor="move",b.container[0].style.cursor=e?"-webkit-grabbing":"-webkit-grab",b.container[0].style.cursor=e?"-moz-grabbin":"-moz-grab",b.container[0].style.cursor=e?"grabbing":"grab"},b.unsetGrabCursor=function(){b.container[0].style.cursor=""},b.params.grabCursor&&b.setGrabCursor(),b.imagesToLoad=[],b.imagesLoaded=0,b.loadImage=function(e,t,i,n,a,r){function s(){r&&r()}var o;e.complete&&a?s():t?((o=new window.Image).onload=s,o.onerror=s,n&&(o.sizes=n),i&&(o.srcset=i),t&&(o.src=t)):s()},b.preloadImages=function(){b.imagesToLoad=b.container.find("img");for(var e=0;e<b.imagesToLoad.length;e++)b.loadImage(b.imagesToLoad[e],b.imagesToLoad[e].currentSrc||b.imagesToLoad[e].getAttribute("src"),b.imagesToLoad[e].srcset||b.imagesToLoad[e].getAttribute("srcset"),b.imagesToLoad[e].sizes||b.imagesToLoad[e].getAttribute("sizes"),!0,function(){void 0!==b&&null!==b&&b&&(void 0!==b.imagesLoaded&&b.imagesLoaded++,b.imagesLoaded===b.imagesToLoad.length&&(b.params.updateOnImagesReady&&b.update(),b.emit("onImagesReady",b)))})},b.autoplayTimeoutId=void 0,b.autoplaying=!1,b.autoplayPaused=!1,b.startAutoplay=function(){return void 0===b.autoplayTimeoutId&&(!!b.params.autoplay&&(!b.autoplaying&&(b.autoplaying=!0,b.emit("onAutoplayStart",b),void s())))},b.stopAutoplay=function(e){b.autoplayTimeoutId&&(b.autoplayTimeoutId&&clearTimeout(b.autoplayTimeoutId),b.autoplaying=!1,b.autoplayTimeoutId=void 0,b.emit("onAutoplayStop",b))},b.pauseAutoplay=function(e){b.autoplayPaused||(b.autoplayTimeoutId&&clearTimeout(b.autoplayTimeoutId),b.autoplayPaused=!0,0===e?(b.autoplayPaused=!1,s()):b.wrapper.transitionEnd(function(){b&&(b.autoplayPaused=!1,b.autoplaying?s():b.stopAutoplay())}))},b.minTranslate=function(){return-b.snapGrid[0]},b.maxTranslate=function(){return-b.snapGrid[b.snapGrid.length-1]},b.updateAutoHeight=function(){var e,t=[],i=0;if("auto"!==b.params.slidesPerView&&b.params.slidesPerView>1)for(e=0;e<Math.ceil(b.params.slidesPerView);e++){var n=b.activeIndex+e;if(n>b.slides.length)break;t.push(b.slides.eq(n)[0])}else t.push(b.slides.eq(b.activeIndex)[0]);for(e=0;e<t.length;e++)if(void 0!==t[e]){var a=t[e].offsetHeight;i=a>i?a:i}i&&b.wrapper.css("height",i+"px")},b.updateContainerSize=function(){var e,t;e=void 0!==b.params.width?b.params.width:b.container[0].clientWidth,t=void 0!==b.params.height?b.params.height:b.container[0].clientHeight,0===e&&b.isHorizontal()||0===t&&!b.isHorizontal()||(e=e-parseInt(b.container.css("padding-left"),10)-parseInt(b.container.css("padding-right"),10),t=t-parseInt(b.container.css("padding-top"),10)-parseInt(b.container.css("padding-bottom"),10),b.width=e,b.height=t,b.size=b.isHorizontal()?b.width:b.height)},b.updateSlidesSize=function(){b.slides=b.wrapper.children("."+b.params.slideClass),b.snapGrid=[],b.slidesGrid=[],b.slidesSizesGrid=[];var e,t=b.params.spaceBetween,i=-b.params.slidesOffsetBefore,n=0,a=0;if(void 0!==b.size){"string"==typeof t&&t.indexOf("%")>=0&&(t=parseFloat(t.replace("%",""))/100*b.size),b.virtualSize=-t,b.rtl?b.slides.css({marginLeft:"",marginTop:""}):b.slides.css({marginRight:"",marginBottom:""});var s;b.params.slidesPerColumn>1&&(s=Math.floor(b.slides.length/b.params.slidesPerColumn)===b.slides.length/b.params.slidesPerColumn?b.slides.length:Math.ceil(b.slides.length/b.params.slidesPerColumn)*b.params.slidesPerColumn,"auto"!==b.params.slidesPerView&&"row"===b.params.slidesPerColumnFill&&(s=Math.max(s,b.params.slidesPerView*b.params.slidesPerColumn)));var o,l=b.params.slidesPerColumn,u=s/l,p=u-(b.params.slidesPerColumn*u-b.slides.length);for(e=0;e<b.slides.length;e++){o=0;var d=b.slides.eq(e);if(b.params.slidesPerColumn>1){var c,h,f;"column"===b.params.slidesPerColumnFill?(f=e-(h=Math.floor(e/l))*l,(h>p||h===p&&f===l-1)&&++f>=l&&(f=0,h++),c=h+f*s/l,d.css({"-webkit-box-ordinal-group":c,"-moz-box-ordinal-group":c,"-ms-flex-order":c,"-webkit-order":c,order:c})):h=e-(f=Math.floor(e/u))*u,d.css("margin-"+(b.isHorizontal()?"top":"left"),0!==f&&b.params.spaceBetween&&b.params.spaceBetween+"px").attr("data-swiper-column",h).attr("data-swiper-row",f)}"none"!==d.css("display")&&("auto"===b.params.slidesPerView?(o=b.isHorizontal()?d.outerWidth(!0):d.outerHeight(!0),b.params.roundLengths&&(o=r(o))):(o=(b.size-(b.params.slidesPerView-1)*t)/b.params.slidesPerView,b.params.roundLengths&&(o=r(o)),b.isHorizontal()?b.slides[e].style.width=o+"px":b.slides[e].style.height=o+"px"),b.slides[e].swiperSlideSize=o,b.slidesSizesGrid.push(o),b.params.centeredSlides?(i=i+o/2+n/2+t,0===n&&0!==e&&(i=i-b.size/2-t),0===e&&(i=i-b.size/2-t),Math.abs(i)<.001&&(i=0),a%b.params.slidesPerGroup==0&&b.snapGrid.push(i),b.slidesGrid.push(i)):(a%b.params.slidesPerGroup==0&&b.snapGrid.push(i),b.slidesGrid.push(i),i=i+o+t),b.virtualSize+=o+t,n=o,a++)}b.virtualSize=Math.max(b.virtualSize,b.size)+b.params.slidesOffsetAfter;var m;if(b.rtl&&b.wrongRTL&&("slide"===b.params.effect||"coverflow"===b.params.effect)&&b.wrapper.css({width:b.virtualSize+b.params.spaceBetween+"px"}),b.support.flexbox&&!b.params.setWrapperSize||(b.isHorizontal()?b.wrapper.css({width:b.virtualSize+b.params.spaceBetween+"px"}):b.wrapper.css({height:b.virtualSize+b.params.spaceBetween+"px"})),b.params.slidesPerColumn>1&&(b.virtualSize=(o+b.params.spaceBetween)*s,b.virtualSize=Math.ceil(b.virtualSize/b.params.slidesPerColumn)-b.params.spaceBetween,b.isHorizontal()?b.wrapper.css({width:b.virtualSize+b.params.spaceBetween+"px"}):b.wrapper.css({height:b.virtualSize+b.params.spaceBetween+"px"}),b.params.centeredSlides)){for(m=[],e=0;e<b.snapGrid.length;e++)b.snapGrid[e]<b.virtualSize+b.snapGrid[0]&&m.push(b.snapGrid[e]);b.snapGrid=m}if(!b.params.centeredSlides){for(m=[],e=0;e<b.snapGrid.length;e++)b.snapGrid[e]<=b.virtualSize-b.size&&m.push(b.snapGrid[e]);b.snapGrid=m,Math.floor(b.virtualSize-b.size)-Math.floor(b.snapGrid[b.snapGrid.length-1])>1&&b.snapGrid.push(b.virtualSize-b.size)}0===b.snapGrid.length&&(b.snapGrid=[0]),0!==b.params.spaceBetween&&(b.isHorizontal()?b.rtl?b.slides.css({marginLeft:t+"px"}):b.slides.css({marginRight:t+"px"}):b.slides.css({marginBottom:t+"px"})),b.params.watchSlidesProgress&&b.updateSlidesOffset()}},b.updateSlidesOffset=function(){for(var e=0;e<b.slides.length;e++)b.slides[e].swiperSlideOffset=b.isHorizontal()?b.slides[e].offsetLeft:b.slides[e].offsetTop},b.currentSlidesPerView=function(){var e,t,i=1;if(b.params.centeredSlides){var n,a=b.slides[b.activeIndex].swiperSlideSize;for(e=b.activeIndex+1;e<b.slides.length;e++)b.slides[e]&&!n&&(i++,(a+=b.slides[e].swiperSlideSize)>b.size&&(n=!0));for(t=b.activeIndex-1;t>=0;t--)b.slides[t]&&!n&&(i++,(a+=b.slides[t].swiperSlideSize)>b.size&&(n=!0))}else for(e=b.activeIndex+1;e<b.slides.length;e++)b.slidesGrid[e]-b.slidesGrid[b.activeIndex]<b.size&&i++;return i},b.updateSlidesProgress=function(e){if(void 0===e&&(e=b.translate||0),0!==b.slides.length){void 0===b.slides[0].swiperSlideOffset&&b.updateSlidesOffset();var t=-e;b.rtl&&(t=e),b.slides.removeClass(b.params.slideVisibleClass);for(var i=0;i<b.slides.length;i++){var n=b.slides[i],a=(t+(b.params.centeredSlides?b.minTranslate():0)-n.swiperSlideOffset)/(n.swiperSlideSize+b.params.spaceBetween);if(b.params.watchSlidesVisibility){var r=-(t-n.swiperSlideOffset),s=r+b.slidesSizesGrid[i];(r>=0&&r<b.size||s>0&&s<=b.size||r<=0&&s>=b.size)&&b.slides.eq(i).addClass(b.params.slideVisibleClass)}n.progress=b.rtl?-a:a}}},b.updateProgress=function(e){void 0===e&&(e=b.translate||0);var t=b.maxTranslate()-b.minTranslate(),i=b.isBeginning,n=b.isEnd;0===t?(b.progress=0,b.isBeginning=b.isEnd=!0):(b.progress=(e-b.minTranslate())/t,b.isBeginning=b.progress<=0,b.isEnd=b.progress>=1),b.isBeginning&&!i&&b.emit("onReachBeginning",b),b.isEnd&&!n&&b.emit("onReachEnd",b),b.params.watchSlidesProgress&&b.updateSlidesProgress(e),b.emit("onProgress",b,b.progress)},b.updateActiveIndex=function(){var e,t,i,n=b.rtl?b.translate:-b.translate;for(t=0;t<b.slidesGrid.length;t++)void 0!==b.slidesGrid[t+1]?n>=b.slidesGrid[t]&&n<b.slidesGrid[t+1]-(b.slidesGrid[t+1]-b.slidesGrid[t])/2?e=t:n>=b.slidesGrid[t]&&n<b.slidesGrid[t+1]&&(e=t+1):n>=b.slidesGrid[t]&&(e=t);b.params.normalizeSlideIndex&&(e<0||void 0===e)&&(e=0),(i=Math.floor(e/b.params.slidesPerGroup))>=b.snapGrid.length&&(i=b.snapGrid.length-1),e!==b.activeIndex&&(b.snapIndex=i,b.previousIndex=b.activeIndex,b.activeIndex=e,b.updateClasses(),b.updateRealIndex())},b.updateRealIndex=function(){b.realIndex=parseInt(b.slides.eq(b.activeIndex).attr("data-swiper-slide-index")||b.activeIndex,10)},b.updateClasses=function(){b.slides.removeClass(b.params.slideActiveClass+" "+b.params.slideNextClass+" "+b.params.slidePrevClass+" "+b.params.slideDuplicateActiveClass+" "+b.params.slideDuplicateNextClass+" "+b.params.slideDuplicatePrevClass);var t=b.slides.eq(b.activeIndex);t.addClass(b.params.slideActiveClass),a.loop&&(t.hasClass(b.params.slideDuplicateClass)?b.wrapper.children("."+b.params.slideClass+":not(."+b.params.slideDuplicateClass+')[data-swiper-slide-index="'+b.realIndex+'"]').addClass(b.params.slideDuplicateActiveClass):b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass+'[data-swiper-slide-index="'+b.realIndex+'"]').addClass(b.params.slideDuplicateActiveClass));var i=t.next("."+b.params.slideClass).addClass(b.params.slideNextClass);b.params.loop&&0===i.length&&(i=b.slides.eq(0)).addClass(b.params.slideNextClass);var n=t.prev("."+b.params.slideClass).addClass(b.params.slidePrevClass);if(b.params.loop&&0===n.length&&(n=b.slides.eq(-1)).addClass(b.params.slidePrevClass),a.loop&&(i.hasClass(b.params.slideDuplicateClass)?b.wrapper.children("."+b.params.slideClass+":not(."+b.params.slideDuplicateClass+')[data-swiper-slide-index="'+i.attr("data-swiper-slide-index")+'"]').addClass(b.params.slideDuplicateNextClass):b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass+'[data-swiper-slide-index="'+i.attr("data-swiper-slide-index")+'"]').addClass(b.params.slideDuplicateNextClass),n.hasClass(b.params.slideDuplicateClass)?b.wrapper.children("."+b.params.slideClass+":not(."+b.params.slideDuplicateClass+')[data-swiper-slide-index="'+n.attr("data-swiper-slide-index")+'"]').addClass(b.params.slideDuplicatePrevClass):b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass+'[data-swiper-slide-index="'+n.attr("data-swiper-slide-index")+'"]').addClass(b.params.slideDuplicatePrevClass)),b.paginationContainer&&b.paginationContainer.length>0){var r,s=b.params.loop?Math.ceil((b.slides.length-2*b.loopedSlides)/b.params.slidesPerGroup):b.snapGrid.length;if(b.params.loop?((r=Math.ceil((b.activeIndex-b.loopedSlides)/b.params.slidesPerGroup))>b.slides.length-1-2*b.loopedSlides&&(r-=b.slides.length-2*b.loopedSlides),r>s-1&&(r-=s),r<0&&"bullets"!==b.params.paginationType&&(r=s+r)):r=void 0!==b.snapIndex?b.snapIndex:b.activeIndex||0,"bullets"===b.params.paginationType&&b.bullets&&b.bullets.length>0&&(b.bullets.removeClass(b.params.bulletActiveClass),b.paginationContainer.length>1?b.bullets.each(function(){e(this).index()===r&&e(this).addClass(b.params.bulletActiveClass)}):b.bullets.eq(r).addClass(b.params.bulletActiveClass)),"fraction"===b.params.paginationType&&(b.paginationContainer.find("."+b.params.paginationCurrentClass).text(r+1),b.paginationContainer.find("."+b.params.paginationTotalClass).text(s)),"progress"===b.params.paginationType){var o=(r+1)/s,l=o,u=1;b.isHorizontal()||(u=o,l=1),b.paginationContainer.find("."+b.params.paginationProgressbarClass).transform("translate3d(0,0,0) scaleX("+l+") scaleY("+u+")").transition(b.params.speed)}"custom"===b.params.paginationType&&b.params.paginationCustomRender&&(b.paginationContainer.html(b.params.paginationCustomRender(b,r+1,s)),b.emit("onPaginationRendered",b,b.paginationContainer[0]))}b.params.loop||(b.params.prevButton&&b.prevButton&&b.prevButton.length>0&&(b.isBeginning?(b.prevButton.addClass(b.params.buttonDisabledClass),b.params.a11y&&b.a11y&&b.a11y.disable(b.prevButton)):(b.prevButton.removeClass(b.params.buttonDisabledClass),b.params.a11y&&b.a11y&&b.a11y.enable(b.prevButton))),b.params.nextButton&&b.nextButton&&b.nextButton.length>0&&(b.isEnd?(b.nextButton.addClass(b.params.buttonDisabledClass),b.params.a11y&&b.a11y&&b.a11y.disable(b.nextButton)):(b.nextButton.removeClass(b.params.buttonDisabledClass),b.params.a11y&&b.a11y&&b.a11y.enable(b.nextButton))))},b.updatePagination=function(){if(b.params.pagination&&b.paginationContainer&&b.paginationContainer.length>0){var e="";if("bullets"===b.params.paginationType){for(var t=b.params.loop?Math.ceil((b.slides.length-2*b.loopedSlides)/b.params.slidesPerGroup):b.snapGrid.length,i=0;i<t;i++)b.params.paginationBulletRender?e+=b.params.paginationBulletRender(b,i,b.params.bulletClass):e+="<"+b.params.paginationElement+' class="'+b.params.bulletClass+'"></'+b.params.paginationElement+">";b.paginationContainer.html(e),b.bullets=b.paginationContainer.find("."+b.params.bulletClass),b.params.paginationClickable&&b.params.a11y&&b.a11y&&b.a11y.initPagination()}"fraction"===b.params.paginationType&&(e=b.params.paginationFractionRender?b.params.paginationFractionRender(b,b.params.paginationCurrentClass,b.params.paginationTotalClass):'<span class="'+b.params.paginationCurrentClass+'"></span> / <span class="'+b.params.paginationTotalClass+'"></span>',b.paginationContainer.html(e)),"progress"===b.params.paginationType&&(e=b.params.paginationProgressRender?b.params.paginationProgressRender(b,b.params.paginationProgressbarClass):'<span class="'+b.params.paginationProgressbarClass+'"></span>',b.paginationContainer.html(e)),"custom"!==b.params.paginationType&&b.emit("onPaginationRendered",b,b.paginationContainer[0])}},b.update=function(e){function t(){b.rtl,b.translate;i=Math.min(Math.max(b.translate,b.maxTranslate()),b.minTranslate()),b.setWrapperTranslate(i),b.updateActiveIndex(),b.updateClasses()}if(b){b.updateContainerSize(),b.updateSlidesSize(),b.updateProgress(),b.updatePagination(),b.updateClasses(),b.params.scrollbar&&b.scrollbar&&b.scrollbar.set();var i;if(e){b.controller&&b.controller.spline&&(b.controller.spline=void 0),b.params.freeMode?(t(),b.params.autoHeight&&b.updateAutoHeight()):(("auto"===b.params.slidesPerView||b.params.slidesPerView>1)&&b.isEnd&&!b.params.centeredSlides?b.slideTo(b.slides.length-1,0,!1,!0):b.slideTo(b.activeIndex,0,!1,!0))||t()}else b.params.autoHeight&&b.updateAutoHeight()}},b.onResize=function(e){b.params.onBeforeResize&&b.params.onBeforeResize(b),b.params.breakpoints&&b.setBreakpoint();var t=b.params.allowSwipeToPrev,i=b.params.allowSwipeToNext;b.params.allowSwipeToPrev=b.params.allowSwipeToNext=!0,b.updateContainerSize(),b.updateSlidesSize(),("auto"===b.params.slidesPerView||b.params.freeMode||e)&&b.updatePagination(),b.params.scrollbar&&b.scrollbar&&b.scrollbar.set(),b.controller&&b.controller.spline&&(b.controller.spline=void 0);var n=!1;if(b.params.freeMode){var a=Math.min(Math.max(b.translate,b.maxTranslate()),b.minTranslate());b.setWrapperTranslate(a),b.updateActiveIndex(),b.updateClasses(),b.params.autoHeight&&b.updateAutoHeight()}else b.updateClasses(),n=("auto"===b.params.slidesPerView||b.params.slidesPerView>1)&&b.isEnd&&!b.params.centeredSlides?b.slideTo(b.slides.length-1,0,!1,!0):b.slideTo(b.activeIndex,0,!1,!0);b.params.lazyLoading&&!n&&b.lazy&&b.lazy.load(),b.params.allowSwipeToPrev=t,b.params.allowSwipeToNext=i,b.params.onAfterResize&&b.params.onAfterResize(b)},b.touchEventsDesktop={start:"mousedown",move:"mousemove",end:"mouseup"},window.navigator.pointerEnabled?b.touchEventsDesktop={start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled&&(b.touchEventsDesktop={start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}),b.touchEvents={start:b.support.touch||!b.params.simulateTouch?"touchstart":b.touchEventsDesktop.start,move:b.support.touch||!b.params.simulateTouch?"touchmove":b.touchEventsDesktop.move,end:b.support.touch||!b.params.simulateTouch?"touchend":b.touchEventsDesktop.end},(window.navigator.pointerEnabled||window.navigator.msPointerEnabled)&&("container"===b.params.touchEventsTarget?b.container:b.wrapper).addClass("swiper-wp8-"+b.params.direction),b.initEvents=function(e){var t=e?"off":"on",i=e?"removeEventListener":"addEventListener",n="container"===b.params.touchEventsTarget?b.container[0]:b.wrapper[0],r=b.support.touch?n:document,s=!!b.params.nested;if(b.browser.ie)n[i](b.touchEvents.start,b.onTouchStart,!1),r[i](b.touchEvents.move,b.onTouchMove,s),r[i](b.touchEvents.end,b.onTouchEnd,!1);else{if(b.support.touch){var o=!("touchstart"!==b.touchEvents.start||!b.support.passiveListener||!b.params.passiveListeners)&&{passive:!0,capture:!1};n[i](b.touchEvents.start,b.onTouchStart,o),n[i](b.touchEvents.move,b.onTouchMove,s),n[i](b.touchEvents.end,b.onTouchEnd,o)}(a.simulateTouch&&!b.device.ios&&!b.device.android||a.simulateTouch&&!b.support.touch&&b.device.ios)&&(n[i]("mousedown",b.onTouchStart,!1),document[i]("mousemove",b.onTouchMove,s),document[i]("mouseup",b.onTouchEnd,!1))}window[i]("resize",b.onResize),b.params.nextButton&&b.nextButton&&b.nextButton.length>0&&(b.nextButton[t]("click",b.onClickNext),b.params.a11y&&b.a11y&&b.nextButton[t]("keydown",b.a11y.onEnterKey)),b.params.prevButton&&b.prevButton&&b.prevButton.length>0&&(b.prevButton[t]("click",b.onClickPrev),b.params.a11y&&b.a11y&&b.prevButton[t]("keydown",b.a11y.onEnterKey)),b.params.pagination&&b.params.paginationClickable&&(b.paginationContainer[t]("click","."+b.params.bulletClass,b.onClickIndex),b.params.a11y&&b.a11y&&b.paginationContainer[t]("keydown","."+b.params.bulletClass,b.a11y.onEnterKey)),(b.params.preventClicks||b.params.preventClicksPropagation)&&n[i]("click",b.preventClicks,!0)},b.attachEvents=function(){b.initEvents()},b.detachEvents=function(){b.initEvents(!0)},b.allowClick=!0,b.preventClicks=function(e){b.allowClick||(b.params.preventClicks&&e.preventDefault(),b.params.preventClicksPropagation&&b.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))},b.onClickNext=function(e){e.preventDefault(),b.isEnd&&!b.params.loop||b.slideNext()},b.onClickPrev=function(e){e.preventDefault(),b.isBeginning&&!b.params.loop||b.slidePrev()},b.onClickIndex=function(t){t.preventDefault();var i=e(this).index()*b.params.slidesPerGroup;b.params.loop&&(i+=b.loopedSlides),b.slideTo(i)},b.updateClickedSlide=function(t){var i=o(t,"."+b.params.slideClass),n=!1;if(i)for(var a=0;a<b.slides.length;a++)b.slides[a]===i&&(n=!0);if(!i||!n)return b.clickedSlide=void 0,void(b.clickedIndex=void 0);if(b.clickedSlide=i,b.clickedIndex=e(i).index(),b.params.slideToClickedSlide&&void 0!==b.clickedIndex&&b.clickedIndex!==b.activeIndex){var r,s=b.clickedIndex,l="auto"===b.params.slidesPerView?b.currentSlidesPerView():b.params.slidesPerView;if(b.params.loop){if(b.animating)return;r=parseInt(e(b.clickedSlide).attr("data-swiper-slide-index"),10),b.params.centeredSlides?s<b.loopedSlides-l/2||s>b.slides.length-b.loopedSlides+l/2?(b.fixLoop(),s=b.wrapper.children("."+b.params.slideClass+'[data-swiper-slide-index="'+r+'"]:not(.'+b.params.slideDuplicateClass+")").eq(0).index(),setTimeout(function(){b.slideTo(s)},0)):b.slideTo(s):s>b.slides.length-l?(b.fixLoop(),s=b.wrapper.children("."+b.params.slideClass+'[data-swiper-slide-index="'+r+'"]:not(.'+b.params.slideDuplicateClass+")").eq(0).index(),setTimeout(function(){b.slideTo(s)},0)):b.slideTo(s)}else b.slideTo(s)}};var C,S,z,E,M,k,D,P,L,I,A="input, select, textarea, button, video",N=Date.now(),B=[];b.animating=!1,b.touches={startX:0,startY:0,currentX:0,currentY:0,diff:0};var H,O;b.onTouchStart=function(t){if(t.originalEvent&&(t=t.originalEvent),(H="touchstart"===t.type)||!("which"in t)||3!==t.which)if(b.params.noSwiping&&o(t,"."+b.params.noSwipingClass))b.allowClick=!0;else if(!b.params.swipeHandler||o(t,b.params.swipeHandler)){var i=b.touches.currentX="touchstart"===t.type?t.targetTouches[0].pageX:t.pageX,n=b.touches.currentY="touchstart"===t.type?t.targetTouches[0].pageY:t.pageY;if(!(b.device.ios&&b.params.iOSEdgeSwipeDetection&&i<=b.params.iOSEdgeSwipeThreshold)){if(C=!0,S=!1,z=!0,M=void 0,O=void 0,b.touches.startX=i,b.touches.startY=n,E=Date.now(),b.allowClick=!0,b.updateContainerSize(),b.swipeDirection=void 0,b.params.threshold>0&&(P=!1),"touchstart"!==t.type){var a=!0;e(t.target).is(A)&&(a=!1),document.activeElement&&e(document.activeElement).is(A)&&document.activeElement.blur(),a&&t.preventDefault()}b.emit("onTouchStart",b,t)}}},b.onTouchMove=function(t){if(t.originalEvent&&(t=t.originalEvent),!H||"mousemove"!==t.type){if(t.preventedByNestedSwiper)return b.touches.startX="touchmove"===t.type?t.targetTouches[0].pageX:t.pageX,void(b.touches.startY="touchmove"===t.type?t.targetTouches[0].pageY:t.pageY);if(b.params.onlyExternal)return b.allowClick=!1,void(C&&(b.touches.startX=b.touches.currentX="touchmove"===t.type?t.targetTouches[0].pageX:t.pageX,b.touches.startY=b.touches.currentY="touchmove"===t.type?t.targetTouches[0].pageY:t.pageY,E=Date.now()));if(H&&b.params.touchReleaseOnEdges&&!b.params.loop)if(b.isHorizontal()){if(b.touches.currentX<b.touches.startX&&b.translate<=b.maxTranslate()||b.touches.currentX>b.touches.startX&&b.translate>=b.minTranslate())return}else if(b.touches.currentY<b.touches.startY&&b.translate<=b.maxTranslate()||b.touches.currentY>b.touches.startY&&b.translate>=b.minTranslate())return;if(H&&document.activeElement&&t.target===document.activeElement&&e(t.target).is(A))return S=!0,void(b.allowClick=!1);if(z&&b.emit("onTouchMove",b,t),!(t.targetTouches&&t.targetTouches.length>1)){if(b.touches.currentX="touchmove"===t.type?t.targetTouches[0].pageX:t.pageX,b.touches.currentY="touchmove"===t.type?t.targetTouches[0].pageY:t.pageY,void 0===M){var i;b.isHorizontal()&&b.touches.currentY===b.touches.startY||!b.isHorizontal()&&b.touches.currentX===b.touches.startX?M=!1:(i=180*Math.atan2(Math.abs(b.touches.currentY-b.touches.startY),Math.abs(b.touches.currentX-b.touches.startX))/Math.PI,M=b.isHorizontal()?i>b.params.touchAngle:90-i>b.params.touchAngle)}if(M&&b.emit("onTouchMoveOpposite",b,t),void 0===O&&(b.touches.currentX===b.touches.startX&&b.touches.currentY===b.touches.startY||(O=!0)),C)if(M)C=!1;else if(O){b.allowClick=!1,b.emit("onSliderMove",b,t),t.preventDefault(),b.params.touchMoveStopPropagation&&!b.params.nested&&t.stopPropagation(),S||(a.loop&&b.fixLoop(),D=b.getWrapperTranslate(),b.setWrapperTransition(0),b.animating&&b.wrapper.trigger("webkitTransitionEnd transitionend oTransitionEnd MSTransitionEnd msTransitionEnd"),b.params.autoplay&&b.autoplaying&&(b.params.autoplayDisableOnInteraction?b.stopAutoplay():b.pauseAutoplay()),I=!1,!b.params.grabCursor||!0!==b.params.allowSwipeToNext&&!0!==b.params.allowSwipeToPrev||b.setGrabCursor(!0)),S=!0;var n=b.touches.diff=b.isHorizontal()?b.touches.currentX-b.touches.startX:b.touches.currentY-b.touches.startY;n*=b.params.touchRatio,b.rtl&&(n=-n),b.swipeDirection=n>0?"prev":"next",k=n+D;var r=!0;if(n>0&&k>b.minTranslate()?(r=!1,b.params.resistance&&(k=b.minTranslate()-1+Math.pow(-b.minTranslate()+D+n,b.params.resistanceRatio))):n<0&&k<b.maxTranslate()&&(r=!1,b.params.resistance&&(k=b.maxTranslate()+1-Math.pow(b.maxTranslate()-D-n,b.params.resistanceRatio))),r&&(t.preventedByNestedSwiper=!0),!b.params.allowSwipeToNext&&"next"===b.swipeDirection&&k<D&&(k=D),!b.params.allowSwipeToPrev&&"prev"===b.swipeDirection&&k>D&&(k=D),b.params.threshold>0){if(!(Math.abs(n)>b.params.threshold||P))return void(k=D);if(!P)return P=!0,b.touches.startX=b.touches.currentX,b.touches.startY=b.touches.currentY,k=D,void(b.touches.diff=b.isHorizontal()?b.touches.currentX-b.touches.startX:b.touches.currentY-b.touches.startY)}b.params.followFinger&&((b.params.freeMode||b.params.watchSlidesProgress)&&b.updateActiveIndex(),b.params.freeMode&&(0===B.length&&B.push({position:b.touches[b.isHorizontal()?"startX":"startY"],time:E}),B.push({position:b.touches[b.isHorizontal()?"currentX":"currentY"],time:(new window.Date).getTime()})),b.updateProgress(k),b.setWrapperTranslate(k))}}}},b.onTouchEnd=function(t){if(t.originalEvent&&(t=t.originalEvent),z&&b.emit("onTouchEnd",b,t),z=!1,C){b.params.grabCursor&&S&&C&&(!0===b.params.allowSwipeToNext||!0===b.params.allowSwipeToPrev)&&b.setGrabCursor(!1);var i=Date.now(),n=i-E;if(b.allowClick&&(b.updateClickedSlide(t),b.emit("onTap",b,t),n<300&&i-N>300&&(L&&clearTimeout(L),L=setTimeout(function(){b&&(b.params.paginationHide&&b.paginationContainer.length>0&&!e(t.target).hasClass(b.params.bulletClass)&&b.paginationContainer.toggleClass(b.params.paginationHiddenClass),b.emit("onClick",b,t))},300)),n<300&&i-N<300&&(L&&clearTimeout(L),b.emit("onDoubleTap",b,t))),N=Date.now(),setTimeout(function(){b&&(b.allowClick=!0)},0),C&&S&&b.swipeDirection&&0!==b.touches.diff&&k!==D){C=S=!1;var a;if(a=b.params.followFinger?b.rtl?b.translate:-b.translate:-k,b.params.freeMode){if(a<-b.minTranslate())return void b.slideTo(b.activeIndex);if(a>-b.maxTranslate())return void(b.slides.length<b.snapGrid.length?b.slideTo(b.snapGrid.length-1):b.slideTo(b.slides.length-1));if(b.params.freeModeMomentum){if(B.length>1){var r=B.pop(),s=B.pop(),o=r.position-s.position,l=r.time-s.time;b.velocity=o/l,b.velocity=b.velocity/2,Math.abs(b.velocity)<b.params.freeModeMinimumVelocity&&(b.velocity=0),(l>150||(new window.Date).getTime()-r.time>300)&&(b.velocity=0)}else b.velocity=0;b.velocity=b.velocity*b.params.freeModeMomentumVelocityRatio,B.length=0;var u=1e3*b.params.freeModeMomentumRatio,p=b.velocity*u,d=b.translate+p;b.rtl&&(d=-d);var c,h=!1,f=20*Math.abs(b.velocity)*b.params.freeModeMomentumBounceRatio;if(d<b.maxTranslate())b.params.freeModeMomentumBounce?(d+b.maxTranslate()<-f&&(d=b.maxTranslate()-f),c=b.maxTranslate(),h=!0,I=!0):d=b.maxTranslate();else if(d>b.minTranslate())b.params.freeModeMomentumBounce?(d-b.minTranslate()>f&&(d=b.minTranslate()+f),c=b.minTranslate(),h=!0,I=!0):d=b.minTranslate();else if(b.params.freeModeSticky){var m,g=0;for(g=0;g<b.snapGrid.length;g+=1)if(b.snapGrid[g]>-d){m=g;break}d=Math.abs(b.snapGrid[m]-d)<Math.abs(b.snapGrid[m-1]-d)||"next"===b.swipeDirection?b.snapGrid[m]:b.snapGrid[m-1],b.rtl||(d=-d)}if(0!==b.velocity)u=b.rtl?Math.abs((-d-b.translate)/b.velocity):Math.abs((d-b.translate)/b.velocity);else if(b.params.freeModeSticky)return void b.slideReset();b.params.freeModeMomentumBounce&&h?(b.updateProgress(c),b.setWrapperTransition(u),b.setWrapperTranslate(d),b.onTransitionStart(),b.animating=!0,b.wrapper.transitionEnd(function(){b&&I&&(b.emit("onMomentumBounce",b),b.setWrapperTransition(b.params.speed),b.setWrapperTranslate(c),b.wrapper.transitionEnd(function(){b&&b.onTransitionEnd()}))})):b.velocity?(b.updateProgress(d),b.setWrapperTransition(u),b.setWrapperTranslate(d),b.onTransitionStart(),b.animating||(b.animating=!0,b.wrapper.transitionEnd(function(){b&&b.onTransitionEnd()}))):b.updateProgress(d),b.updateActiveIndex()}(!b.params.freeModeMomentum||n>=b.params.longSwipesMs)&&(b.updateProgress(),b.updateActiveIndex())}else{var v,w=0,y=b.slidesSizesGrid[0];for(v=0;v<b.slidesGrid.length;v+=b.params.slidesPerGroup)void 0!==b.slidesGrid[v+b.params.slidesPerGroup]?a>=b.slidesGrid[v]&&a<b.slidesGrid[v+b.params.slidesPerGroup]&&(w=v,y=b.slidesGrid[v+b.params.slidesPerGroup]-b.slidesGrid[v]):a>=b.slidesGrid[v]&&(w=v,y=b.slidesGrid[b.slidesGrid.length-1]-b.slidesGrid[b.slidesGrid.length-2]);var x=(a-b.slidesGrid[w])/y;if(n>b.params.longSwipesMs){if(!b.params.longSwipes)return void b.slideTo(b.activeIndex);"next"===b.swipeDirection&&(x>=b.params.longSwipesRatio?b.slideTo(w+b.params.slidesPerGroup):b.slideTo(w)),"prev"===b.swipeDirection&&(x>1-b.params.longSwipesRatio?b.slideTo(w+b.params.slidesPerGroup):b.slideTo(w))}else{if(!b.params.shortSwipes)return void b.slideTo(b.activeIndex);"next"===b.swipeDirection&&b.slideTo(w+b.params.slidesPerGroup),"prev"===b.swipeDirection&&b.slideTo(w)}}}else C=S=!1}},b._slideTo=function(e,t){return b.slideTo(e,t,!0,!0)},b.slideTo=function(e,t,i,n){void 0===i&&(i=!0),void 0===e&&(e=0),e<0&&(e=0),b.snapIndex=Math.floor(e/b.params.slidesPerGroup),b.snapIndex>=b.snapGrid.length&&(b.snapIndex=b.snapGrid.length-1);var a=-b.snapGrid[b.snapIndex];if(b.params.autoplay&&b.autoplaying&&(n||!b.params.autoplayDisableOnInteraction?b.pauseAutoplay(t):b.stopAutoplay()),b.updateProgress(a),b.params.normalizeSlideIndex)for(var r=0;r<b.slidesGrid.length;r++)-Math.floor(100*a)>=Math.floor(100*b.slidesGrid[r])&&(e=r);return!(!b.params.allowSwipeToNext&&a<b.translate&&a<b.minTranslate())&&(!(!b.params.allowSwipeToPrev&&a>b.translate&&a>b.maxTranslate()&&(b.activeIndex||0)!==e)&&(void 0===t&&(t=b.params.speed),b.previousIndex=b.activeIndex||0,b.activeIndex=e,b.updateRealIndex(),b.rtl&&-a===b.translate||!b.rtl&&a===b.translate?(b.params.autoHeight&&b.updateAutoHeight(),b.updateClasses(),"slide"!==b.params.effect&&b.setWrapperTranslate(a),!1):(b.updateClasses(),b.onTransitionStart(i),0===t||b.browser.lteIE9?(b.setWrapperTranslate(a),b.setWrapperTransition(0),b.onTransitionEnd(i)):(b.setWrapperTranslate(a),b.setWrapperTransition(t),b.animating||(b.animating=!0,b.wrapper.transitionEnd(function(){b&&b.onTransitionEnd(i)}))),!0)))},b.onTransitionStart=function(e){void 0===e&&(e=!0),b.params.autoHeight&&b.updateAutoHeight(),b.lazy&&b.lazy.onTransitionStart(),e&&(b.emit("onTransitionStart",b),b.activeIndex!==b.previousIndex&&(b.emit("onSlideChangeStart",b),b.activeIndex>b.previousIndex?b.emit("onSlideNextStart",b):b.emit("onSlidePrevStart",b)))},b.onTransitionEnd=function(e){b.animating=!1,b.setWrapperTransition(0),void 0===e&&(e=!0),b.lazy&&b.lazy.onTransitionEnd(),e&&(b.emit("onTransitionEnd",b),b.activeIndex!==b.previousIndex&&(b.emit("onSlideChangeEnd",b),b.activeIndex>b.previousIndex?b.emit("onSlideNextEnd",b):b.emit("onSlidePrevEnd",b))),b.params.history&&b.history&&b.history.setHistory(b.params.history,b.activeIndex),b.params.hashnav&&b.hashnav&&b.hashnav.setHash()},b.slideNext=function(e,t,i){if(b.params.loop){if(b.animating)return!1;b.fixLoop();b.container[0].clientLeft;return b.slideTo(b.activeIndex+b.params.slidesPerGroup,t,e,i)}return b.slideTo(b.activeIndex+b.params.slidesPerGroup,t,e,i)},b._slideNext=function(e){return b.slideNext(!0,e,!0)},b.slidePrev=function(e,t,i){if(b.params.loop){if(b.animating)return!1;b.fixLoop();b.container[0].clientLeft;return b.slideTo(b.activeIndex-1,t,e,i)}return b.slideTo(b.activeIndex-1,t,e,i)},b._slidePrev=function(e){return b.slidePrev(!0,e,!0)},b.slideReset=function(e,t,i){return b.slideTo(b.activeIndex,t,e)},b.disableTouchControl=function(){return b.params.onlyExternal=!0,!0},b.enableTouchControl=function(){return b.params.onlyExternal=!1,!0},b.setWrapperTransition=function(e,t){b.wrapper.transition(e),"slide"!==b.params.effect&&b.effects[b.params.effect]&&b.effects[b.params.effect].setTransition(e),b.params.parallax&&b.parallax&&b.parallax.setTransition(e),b.params.scrollbar&&b.scrollbar&&b.scrollbar.setTransition(e),b.params.control&&b.controller&&b.controller.setTransition(e,t),b.emit("onSetTransition",b,e)},b.setWrapperTranslate=function(e,t,i){var n=0,a=0;b.isHorizontal()?n=b.rtl?-e:e:a=e,b.params.roundLengths&&(n=r(n),a=r(a)),b.params.virtualTranslate||(b.support.transforms3d?b.wrapper.transform("translate3d("+n+"px, "+a+"px, 0px)"):b.wrapper.transform("translate("+n+"px, "+a+"px)")),b.translate=b.isHorizontal()?n:a;var s=b.maxTranslate()-b.minTranslate();(0===s?0:(e-b.minTranslate())/s)!==b.progress&&b.updateProgress(e),t&&b.updateActiveIndex(),"slide"!==b.params.effect&&b.effects[b.params.effect]&&b.effects[b.params.effect].setTranslate(b.translate),b.params.parallax&&b.parallax&&b.parallax.setTranslate(b.translate),b.params.scrollbar&&b.scrollbar&&b.scrollbar.setTranslate(b.translate),b.params.control&&b.controller&&b.controller.setTranslate(b.translate,i),b.emit("onSetTranslate",b,b.translate)},b.getTranslate=function(e,t){var i,n,a,r;return void 0===t&&(t="x"),b.params.virtualTranslate?b.rtl?-b.translate:b.translate:(a=window.getComputedStyle(e,null),window.WebKitCSSMatrix?((n=a.transform||a.webkitTransform).split(",").length>6&&(n=n.split(", ").map(function(e){return e.replace(",",".")}).join(", ")),r=new window.WebKitCSSMatrix("none"===n?"":n)):i=(r=a.MozTransform||a.OTransform||a.MsTransform||a.msTransform||a.transform||a.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===t&&(n=window.WebKitCSSMatrix?r.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),"y"===t&&(n=window.WebKitCSSMatrix?r.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5])),b.rtl&&n&&(n=-n),n||0)},b.getWrapperTranslate=function(e){return void 0===e&&(e=b.isHorizontal()?"x":"y"),b.getTranslate(b.wrapper[0],e)},b.observers=[],b.initObservers=function(){if(b.params.observeParents)for(var e=b.container.parents(),t=0;t<e.length;t++)l(e[t]);l(b.container[0],{childList:!1}),l(b.wrapper[0],{attributes:!1})},b.disconnectObservers=function(){for(var e=0;e<b.observers.length;e++)b.observers[e].disconnect();b.observers=[]},b.createLoop=function(){b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass).remove();var t=b.wrapper.children("."+b.params.slideClass);"auto"!==b.params.slidesPerView||b.params.loopedSlides||(b.params.loopedSlides=t.length),b.loopedSlides=parseInt(b.params.loopedSlides||b.params.slidesPerView,10),b.loopedSlides=b.loopedSlides+b.params.loopAdditionalSlides,b.loopedSlides>t.length&&(b.loopedSlides=t.length);var i,n=[],a=[];for(t.each(function(i,r){var s=e(this);i<b.loopedSlides&&a.push(r),i<t.length&&i>=t.length-b.loopedSlides&&n.push(r),s.attr("data-swiper-slide-index",i)}),i=0;i<a.length;i++)b.wrapper.append(e(a[i].cloneNode(!0)).addClass(b.params.slideDuplicateClass));for(i=n.length-1;i>=0;i--)b.wrapper.prepend(e(n[i].cloneNode(!0)).addClass(b.params.slideDuplicateClass))},b.destroyLoop=function(){b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass).remove(),b.slides.removeAttr("data-swiper-slide-index")},b.reLoop=function(e){var t=b.activeIndex-b.loopedSlides;b.destroyLoop(),b.createLoop(),b.updateSlidesSize(),e&&b.slideTo(t+b.loopedSlides,0,!1)},b.fixLoop=function(){var e;b.activeIndex<b.loopedSlides?(e=b.slides.length-3*b.loopedSlides+b.activeIndex,e+=b.loopedSlides,b.slideTo(e,0,!1,!0)):("auto"===b.params.slidesPerView&&b.activeIndex>=2*b.loopedSlides||b.activeIndex>b.slides.length-2*b.params.slidesPerView)&&(e=-b.slides.length+b.activeIndex+b.loopedSlides,e+=b.loopedSlides,b.slideTo(e,0,!1,!0))},b.appendSlide=function(e){if(b.params.loop&&b.destroyLoop(),"object"==typeof e&&e.length)for(var t=0;t<e.length;t++)e[t]&&b.wrapper.append(e[t]);else b.wrapper.append(e);b.params.loop&&b.createLoop(),b.params.observer&&b.support.observer||b.update(!0)},b.prependSlide=function(e){b.params.loop&&b.destroyLoop();var t=b.activeIndex+1;if("object"==typeof e&&e.length){for(var i=0;i<e.length;i++)e[i]&&b.wrapper.prepend(e[i]);t=b.activeIndex+e.length}else b.wrapper.prepend(e);b.params.loop&&b.createLoop(),b.params.observer&&b.support.observer||b.update(!0),b.slideTo(t,0,!1)},b.removeSlide=function(e){b.params.loop&&(b.destroyLoop(),b.slides=b.wrapper.children("."+b.params.slideClass));var t,i=b.activeIndex;if("object"==typeof e&&e.length){for(var n=0;n<e.length;n++)t=e[n],b.slides[t]&&b.slides.eq(t).remove(),t<i&&i--;i=Math.max(i,0)}else t=e,b.slides[t]&&b.slides.eq(t).remove(),t<i&&i--,i=Math.max(i,0);b.params.loop&&b.createLoop(),b.params.observer&&b.support.observer||b.update(!0),b.params.loop?b.slideTo(i+b.loopedSlides,0,!1):b.slideTo(i,0,!1)},b.removeAllSlides=function(){for(var e=[],t=0;t<b.slides.length;t++)e.push(t);b.removeSlide(e)},b.effects={fade:{setTranslate:function(){for(var e=0;e<b.slides.length;e++){var t=b.slides.eq(e),i=-t[0].swiperSlideOffset;b.params.virtualTranslate||(i-=b.translate);var n=0;b.isHorizontal()||(n=i,i=0);var a=b.params.fade.crossFade?Math.max(1-Math.abs(t[0].progress),0):1+Math.min(Math.max(t[0].progress,-1),0);t.css({opacity:a}).transform("translate3d("+i+"px, "+n+"px, 0px)")}},setTransition:function(e){if(b.slides.transition(e),b.params.virtualTranslate&&0!==e){var t=!1;b.slides.transitionEnd(function(){if(!t&&b){t=!0,b.animating=!1;for(var e=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],i=0;i<e.length;i++)b.wrapper.trigger(e[i])}})}}},flip:{setTranslate:function(){for(var t=0;t<b.slides.length;t++){var i=b.slides.eq(t),n=i[0].progress;b.params.flip.limitRotation&&(n=Math.max(Math.min(i[0].progress,1),-1));var a=-180*n,r=0,s=-i[0].swiperSlideOffset,o=0;if(b.isHorizontal()?b.rtl&&(a=-a):(o=s,s=0,r=-a,a=0),i[0].style.zIndex=-Math.abs(Math.round(n))+b.slides.length,b.params.flip.slideShadows){var l=b.isHorizontal()?i.find(".swiper-slide-shadow-left"):i.find(".swiper-slide-shadow-top"),u=b.isHorizontal()?i.find(".swiper-slide-shadow-right"):i.find(".swiper-slide-shadow-bottom");0===l.length&&(l=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"left":"top")+'"></div>'),i.append(l)),0===u.length&&(u=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"right":"bottom")+'"></div>'),i.append(u)),l.length&&(l[0].style.opacity=Math.max(-n,0)),u.length&&(u[0].style.opacity=Math.max(n,0))}i.transform("translate3d("+s+"px, "+o+"px, 0px) rotateX("+r+"deg) rotateY("+a+"deg)")}},setTransition:function(t){if(b.slides.transition(t).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(t),b.params.virtualTranslate&&0!==t){var i=!1;b.slides.eq(b.activeIndex).transitionEnd(function(){if(!i&&b&&e(this).hasClass(b.params.slideActiveClass)){i=!0,b.animating=!1;for(var t=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],n=0;n<t.length;n++)b.wrapper.trigger(t[n])}})}}},cube:{setTranslate:function(){var t,i=0;b.params.cube.shadow&&(b.isHorizontal()?(0===(t=b.wrapper.find(".swiper-cube-shadow")).length&&(t=e('<div class="swiper-cube-shadow"></div>'),b.wrapper.append(t)),t.css({height:b.width+"px"})):0===(t=b.container.find(".swiper-cube-shadow")).length&&(t=e('<div class="swiper-cube-shadow"></div>'),b.container.append(t)));for(var n=0;n<b.slides.length;n++){var a=b.slides.eq(n),r=90*n,s=Math.floor(r/360);b.rtl&&(r=-r,s=Math.floor(-r/360));var o=Math.max(Math.min(a[0].progress,1),-1),l=0,u=0,p=0;n%4==0?(l=4*-s*b.size,p=0):(n-1)%4==0?(l=0,p=4*-s*b.size):(n-2)%4==0?(l=b.size+4*s*b.size,p=b.size):(n-3)%4==0&&(l=-b.size,p=3*b.size+4*b.size*s),b.rtl&&(l=-l),b.isHorizontal()||(u=l,l=0);var d="rotateX("+(b.isHorizontal()?0:-r)+"deg) rotateY("+(b.isHorizontal()?r:0)+"deg) translate3d("+l+"px, "+u+"px, "+p+"px)";if(o<=1&&o>-1&&(i=90*n+90*o,b.rtl&&(i=90*-n-90*o)),a.transform(d),b.params.cube.slideShadows){var c=b.isHorizontal()?a.find(".swiper-slide-shadow-left"):a.find(".swiper-slide-shadow-top"),h=b.isHorizontal()?a.find(".swiper-slide-shadow-right"):a.find(".swiper-slide-shadow-bottom");0===c.length&&(c=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"left":"top")+'"></div>'),a.append(c)),0===h.length&&(h=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"right":"bottom")+'"></div>'),a.append(h)),c.length&&(c[0].style.opacity=Math.max(-o,0)),h.length&&(h[0].style.opacity=Math.max(o,0))}}if(b.wrapper.css({"-webkit-transform-origin":"50% 50% -"+b.size/2+"px","-moz-transform-origin":"50% 50% -"+b.size/2+"px","-ms-transform-origin":"50% 50% -"+b.size/2+"px","transform-origin":"50% 50% -"+b.size/2+"px"}),b.params.cube.shadow)if(b.isHorizontal())t.transform("translate3d(0px, "+(b.width/2+b.params.cube.shadowOffset)+"px, "+-b.width/2+"px) rotateX(90deg) rotateZ(0deg) scale("+b.params.cube.shadowScale+")");else{var f=Math.abs(i)-90*Math.floor(Math.abs(i)/90),m=1.5-(Math.sin(2*f*Math.PI/360)/2+Math.cos(2*f*Math.PI/360)/2),g=b.params.cube.shadowScale,v=b.params.cube.shadowScale/m,w=b.params.cube.shadowOffset;t.transform("scale3d("+g+", 1, "+v+") translate3d(0px, "+(b.height/2+w)+"px, "+-b.height/2/v+"px) rotateX(-90deg)")}var y=b.isSafari||b.isUiWebView?-b.size/2:0;b.wrapper.transform("translate3d(0px,0,"+y+"px) rotateX("+(b.isHorizontal()?0:i)+"deg) rotateY("+(b.isHorizontal()?-i:0)+"deg)")},setTransition:function(e){b.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),b.params.cube.shadow&&!b.isHorizontal()&&b.container.find(".swiper-cube-shadow").transition(e)}},coverflow:{setTranslate:function(){for(var t=b.translate,i=b.isHorizontal()?-t+b.width/2:-t+b.height/2,n=b.isHorizontal()?b.params.coverflow.rotate:-b.params.coverflow.rotate,a=b.params.coverflow.depth,r=0,s=b.slides.length;r<s;r++){var o=b.slides.eq(r),l=b.slidesSizesGrid[r],u=(i-o[0].swiperSlideOffset-l/2)/l*b.params.coverflow.modifier,p=b.isHorizontal()?n*u:0,d=b.isHorizontal()?0:n*u,c=-a*Math.abs(u),h=b.isHorizontal()?0:b.params.coverflow.stretch*u,f=b.isHorizontal()?b.params.coverflow.stretch*u:0;Math.abs(f)<.001&&(f=0),Math.abs(h)<.001&&(h=0),Math.abs(c)<.001&&(c=0),Math.abs(p)<.001&&(p=0),Math.abs(d)<.001&&(d=0);var m="translate3d("+f+"px,"+h+"px,"+c+"px)  rotateX("+d+"deg) rotateY("+p+"deg)";if(o.transform(m),o[0].style.zIndex=1-Math.abs(Math.round(u)),b.params.coverflow.slideShadows){var g=b.isHorizontal()?o.find(".swiper-slide-shadow-left"):o.find(".swiper-slide-shadow-top"),v=b.isHorizontal()?o.find(".swiper-slide-shadow-right"):o.find(".swiper-slide-shadow-bottom");0===g.length&&(g=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"left":"top")+'"></div>'),o.append(g)),0===v.length&&(v=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"right":"bottom")+'"></div>'),o.append(v)),g.length&&(g[0].style.opacity=u>0?u:0),v.length&&(v[0].style.opacity=-u>0?-u:0)}}b.browser.ie&&(b.wrapper[0].style.perspectiveOrigin=i+"px 50%")},setTransition:function(e){b.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}}},b.lazy={initialImageLoaded:!1,loadImageInSlide:function(t,i){if(void 0!==t&&(void 0===i&&(i=!0),0!==b.slides.length)){var n=b.slides.eq(t),a=n.find("."+b.params.lazyLoadingClass+":not(."+b.params.lazyStatusLoadedClass+"):not(."+b.params.lazyStatusLoadingClass+")");!n.hasClass(b.params.lazyLoadingClass)||n.hasClass(b.params.lazyStatusLoadedClass)||n.hasClass(b.params.lazyStatusLoadingClass)||(a=a.add(n[0])),0!==a.length&&a.each(function(){var t=e(this);t.addClass(b.params.lazyStatusLoadingClass);var a=t.attr("data-background"),r=t.attr("data-src"),s=t.attr("data-srcset"),o=t.attr("data-sizes");b.loadImage(t[0],r||a,s,o,!1,function(){if(void 0!==b&&null!==b&&b){if(a?(t.css("background-image",'url("'+a+'")'),t.removeAttr("data-background")):(s&&(t.attr("srcset",s),t.removeAttr("data-srcset")),o&&(t.attr("sizes",o),t.removeAttr("data-sizes")),r&&(t.attr("src",r),t.removeAttr("data-src"))),t.addClass(b.params.lazyStatusLoadedClass).removeClass(b.params.lazyStatusLoadingClass),n.find("."+b.params.lazyPreloaderClass+", ."+b.params.preloaderClass).remove(),b.params.loop&&i){var e=n.attr("data-swiper-slide-index");if(n.hasClass(b.params.slideDuplicateClass)){var l=b.wrapper.children('[data-swiper-slide-index="'+e+'"]:not(.'+b.params.slideDuplicateClass+")");b.lazy.loadImageInSlide(l.index(),!1)}else{var u=b.wrapper.children("."+b.params.slideDuplicateClass+'[data-swiper-slide-index="'+e+'"]');b.lazy.loadImageInSlide(u.index(),!1)}}b.emit("onLazyImageReady",b,n[0],t[0])}}),b.emit("onLazyImageLoad",b,n[0],t[0])})}},load:function(){var t,i=b.params.slidesPerView;if("auto"===i&&(i=0),b.lazy.initialImageLoaded||(b.lazy.initialImageLoaded=!0),b.params.watchSlidesVisibility)b.wrapper.children("."+b.params.slideVisibleClass).each(function(){b.lazy.loadImageInSlide(e(this).index())});else if(i>1)for(t=b.activeIndex;t<b.activeIndex+i;t++)b.slides[t]&&b.lazy.loadImageInSlide(t);else b.lazy.loadImageInSlide(b.activeIndex);if(b.params.lazyLoadingInPrevNext)if(i>1||b.params.lazyLoadingInPrevNextAmount&&b.params.lazyLoadingInPrevNextAmount>1){var n=b.params.lazyLoadingInPrevNextAmount,a=i,r=Math.min(b.activeIndex+a+Math.max(n,a),b.slides.length),s=Math.max(b.activeIndex-Math.max(a,n),0);for(t=b.activeIndex+i;t<r;t++)b.slides[t]&&b.lazy.loadImageInSlide(t);for(t=s;t<b.activeIndex;t++)b.slides[t]&&b.lazy.loadImageInSlide(t)}else{var o=b.wrapper.children("."+b.params.slideNextClass);o.length>0&&b.lazy.loadImageInSlide(o.index());var l=b.wrapper.children("."+b.params.slidePrevClass);l.length>0&&b.lazy.loadImageInSlide(l.index())}},onTransitionStart:function(){b.params.lazyLoading&&(b.params.lazyLoadingOnTransitionStart||!b.params.lazyLoadingOnTransitionStart&&!b.lazy.initialImageLoaded)&&b.lazy.load()},onTransitionEnd:function(){b.params.lazyLoading&&!b.params.lazyLoadingOnTransitionStart&&b.lazy.load()}},b.scrollbar={isTouched:!1,setDragPosition:function(e){var t=b.scrollbar,i=(b.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageX:e.pageX||e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageY:e.pageY||e.clientY)-t.track.offset()[b.isHorizontal()?"left":"top"]-t.dragSize/2,n=-b.minTranslate()*t.moveDivider,a=-b.maxTranslate()*t.moveDivider;i<n?i=n:i>a&&(i=a),i=-i/t.moveDivider,b.updateProgress(i),b.setWrapperTranslate(i,!0)},dragStart:function(e){var t=b.scrollbar;t.isTouched=!0,e.preventDefault(),e.stopPropagation(),t.setDragPosition(e),clearTimeout(t.dragTimeout),t.track.transition(0),b.params.scrollbarHide&&t.track.css("opacity",1),b.wrapper.transition(100),t.drag.transition(100),b.emit("onScrollbarDragStart",b)},dragMove:function(e){var t=b.scrollbar;t.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,t.setDragPosition(e),b.wrapper.transition(0),t.track.transition(0),t.drag.transition(0),b.emit("onScrollbarDragMove",b))},dragEnd:function(e){var t=b.scrollbar;t.isTouched&&(t.isTouched=!1,b.params.scrollbarHide&&(clearTimeout(t.dragTimeout),t.dragTimeout=setTimeout(function(){t.track.css("opacity",0),t.track.transition(400)},1e3)),b.emit("onScrollbarDragEnd",b),b.params.scrollbarSnapOnRelease&&b.slideReset())},draggableEvents:!1!==b.params.simulateTouch||b.support.touch?b.touchEvents:b.touchEventsDesktop,enableDraggable:function(){var t=b.scrollbar,i=b.support.touch?t.track:document;e(t.track).on(t.draggableEvents.start,t.dragStart),e(i).on(t.draggableEvents.move,t.dragMove),e(i).on(t.draggableEvents.end,t.dragEnd)},disableDraggable:function(){var t=b.scrollbar,i=b.support.touch?t.track:document;e(t.track).off(t.draggableEvents.start,t.dragStart),e(i).off(t.draggableEvents.move,t.dragMove),e(i).off(t.draggableEvents.end,t.dragEnd)},set:function(){if(b.params.scrollbar){var t=b.scrollbar;t.track=e(b.params.scrollbar),b.params.uniqueNavElements&&"string"==typeof b.params.scrollbar&&t.track.length>1&&1===b.container.find(b.params.scrollbar).length&&(t.track=b.container.find(b.params.scrollbar)),t.drag=t.track.find(".swiper-scrollbar-drag"),0===t.drag.length&&(t.drag=e('<div class="swiper-scrollbar-drag"></div>'),t.track.append(t.drag)),t.drag[0].style.width="",t.drag[0].style.height="",t.trackSize=b.isHorizontal()?t.track[0].offsetWidth:t.track[0].offsetHeight,t.divider=b.size/b.virtualSize,t.moveDivider=t.divider*(t.trackSize/b.size),t.dragSize=t.trackSize*t.divider,b.isHorizontal()?t.drag[0].style.width=t.dragSize+"px":t.drag[0].style.height=t.dragSize+"px",t.divider>=1?t.track[0].style.display="none":t.track[0].style.display="",b.params.scrollbarHide&&(t.track[0].style.opacity=0)}},setTranslate:function(){if(b.params.scrollbar){var e,t=b.scrollbar,i=(b.translate,t.dragSize);e=(t.trackSize-t.dragSize)*b.progress,b.rtl&&b.isHorizontal()?(e=-e)>0?(i=t.dragSize-e,e=0):-e+t.dragSize>t.trackSize&&(i=t.trackSize+e):e<0?(i=t.dragSize+e,e=0):e+t.dragSize>t.trackSize&&(i=t.trackSize-e),b.isHorizontal()?(b.support.transforms3d?t.drag.transform("translate3d("+e+"px, 0, 0)"):t.drag.transform("translateX("+e+"px)"),t.drag[0].style.width=i+"px"):(b.support.transforms3d?t.drag.transform("translate3d(0px, "+e+"px, 0)"):t.drag.transform("translateY("+e+"px)"),t.drag[0].style.height=i+"px"),b.params.scrollbarHide&&(clearTimeout(t.timeout),t.track[0].style.opacity=1,t.timeout=setTimeout(function(){t.track[0].style.opacity=0,t.track.transition(400)},1e3))}},setTransition:function(e){b.params.scrollbar&&b.scrollbar.drag.transition(e)}},b.controller={LinearSpline:function(e,t){var i=function(){var e,t,i;return function(n,a){for(t=-1,e=n.length;e-t>1;)n[i=e+t>>1]<=a?t=i:e=i;return e}}();this.x=e,this.y=t,this.lastIndex=e.length-1;var n,a;this.x.length;this.interpolate=function(e){return e?(a=i(this.x,e),n=a-1,(e-this.x[n])*(this.y[a]-this.y[n])/(this.x[a]-this.x[n])+this.y[n]):0}},getInterpolateFunction:function(e){b.controller.spline||(b.controller.spline=b.params.loop?new b.controller.LinearSpline(b.slidesGrid,e.slidesGrid):new b.controller.LinearSpline(b.snapGrid,e.snapGrid))},setTranslate:function(e,i){function n(t){e=t.rtl&&"horizontal"===t.params.direction?-b.translate:b.translate,"slide"===b.params.controlBy&&(b.controller.getInterpolateFunction(t),r=-b.controller.spline.interpolate(-e)),r&&"container"!==b.params.controlBy||(a=(t.maxTranslate()-t.minTranslate())/(b.maxTranslate()-b.minTranslate()),r=(e-b.minTranslate())*a+t.minTranslate()),b.params.controlInverse&&(r=t.maxTranslate()-r),t.updateProgress(r),t.setWrapperTranslate(r,!1,b),t.updateActiveIndex()}var a,r,s=b.params.control;if(Array.isArray(s))for(var o=0;o<s.length;o++)s[o]!==i&&s[o]instanceof t&&n(s[o]);else s instanceof t&&i!==s&&n(s)},setTransition:function(e,i){function n(t){t.setWrapperTransition(e,b),0!==e&&(t.onTransitionStart(),t.wrapper.transitionEnd(function(){r&&(t.params.loop&&"slide"===b.params.controlBy&&t.fixLoop(),t.onTransitionEnd())}))}var a,r=b.params.control;if(Array.isArray(r))for(a=0;a<r.length;a++)r[a]!==i&&r[a]instanceof t&&n(r[a]);else r instanceof t&&i!==r&&n(r)}},b.hashnav={onHashCange:function(e,t){var i=document.location.hash.replace("#","");i!==b.slides.eq(b.activeIndex).attr("data-hash")&&b.slideTo(b.wrapper.children("."+b.params.slideClass+'[data-hash="'+i+'"]').index())},attachEvents:function(t){var i=t?"off":"on";e(window)[i]("hashchange",b.hashnav.onHashCange)},setHash:function(){if(b.hashnav.initialized&&b.params.hashnav)if(b.params.replaceState&&window.history&&window.history.replaceState)window.history.replaceState(null,null,"#"+b.slides.eq(b.activeIndex).attr("data-hash")||"");else{var e=b.slides.eq(b.activeIndex),t=e.attr("data-hash")||e.attr("data-history");document.location.hash=t||""}},init:function(){if(b.params.hashnav&&!b.params.history){b.hashnav.initialized=!0;var e=document.location.hash.replace("#","");if(e)for(var t=0,i=b.slides.length;t<i;t++){var n=b.slides.eq(t);if((n.attr("data-hash")||n.attr("data-history"))===e&&!n.hasClass(b.params.slideDuplicateClass)){var a=n.index();b.slideTo(a,0,b.params.runCallbacksOnInit,!0)}}b.params.hashnavWatchState&&b.hashnav.attachEvents()}},destroy:function(){b.params.hashnavWatchState&&b.hashnav.attachEvents(!0)}},b.history={init:function(){if(b.params.history){if(!window.history||!window.history.pushState)return b.params.history=!1,void(b.params.hashnav=!0);b.history.initialized=!0,this.paths=this.getPathValues(),(this.paths.key||this.paths.value)&&(this.scrollToSlide(0,this.paths.value,b.params.runCallbacksOnInit),b.params.replaceState||window.addEventListener("popstate",this.setHistoryPopState))}},setHistoryPopState:function(){b.history.paths=b.history.getPathValues(),b.history.scrollToSlide(b.params.speed,b.history.paths.value,!1)},getPathValues:function(){var e=window.location.pathname.slice(1).split("/"),t=e.length;return{key:e[t-2],value:e[t-1]}},setHistory:function(e,t){if(b.history.initialized&&b.params.history){var i=b.slides.eq(t),n=this.slugify(i.attr("data-history"));window.location.pathname.includes(e)||(n=e+"/"+n),b.params.replaceState?window.history.replaceState(null,null,n):window.history.pushState(null,null,n)}},slugify:function(e){return e.toString().toLowerCase().replace(/\s+/g,"-").replace(/[^\w\-]+/g,"").replace(/\-\-+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},scrollToSlide:function(e,t,i){if(t)for(var n=0,a=b.slides.length;n<a;n++){var r=b.slides.eq(n);if(this.slugify(r.attr("data-history"))===t&&!r.hasClass(b.params.slideDuplicateClass)){var s=r.index();b.slideTo(s,e,i)}}else b.slideTo(0,e,i)}},b.disableKeyboardControl=function(){b.params.keyboardControl=!1,e(document).off("keydown",u)},b.enableKeyboardControl=function(){b.params.keyboardControl=!0,e(document).on("keydown",u)},b.mousewheel={event:!1,lastScrollTime:(new window.Date).getTime()},b.params.mousewheelControl&&(b.mousewheel.event=navigator.userAgent.indexOf("firefox")>-1?"DOMMouseScroll":function(){var e="onwheel"in document;if(!e){var t=document.createElement("div");t.setAttribute("onwheel","return;"),e="function"==typeof t.onwheel}return!e&&document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("","")&&(e=document.implementation.hasFeature("Events.wheel","3.0")),e}()?"wheel":"mousewheel"),b.disableMousewheelControl=function(){if(!b.mousewheel.event)return!1;var t=b.container;return"container"!==b.params.mousewheelEventsTarged&&(t=e(b.params.mousewheelEventsTarged)),t.off(b.mousewheel.event,d),b.params.mousewheelControl=!1,!0},b.enableMousewheelControl=function(){if(!b.mousewheel.event)return!1;var t=b.container;return"container"!==b.params.mousewheelEventsTarged&&(t=e(b.params.mousewheelEventsTarged)),t.on(b.mousewheel.event,d),b.params.mousewheelControl=!0,!0},b.parallax={setTranslate:function(){b.container.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(){c(this,b.progress)}),b.slides.each(function(){var t=e(this);t.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(){c(this,Math.min(Math.max(t[0].progress,-1),1))})})},setTransition:function(t){void 0===t&&(t=b.params.speed),b.container.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(){var i=e(this),n=parseInt(i.attr("data-swiper-parallax-duration"),10)||t;0===t&&(n=0),i.transition(n)})}},b.zoom={scale:1,currentScale:1,isScaling:!1,gesture:{slide:void 0,slideWidth:void 0,slideHeight:void 0,image:void 0,imageWrap:void 0,zoomMax:b.params.zoomMax},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0},getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,i=e.targetTouches[0].pageY,n=e.targetTouches[1].pageX,a=e.targetTouches[1].pageY;return Math.sqrt(Math.pow(n-t,2)+Math.pow(a-i,2))},onGestureStart:function(t){var i=b.zoom;if(!b.support.gestures){if("touchstart"!==t.type||"touchstart"===t.type&&t.targetTouches.length<2)return;i.gesture.scaleStart=i.getDistanceBetweenTouches(t)}i.gesture.slide&&i.gesture.slide.length||(i.gesture.slide=e(this),0===i.gesture.slide.length&&(i.gesture.slide=b.slides.eq(b.activeIndex)),i.gesture.image=i.gesture.slide.find("img, svg, canvas"),i.gesture.imageWrap=i.gesture.image.parent("."+b.params.zoomContainerClass),i.gesture.zoomMax=i.gesture.imageWrap.attr("data-swiper-zoom")||b.params.zoomMax,0!==i.gesture.imageWrap.length)?(i.gesture.image.transition(0),i.isScaling=!0):i.gesture.image=void 0},onGestureChange:function(e){var t=b.zoom;if(!b.support.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;t.gesture.scaleMove=t.getDistanceBetweenTouches(e)}t.gesture.image&&0!==t.gesture.image.length&&(b.support.gestures?t.scale=e.scale*t.currentScale:t.scale=t.gesture.scaleMove/t.gesture.scaleStart*t.currentScale,t.scale>t.gesture.zoomMax&&(t.scale=t.gesture.zoomMax-1+Math.pow(t.scale-t.gesture.zoomMax+1,.5)),t.scale<b.params.zoomMin&&(t.scale=b.params.zoomMin+1-Math.pow(b.params.zoomMin-t.scale+1,.5)),t.gesture.image.transform("translate3d(0,0,0) scale("+t.scale+")"))},onGestureEnd:function(e){var t=b.zoom;!b.support.gestures&&("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2)||t.gesture.image&&0!==t.gesture.image.length&&(t.scale=Math.max(Math.min(t.scale,t.gesture.zoomMax),b.params.zoomMin),t.gesture.image.transition(b.params.speed).transform("translate3d(0,0,0) scale("+t.scale+")"),t.currentScale=t.scale,t.isScaling=!1,1===t.scale&&(t.gesture.slide=void 0))},onTouchStart:function(e,t){var i=e.zoom;i.gesture.image&&0!==i.gesture.image.length&&(i.image.isTouched||("android"===e.device.os&&t.preventDefault(),i.image.isTouched=!0,i.image.touchesStart.x="touchstart"===t.type?t.targetTouches[0].pageX:t.pageX,i.image.touchesStart.y="touchstart"===t.type?t.targetTouches[0].pageY:t.pageY))},onTouchMove:function(e){var t=b.zoom;if(t.gesture.image&&0!==t.gesture.image.length&&(b.allowClick=!1,t.image.isTouched&&t.gesture.slide)){t.image.isMoved||(t.image.width=t.gesture.image[0].offsetWidth,t.image.height=t.gesture.image[0].offsetHeight,t.image.startX=b.getTranslate(t.gesture.imageWrap[0],"x")||0,t.image.startY=b.getTranslate(t.gesture.imageWrap[0],"y")||0,t.gesture.slideWidth=t.gesture.slide[0].offsetWidth,t.gesture.slideHeight=t.gesture.slide[0].offsetHeight,t.gesture.imageWrap.transition(0),b.rtl&&(t.image.startX=-t.image.startX),b.rtl&&(t.image.startY=-t.image.startY));var i=t.image.width*t.scale,n=t.image.height*t.scale;if(!(i<t.gesture.slideWidth&&n<t.gesture.slideHeight)){if(t.image.minX=Math.min(t.gesture.slideWidth/2-i/2,0),t.image.maxX=-t.image.minX,t.image.minY=Math.min(t.gesture.slideHeight/2-n/2,0),t.image.maxY=-t.image.minY,t.image.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,t.image.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!t.image.isMoved&&!t.isScaling){if(b.isHorizontal()&&Math.floor(t.image.minX)===Math.floor(t.image.startX)&&t.image.touchesCurrent.x<t.image.touchesStart.x||Math.floor(t.image.maxX)===Math.floor(t.image.startX)&&t.image.touchesCurrent.x>t.image.touchesStart.x)return void(t.image.isTouched=!1);if(!b.isHorizontal()&&Math.floor(t.image.minY)===Math.floor(t.image.startY)&&t.image.touchesCurrent.y<t.image.touchesStart.y||Math.floor(t.image.maxY)===Math.floor(t.image.startY)&&t.image.touchesCurrent.y>t.image.touchesStart.y)return void(t.image.isTouched=!1)}e.preventDefault(),e.stopPropagation(),t.image.isMoved=!0,t.image.currentX=t.image.touchesCurrent.x-t.image.touchesStart.x+t.image.startX,t.image.currentY=t.image.touchesCurrent.y-t.image.touchesStart.y+t.image.startY,t.image.currentX<t.image.minX&&(t.image.currentX=t.image.minX+1-Math.pow(t.image.minX-t.image.currentX+1,.8)),t.image.currentX>t.image.maxX&&(t.image.currentX=t.image.maxX-1+Math.pow(t.image.currentX-t.image.maxX+1,.8)),t.image.currentY<t.image.minY&&(t.image.currentY=t.image.minY+1-Math.pow(t.image.minY-t.image.currentY+1,.8)),t.image.currentY>t.image.maxY&&(t.image.currentY=t.image.maxY-1+Math.pow(t.image.currentY-t.image.maxY+1,.8)),t.velocity.prevPositionX||(t.velocity.prevPositionX=t.image.touchesCurrent.x),t.velocity.prevPositionY||(t.velocity.prevPositionY=t.image.touchesCurrent.y),t.velocity.prevTime||(t.velocity.prevTime=Date.now()),t.velocity.x=(t.image.touchesCurrent.x-t.velocity.prevPositionX)/(Date.now()-t.velocity.prevTime)/2,t.velocity.y=(t.image.touchesCurrent.y-t.velocity.prevPositionY)/(Date.now()-t.velocity.prevTime)/2,Math.abs(t.image.touchesCurrent.x-t.velocity.prevPositionX)<2&&(t.velocity.x=0),Math.abs(t.image.touchesCurrent.y-t.velocity.prevPositionY)<2&&(t.velocity.y=0),t.velocity.prevPositionX=t.image.touchesCurrent.x,t.velocity.prevPositionY=t.image.touchesCurrent.y,t.velocity.prevTime=Date.now(),t.gesture.imageWrap.transform("translate3d("+t.image.currentX+"px, "+t.image.currentY+"px,0)")}}},onTouchEnd:function(e,t){var i=e.zoom;if(i.gesture.image&&0!==i.gesture.image.length){if(!i.image.isTouched||!i.image.isMoved)return i.image.isTouched=!1,void(i.image.isMoved=!1);i.image.isTouched=!1,i.image.isMoved=!1;var n=300,a=300,r=i.velocity.x*n,s=i.image.currentX+r,o=i.velocity.y*a,l=i.image.currentY+o;0!==i.velocity.x&&(n=Math.abs((s-i.image.currentX)/i.velocity.x)),0!==i.velocity.y&&(a=Math.abs((l-i.image.currentY)/i.velocity.y));var u=Math.max(n,a);i.image.currentX=s,i.image.currentY=l;var p=i.image.width*i.scale,d=i.image.height*i.scale;i.image.minX=Math.min(i.gesture.slideWidth/2-p/2,0),i.image.maxX=-i.image.minX,i.image.minY=Math.min(i.gesture.slideHeight/2-d/2,0),i.image.maxY=-i.image.minY,i.image.currentX=Math.max(Math.min(i.image.currentX,i.image.maxX),i.image.minX),i.image.currentY=Math.max(Math.min(i.image.currentY,i.image.maxY),i.image.minY),i.gesture.imageWrap.transition(u).transform("translate3d("+i.image.currentX+"px, "+i.image.currentY+"px,0)")}},onTransitionEnd:function(e){var t=e.zoom;t.gesture.slide&&e.previousIndex!==e.activeIndex&&(t.gesture.image.transform("translate3d(0,0,0) scale(1)"),t.gesture.imageWrap.transform("translate3d(0,0,0)"),t.gesture.slide=t.gesture.image=t.gesture.imageWrap=void 0,t.scale=t.currentScale=1)},toggleZoom:function(t,i){var n=t.zoom;if(n.gesture.slide||(n.gesture.slide=t.clickedSlide?e(t.clickedSlide):t.slides.eq(t.activeIndex),n.gesture.image=n.gesture.slide.find("img, svg, canvas"),n.gesture.imageWrap=n.gesture.image.parent("."+t.params.zoomContainerClass)),n.gesture.image&&0!==n.gesture.image.length){var a,r,s,o,l,u,p,d,c,h,f,m,g,v,w,y;void 0===n.image.touchesStart.x&&i?(a="touchend"===i.type?i.changedTouches[0].pageX:i.pageX,r="touchend"===i.type?i.changedTouches[0].pageY:i.pageY):(a=n.image.touchesStart.x,r=n.image.touchesStart.y),n.scale&&1!==n.scale?(n.scale=n.currentScale=1,n.gesture.imageWrap.transition(300).transform("translate3d(0,0,0)"),n.gesture.image.transition(300).transform("translate3d(0,0,0) scale(1)"),n.gesture.slide=void 0):(n.scale=n.currentScale=n.gesture.imageWrap.attr("data-swiper-zoom")||t.params.zoomMax,i?(w=n.gesture.slide[0].offsetWidth,y=n.gesture.slide[0].offsetHeight,s=n.gesture.slide.offset().left+w/2-a,o=n.gesture.slide.offset().top+y/2-r,p=n.gesture.image[0].offsetWidth,d=n.gesture.image[0].offsetHeight,c=p*n.scale,h=d*n.scale,g=-(f=Math.min(w/2-c/2,0)),v=-(m=Math.min(y/2-h/2,0)),l=s*n.scale,u=o*n.scale,l<f&&(l=f),l>g&&(l=g),u<m&&(u=m),u>v&&(u=v)):(l=0,u=0),n.gesture.imageWrap.transition(300).transform("translate3d("+l+"px, "+u+"px,0)"),n.gesture.image.transition(300).transform("translate3d(0,0,0) scale("+n.scale+")"))}},attachEvents:function(t){var i=t?"off":"on";if(b.params.zoom){b.slides;var n=!("touchstart"!==b.touchEvents.start||!b.support.passiveListener||!b.params.passiveListeners)&&{passive:!0,capture:!1};b.support.gestures?(b.slides[i]("gesturestart",b.zoom.onGestureStart,n),b.slides[i]("gesturechange",b.zoom.onGestureChange,n),b.slides[i]("gestureend",b.zoom.onGestureEnd,n)):"touchstart"===b.touchEvents.start&&(b.slides[i](b.touchEvents.start,b.zoom.onGestureStart,n),b.slides[i](b.touchEvents.move,b.zoom.onGestureChange,n),b.slides[i](b.touchEvents.end,b.zoom.onGestureEnd,n)),b[i]("touchStart",b.zoom.onTouchStart),b.slides.each(function(t,n){e(n).find("."+b.params.zoomContainerClass).length>0&&e(n)[i](b.touchEvents.move,b.zoom.onTouchMove)}),b[i]("touchEnd",b.zoom.onTouchEnd),b[i]("transitionEnd",b.zoom.onTransitionEnd),b.params.zoomToggle&&b.on("doubleTap",b.zoom.toggleZoom)}},init:function(){b.zoom.attachEvents()},destroy:function(){b.zoom.attachEvents(!0)}},b._plugins=[];for(var R in b.plugins){var F=b.plugins[R](b,b.params[R]);F&&b._plugins.push(F)}return b.callPlugins=function(e){for(var t=0;t<b._plugins.length;t++)e in b._plugins[t]&&b._plugins[t][e](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5])},b.emitterEventListeners={},b.emit=function(e){b.params[e]&&b.params[e](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);var t;if(b.emitterEventListeners[e])for(t=0;t<b.emitterEventListeners[e].length;t++)b.emitterEventListeners[e][t](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);b.callPlugins&&b.callPlugins(e,arguments[1],arguments[2],arguments[3],arguments[4],arguments[5])},b.on=function(e,t){return e=h(e),b.emitterEventListeners[e]||(b.emitterEventListeners[e]=[]),b.emitterEventListeners[e].push(t),b},b.off=function(e,t){var i;if(e=h(e),void 0===t)return b.emitterEventListeners[e]=[],b;if(b.emitterEventListeners[e]&&0!==b.emitterEventListeners[e].length){for(i=0;i<b.emitterEventListeners[e].length;i++)b.emitterEventListeners[e][i]===t&&b.emitterEventListeners[e].splice(i,1);return b}},b.once=function(e,t){e=h(e);var i=function(){t(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4]),b.off(e,i)};return b.on(e,i),b},b.a11y={makeFocusable:function(e){return e.attr("tabIndex","0"),e},addRole:function(e,t){return e.attr("role",t),e},addLabel:function(e,t){return e.attr("aria-label",t),e},disable:function(e){return e.attr("aria-disabled",!0),e},enable:function(e){return e.attr("aria-disabled",!1),e},onEnterKey:function(t){13===t.keyCode&&(e(t.target).is(b.params.nextButton)?(b.onClickNext(t),b.isEnd?b.a11y.notify(b.params.lastSlideMessage):b.a11y.notify(b.params.nextSlideMessage)):e(t.target).is(b.params.prevButton)&&(b.onClickPrev(t),b.isBeginning?b.a11y.notify(b.params.firstSlideMessage):b.a11y.notify(b.params.prevSlideMessage)),e(t.target).is("."+b.params.bulletClass)&&e(t.target)[0].click())},liveRegion:e('<span class="'+b.params.notificationClass+'" aria-live="assertive" aria-atomic="true"></span>'),notify:function(e){var t=b.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},init:function(){b.params.nextButton&&b.nextButton&&b.nextButton.length>0&&(b.a11y.makeFocusable(b.nextButton),b.a11y.addRole(b.nextButton,"button"),b.a11y.addLabel(b.nextButton,b.params.nextSlideMessage)),b.params.prevButton&&b.prevButton&&b.prevButton.length>0&&(b.a11y.makeFocusable(b.prevButton),b.a11y.addRole(b.prevButton,"button"),b.a11y.addLabel(b.prevButton,b.params.prevSlideMessage)),e(b.container).append(b.a11y.liveRegion)},initPagination:function(){b.params.pagination&&b.params.paginationClickable&&b.bullets&&b.bullets.length&&b.bullets.each(function(){var t=e(this);b.a11y.makeFocusable(t),b.a11y.addRole(t,"button"),b.a11y.addLabel(t,b.params.paginationBulletMessage.replace(/{{index}}/,t.index()+1))})},destroy:function(){b.a11y.liveRegion&&b.a11y.liveRegion.length>0&&b.a11y.liveRegion.remove()}},b.init=function(){b.params.loop&&b.createLoop(),b.updateContainerSize(),b.updateSlidesSize(),b.updatePagination(),b.params.scrollbar&&b.scrollbar&&(b.scrollbar.set(),b.params.scrollbarDraggable&&b.scrollbar.enableDraggable()),"slide"!==b.params.effect&&b.effects[b.params.effect]&&(b.params.loop||b.updateProgress(),b.effects[b.params.effect].setTranslate()),b.params.loop?b.slideTo(b.params.initialSlide+b.loopedSlides,0,b.params.runCallbacksOnInit):(b.slideTo(b.params.initialSlide,0,b.params.runCallbacksOnInit),0===b.params.initialSlide&&(b.parallax&&b.params.parallax&&b.parallax.setTranslate(),b.lazy&&b.params.lazyLoading&&(b.lazy.load(),b.lazy.initialImageLoaded=!0))),b.attachEvents(),b.params.observer&&b.support.observer&&b.initObservers(),b.params.preloadImages&&!b.params.lazyLoading&&b.preloadImages(),b.params.zoom&&b.zoom&&b.zoom.init(),b.params.autoplay&&b.startAutoplay(),b.params.keyboardControl&&b.enableKeyboardControl&&b.enableKeyboardControl(),b.params.mousewheelControl&&b.enableMousewheelControl&&b.enableMousewheelControl(),b.params.hashnavReplaceState&&(b.params.replaceState=b.params.hashnavReplaceState),b.params.history&&b.history&&b.history.init(),b.params.hashnav&&b.hashnav&&b.hashnav.init(),b.params.a11y&&b.a11y&&b.a11y.init(),b.emit("onInit",b)},b.cleanupStyles=function(){b.container.removeClass(b.classNames.join(" ")).removeAttr("style"),b.wrapper.removeAttr("style"),b.slides&&b.slides.length&&b.slides.removeClass([b.params.slideVisibleClass,b.params.slideActiveClass,b.params.slideNextClass,b.params.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-column").removeAttr("data-swiper-row"),b.paginationContainer&&b.paginationContainer.length&&b.paginationContainer.removeClass(b.params.paginationHiddenClass),b.bullets&&b.bullets.length&&b.bullets.removeClass(b.params.bulletActiveClass),b.params.prevButton&&e(b.params.prevButton).removeClass(b.params.buttonDisabledClass),b.params.nextButton&&e(b.params.nextButton).removeClass(b.params.buttonDisabledClass),b.params.scrollbar&&b.scrollbar&&(b.scrollbar.track&&b.scrollbar.track.length&&b.scrollbar.track.removeAttr("style"),b.scrollbar.drag&&b.scrollbar.drag.length&&b.scrollbar.drag.removeAttr("style"))},b.destroy=function(e,t){b.detachEvents(),b.stopAutoplay(),b.params.scrollbar&&b.scrollbar&&b.params.scrollbarDraggable&&b.scrollbar.disableDraggable(),b.params.loop&&b.destroyLoop(),t&&b.cleanupStyles(),b.disconnectObservers(),b.params.zoom&&b.zoom&&b.zoom.destroy(),b.params.keyboardControl&&b.disableKeyboardControl&&b.disableKeyboardControl(),b.params.mousewheelControl&&b.disableMousewheelControl&&b.disableMousewheelControl(),b.params.a11y&&b.a11y&&b.a11y.destroy(),b.params.history&&!b.params.replaceState&&window.removeEventListener("popstate",b.history.setHistoryPopState),b.params.hashnav&&b.hashnav&&b.hashnav.destroy(),b.emit("onDestroy"),!1!==e&&(b=null)},b.init(),b}};t.prototype={isSafari:function(){var e=window.navigator.userAgent.toLowerCase();return e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0}(),isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent),isArray:function(e){return"[object Array]"===Object.prototype.toString.apply(e)},browser:{ie:window.navigator.pointerEnabled||window.navigator.msPointerEnabled,ieTouch:window.navigator.msPointerEnabled&&window.navigator.msMaxTouchPoints>1||window.navigator.pointerEnabled&&window.navigator.maxTouchPoints>1,lteIE9:function(){var e=document.createElement("div");return e.innerHTML="\x3c!--[if lte IE 9]><i></i><![endif]--\x3e",1===e.getElementsByTagName("i").length}()},device:function(){var e=window.navigator.userAgent,t=e.match(/(Android);?[\s\/]+([\d.]+)?/),i=e.match(/(iPad).*OS\s([\d_]+)/),n=e.match(/(iPod)(.*OS\s([\d_]+))?/),a=!i&&e.match(/(iPhone\sOS|iOS)\s([\d_]+)/);return{ios:i||a||n,android:t}}(),support:{touch:window.Modernizr&&!0===Modernizr.touch||!!("ontouchstart"in window||window.DocumentTouch&&document instanceof DocumentTouch),transforms3d:window.Modernizr&&!0===Modernizr.csstransforms3d||function(){var e=document.createElement("div").style;return"webkitPerspective"in e||"MozPerspective"in e||"OPerspective"in e||"MsPerspective"in e||"perspective"in e}(),flexbox:function(){for(var e=document.createElement("div").style,t="alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient".split(" "),i=0;i<t.length;i++)if(t[i]in e)return!0}(),observer:"MutationObserver"in window||"WebkitMutationObserver"in window,passiveListener:function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});window.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:"ongesturestart"in window},plugins:{}};for(var i=function(){var e=function(e){var t=this,i=0;for(i=0;i<e.length;i++)t[i]=e[i];return t.length=e.length,this},t=function(t,i){var n=[],a=0;if(t&&!i&&t instanceof e)return t;if(t)if("string"==typeof t){var r,s,o=t.trim();if(o.indexOf("<")>=0&&o.indexOf(">")>=0){var l="div";for(0===o.indexOf("<li")&&(l="ul"),0===o.indexOf("<tr")&&(l="tbody"),0!==o.indexOf("<td")&&0!==o.indexOf("<th")||(l="tr"),0===o.indexOf("<tbody")&&(l="table"),0===o.indexOf("<option")&&(l="select"),(s=document.createElement(l)).innerHTML=t,a=0;a<s.childNodes.length;a++)n.push(s.childNodes[a])}else for(r=i||"#"!==t[0]||t.match(/[ .<>:~]/)?(i||document).querySelectorAll(t):[document.getElementById(t.split("#")[1])],a=0;a<r.length;a++)r[a]&&n.push(r[a])}else if(t.nodeType||t===window||t===document)n.push(t);else if(t.length>0&&t[0].nodeType)for(a=0;a<t.length;a++)n.push(t[a]);return new e(n)};return e.prototype={addClass:function(e){if(void 0===e)return this;for(var t=e.split(" "),i=0;i<t.length;i++)for(var n=0;n<this.length;n++)this[n].classList.add(t[i]);return this},removeClass:function(e){for(var t=e.split(" "),i=0;i<t.length;i++)for(var n=0;n<this.length;n++)this[n].classList.remove(t[i]);return this},hasClass:function(e){return!!this[0]&&this[0].classList.contains(e)},toggleClass:function(e){for(var t=e.split(" "),i=0;i<t.length;i++)for(var n=0;n<this.length;n++)this[n].classList.toggle(t[i]);return this},attr:function(e,t){if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var i=0;i<this.length;i++)if(2===arguments.length)this[i].setAttribute(e,t);else for(var n in e)this[i][n]=e[n],this[i].setAttribute(n,e[n]);return this},removeAttr:function(e){for(var t=0;t<this.length;t++)this[t].removeAttribute(e);return this},data:function(e,t){if(void 0!==t){for(var i=0;i<this.length;i++){var n=this[i];n.dom7ElementDataStorage||(n.dom7ElementDataStorage={}),n.dom7ElementDataStorage[e]=t}return this}if(this[0]){var a=this[0].getAttribute("data-"+e);return a||(this[0].dom7ElementDataStorage&&e in this[0].dom7ElementDataStorage?this[0].dom7ElementDataStorage[e]:void 0)}},transform:function(e){for(var t=0;t<this.length;t++){var i=this[t].style;i.webkitTransform=i.MsTransform=i.msTransform=i.MozTransform=i.OTransform=i.transform=e}return this},transition:function(e){"string"!=typeof e&&(e+="ms");for(var t=0;t<this.length;t++){var i=this[t].style;i.webkitTransitionDuration=i.MsTransitionDuration=i.msTransitionDuration=i.MozTransitionDuration=i.OTransitionDuration=i.transitionDuration=e}return this},on:function(e,i,n,a){function r(e){var a=e.target;if(t(a).is(i))n.call(a,e);else for(var r=t(a).parents(),s=0;s<r.length;s++)t(r[s]).is(i)&&n.call(r[s],e)}var s,o,l=e.split(" ");for(s=0;s<this.length;s++)if("function"==typeof i||!1===i)for("function"==typeof i&&(n=arguments[1],a=arguments[2]||!1),o=0;o<l.length;o++)this[s].addEventListener(l[o],n,a);else for(o=0;o<l.length;o++)this[s].dom7LiveListeners||(this[s].dom7LiveListeners=[]),this[s].dom7LiveListeners.push({listener:n,liveListener:r}),this[s].addEventListener(l[o],r,a);return this},off:function(e,t,i,n){for(var a=e.split(" "),r=0;r<a.length;r++)for(var s=0;s<this.length;s++)if("function"==typeof t||!1===t)"function"==typeof t&&(i=arguments[1],n=arguments[2]||!1),this[s].removeEventListener(a[r],i,n);else if(this[s].dom7LiveListeners)for(var o=0;o<this[s].dom7LiveListeners.length;o++)this[s].dom7LiveListeners[o].listener===i&&this[s].removeEventListener(a[r],this[s].dom7LiveListeners[o].liveListener,n);return this},once:function(e,t,i,n){function a(s){i(s),r.off(e,t,a,n)}var r=this;"function"==typeof t&&(t=!1,i=arguments[1],n=arguments[2]),r.on(e,t,a,n)},trigger:function(e,t){for(var i=0;i<this.length;i++){var n;try{n=new window.CustomEvent(e,{detail:t,bubbles:!0,cancelable:!0})}catch(i){(n=document.createEvent("Event")).initEvent(e,!0,!0),n.detail=t}this[i].dispatchEvent(n)}return this},transitionEnd:function(e){function t(r){if(r.target===this)for(e.call(this,r),i=0;i<n.length;i++)a.off(n[i],t)}var i,n=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],a=this;if(e)for(i=0;i<n.length;i++)a.on(n[i],t);return this},width:function(){return this[0]===window?window.innerWidth:this.length>0?parseFloat(this.css("width")):null},outerWidth:function(e){return this.length>0?e?this[0].offsetWidth+parseFloat(this.css("margin-right"))+parseFloat(this.css("margin-left")):this[0].offsetWidth:null},height:function(){return this[0]===window?window.innerHeight:this.length>0?parseFloat(this.css("height")):null},outerHeight:function(e){return this.length>0?e?this[0].offsetHeight+parseFloat(this.css("margin-top"))+parseFloat(this.css("margin-bottom")):this[0].offsetHeight:null},offset:function(){if(this.length>0){var e=this[0],t=e.getBoundingClientRect(),i=document.body,n=e.clientTop||i.clientTop||0,a=e.clientLeft||i.clientLeft||0,r=window.pageYOffset||e.scrollTop,s=window.pageXOffset||e.scrollLeft;return{top:t.top+r-n,left:t.left+s-a}}return null},css:function(e,t){var i;if(1===arguments.length){if("string"!=typeof e){for(i=0;i<this.length;i++)for(var n in e)this[i].style[n]=e[n];return this}if(this[0])return window.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&"string"==typeof e){for(i=0;i<this.length;i++)this[i].style[e]=t;return this}return this},each:function(e){for(var t=0;t<this.length;t++)e.call(this[t],t,this[t]);return this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:void 0;for(var t=0;t<this.length;t++)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t++)this[t].textContent=e;return this},is:function(i){if(!this[0])return!1;var n,a;if("string"==typeof i){var r=this[0];if(r===document)return i===document;if(r===window)return i===window;if(r.matches)return r.matches(i);if(r.webkitMatchesSelector)return r.webkitMatchesSelector(i);if(r.mozMatchesSelector)return r.mozMatchesSelector(i);if(r.msMatchesSelector)return r.msMatchesSelector(i);for(n=t(i),a=0;a<n.length;a++)if(n[a]===this[0])return!0;return!1}if(i===document)return this[0]===document;if(i===window)return this[0]===window;if(i.nodeType||i instanceof e){for(n=i.nodeType?[i]:i,a=0;a<n.length;a++)if(n[a]===this[0])return!0;return!1}return!1},index:function(){if(this[0]){for(var e=this[0],t=0;null!==(e=e.previousSibling);)1===e.nodeType&&t++;return t}},eq:function(t){if(void 0===t)return this;var i,n=this.length;return t>n-1?new e([]):t<0?(i=n+t,new e(i<0?[]:[this[i]])):new e([this[t]])},append:function(t){var i,n;for(i=0;i<this.length;i++)if("string"==typeof t){var a=document.createElement("div");for(a.innerHTML=t;a.firstChild;)this[i].appendChild(a.firstChild)}else if(t instanceof e)for(n=0;n<t.length;n++)this[i].appendChild(t[n]);else this[i].appendChild(t);return this},prepend:function(t){var i,n;for(i=0;i<this.length;i++)if("string"==typeof t){var a=document.createElement("div");for(a.innerHTML=t,n=a.childNodes.length-1;n>=0;n--)this[i].insertBefore(a.childNodes[n],this[i].childNodes[0])}else if(t instanceof e)for(n=0;n<t.length;n++)this[i].insertBefore(t[n],this[i].childNodes[0]);else this[i].insertBefore(t,this[i].childNodes[0]);return this},insertBefore:function(e){for(var i=t(e),n=0;n<this.length;n++)if(1===i.length)i[0].parentNode.insertBefore(this[n],i[0]);else if(i.length>1)for(var a=0;a<i.length;a++)i[a].parentNode.insertBefore(this[n].cloneNode(!0),i[a])},insertAfter:function(e){for(var i=t(e),n=0;n<this.length;n++)if(1===i.length)i[0].parentNode.insertBefore(this[n],i[0].nextSibling);else if(i.length>1)for(var a=0;a<i.length;a++)i[a].parentNode.insertBefore(this[n].cloneNode(!0),i[a].nextSibling)},next:function(i){return new e(this.length>0?i?this[0].nextElementSibling&&t(this[0].nextElementSibling).is(i)?[this[0].nextElementSibling]:[]:this[0].nextElementSibling?[this[0].nextElementSibling]:[]:[])},nextAll:function(i){var n=[],a=this[0];if(!a)return new e([]);for(;a.nextElementSibling;){var r=a.nextElementSibling;i?t(r).is(i)&&n.push(r):n.push(r),a=r}return new e(n)},prev:function(i){return new e(this.length>0?i?this[0].previousElementSibling&&t(this[0].previousElementSibling).is(i)?[this[0].previousElementSibling]:[]:this[0].previousElementSibling?[this[0].previousElementSibling]:[]:[])},prevAll:function(i){var n=[],a=this[0];if(!a)return new e([]);for(;a.previousElementSibling;){var r=a.previousElementSibling;i?t(r).is(i)&&n.push(r):n.push(r),a=r}return new e(n)},parent:function(e){for(var i=[],n=0;n<this.length;n++)e?t(this[n].parentNode).is(e)&&i.push(this[n].parentNode):i.push(this[n].parentNode);return t(t.unique(i))},parents:function(e){for(var i=[],n=0;n<this.length;n++)for(var a=this[n].parentNode;a;)e?t(a).is(e)&&i.push(a):i.push(a),a=a.parentNode;return t(t.unique(i))},find:function(t){for(var i=[],n=0;n<this.length;n++)for(var a=this[n].querySelectorAll(t),r=0;r<a.length;r++)i.push(a[r]);return new e(i)},children:function(i){for(var n=[],a=0;a<this.length;a++)for(var r=this[a].childNodes,s=0;s<r.length;s++)i?1===r[s].nodeType&&t(r[s]).is(i)&&n.push(r[s]):1===r[s].nodeType&&n.push(r[s]);return new e(t.unique(n))},remove:function(){for(var e=0;e<this.length;e++)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this},add:function(){var e,i,n=this;for(e=0;e<arguments.length;e++){var a=t(arguments[e]);for(i=0;i<a.length;i++)n[n.length]=a[i],n.length++}return n}},t.fn=e.prototype,t.unique=function(e){for(var t=[],i=0;i<e.length;i++)-1===t.indexOf(e[i])&&t.push(e[i]);return t},t}(),n=["jQuery","Zepto","Dom7"],a=0;a<n.length;a++)window[n[a]]&&function(e){e.fn.swiper=function(i){var n;return e(this).each(function(){var e=new t(this,i);n||(n=e)}),n}}(window[n[a]]);var r;(r=void 0===i?window.Dom7||window.Zepto||window.jQuery:i)&&("transitionEnd"in r.fn||(r.fn.transitionEnd=function(e){function t(r){if(r.target===this)for(e.call(this,r),i=0;i<n.length;i++)a.off(n[i],t)}var i,n=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],a=this;if(e)for(i=0;i<n.length;i++)a.on(n[i],t);return this}),"transform"in r.fn||(r.fn.transform=function(e){for(var t=0;t<this.length;t++){var i=this[t].style;i.webkitTransform=i.MsTransform=i.msTransform=i.MozTransform=i.OTransform=i.transform=e}return this}),"transition"in r.fn||(r.fn.transition=function(e){"string"!=typeof e&&(e+="ms");for(var t=0;t<this.length;t++){var i=this[t].style;i.webkitTransitionDuration=i.MsTransitionDuration=i.msTransitionDuration=i.MozTransitionDuration=i.OTransitionDuration=i.transitionDuration=e}return this}),"outerWidth"in r.fn||(r.fn.outerWidth=function(e){return this.length>0?e?this[0].offsetWidth+parseFloat(this.css("margin-right"))+parseFloat(this.css("margin-left")):this[0].offsetWidth:null})),window.Swiper=t}(),"undefined"!=typeof module?module.exports=window.Swiper:"function"==typeof define&&define.amd&&define([],function(){"use strict";return window.Swiper});var autoplay=5e3,swiper=new Swiper(".swiper1",{pagination:".swiper-pagination",nextButton:".swiper-button-next",prevButton:".swiper-button-prev",paginationClickable:!0,spaceBetween:30,centeredSlides:!0,autoplay:autoplay,autoplayDisableOnInteraction:!1,watchSlidesProgress:!0,onProgress:move});if(document.documentElement.clientWidth<768)var swiper=new Swiper(".swiper2",{prevButton:".swiper-button-prev",nextButton:".swiper-button-next",slidesPerView:1,paginationClickable:!0,spaceBetween:30});if(document.documentElement.clientWidth>768)var swiper=new Swiper(".swiper2",{prevButton:".swiper-button-prev",nextButton:".swiper-button-next",slidesPerView:4,paginationClickable:!0,spaceBetween:30});if(document.documentElement.clientWidth<768)var swiper=new Swiper(".swiper3",{prevButton:".swiper-button-prev",nextButton:".swiper-button-next",slidesPerView:1,paginationClickable:!0,spaceBetween:30});if(document.documentElement.clientWidth>768)var swiper=new Swiper(".swiper3",{prevButton:".swiper-button-prev",nextButton:".swiper-button-next",slidesPerView:2,paginationClickable:!0,spaceBetween:30});if(document.documentElement.clientWidth<768)var swiper=new Swiper(".swiper4",{prevButton:".swiper-button-prev",nextButton:".swiper-button-next",slidesPerView:1,paginationClickable:!0,spaceBetween:30});if(document.documentElement.clientWidth>768)var swiper=new Swiper(".swiper4",{prevButton:".swiper-button-prev",nextButton:".swiper-button-next",slidesPerView:2,paginationClickable:!0,spaceBetween:30});var searchBtn=document.querySelector(".nav-main__search-icon"),searchWin=document.querySelector(".nav-main__search-window");searchBtn.addEventListener("click",function(e){e.preventDefault(),searchWin.classList.toggle("nav-main__search-window--open")});var navOpen=document.querySelector(".nav-main__toggle-open"),navMob=document.querySelector(".nav-main__list"),navSoc=document.querySelector(".nav-main__social");navOpen.addEventListener("click",function(e){e.preventDefault(),navMob.classList.toggle("nav-main__list--open"),navOpen.classList.toggle("nav-main__toggle-open--close"),navSoc.classList.toggle("nav-main__social--open")}),document.documentElement.clientWidth>768&&$(window).scroll(function(){$(window).scrollTop()>179?$(".nav-main__wrapper").addClass("nav-main__wrapper--fixed"):$(".nav-main__wrapper").removeClass("nav-main__wrapper--fixed")}),document.documentElement.clientWidth>992&&$(window).scroll(function(){$(window).scrollTop()>199?$(".nav-main__wrapper").addClass("nav-main__wrapper--fixed"):$(".nav-main__wrapper").removeClass("nav-main__wrapper--fixed")});var top_show=179,delay=1e3;$(document).ready(function(){$(window).scroll(function(){$(this).scrollTop()>top_show?$(".top-btn").fadeIn():$(".top-btn").fadeOut()}),$(".top-btn").click(function(){$("body, html").animate({scrollTop:0},delay)})}),$(document).ready(function(){$("#myCanvas").tagcanvas({textColour:"#000",outlineThickness:2,maxSpeed:.03,depth:.9})}),function(e){function t(e){return void 0!==e}function i(e){return"object"==typeof e&&null!=e}function n(e,t,i){return isNaN(e)?i:pe(i,ue(t,e))}function a(){return!1}function r(){return(new Date).valueOf()}function s(e,t){var i,n=[],a=e.length;for(i=0;i<a;++i)n.push(e[i]);return n.sort(t),n}function o(e){for(var t,i,n=e.length-1;n;)i=~~(Math.random()*n),t=e[n],e[n]=e[i],e[i]=t,--n}function l(e,t,i){this.x=e,this.y=t,this.z=i}function u(e,t){return t=t*Math.PI/180,e=e*Math.PI/180,new l(oe(e)*le(t),-oe(t),-le(e)*le(t))}function p(e){this[1]={1:e[0],2:e[1],3:e[2]},this[2]={1:e[3],2:e[4],3:e[5]},this[3]={1:e[6],2:e[7],3:e[8]}}function d(e,t,i,n){var a,r,s,o,l=[],u=Math.PI*(3-ce(5)),p=2/e;for(a=0;a<e;++a)s=ce(1-(r=a*p-1+p/2)*r),o=a*u,l.push([le(o)*s*t,r*i,oe(o)*s*n]);return l}function c(e,t,i,n,a){var r,s,o,l,u,p=[],d=Math.PI*(3-ce(5)),c=2/e;for(s=0;s<e;++s)o=s*c-1+c/2,l=le(r=s*d),u=oe(r),p.push(t?[o*i,l*n,u*a]:[l*i,o*n,u*a]);return p}function h(e,t,i,n,a,r){var s,o,l,u,p=[],d=2*Math.PI/t;for(o=0;o<t;++o)l=le(s=o*d),u=oe(s),p.push(e?[r*i,l*n,u*a]:[l*i,r*n,u*a]);return p}function f(e,t,i,n){return c(e,0,t,i,n)}function m(e,t,i,n){return c(e,1,t,i,n)}function g(e,t,i,n,a){return a=isNaN(a)?0:1*a,h(0,e,t,i,n,a)}function v(e,t,i,n,a){return a=isNaN(a)?0:1*a,h(1,e,t,i,n,a)}function w(e,t){var i,n,a=e,r=(1*t).toPrecision(3)+")";return"#"===e[0]?(fe[e]||(4===e.length?fe[e]="rgba("+ge[e[1]]+ge[e[2]]+ge[e[3]]:fe[e]="rgba("+me[e.substr(1,2)]+me[e.substr(3,2)]+me[e.substr(5,2)]),a=fe[e]+r):"rgb("===e.substr(0,4)||"hsl("===e.substr(0,4)?a=e.replace("(","a(").replace(")",","+r):"rgba("!==e.substr(0,5)&&"hsla("!==e.substr(0,5)||(i=e.lastIndexOf(",")+1,n=e.indexOf(")"),t*=parseFloat(e.substring(i,n)),a=e.substr(0,i)+t.toPrecision(3)+")"),a}function y(e,t){if(window.G_vmlCanvasManager)return null;var i=ve.createElement("canvas");return i.width=e,i.height=t,i}function x(){var e,t,i=y(3,3);return!!i&&(e=i.getContext("2d"),e.strokeStyle="#000",e.shadowColor="#fff",e.shadowBlur=3,e.globalAlpha=0,e.strokeRect(2,2,2,2),e.globalAlpha=1,t=e.getImageData(2,2,1,1),i=null,t.data[0]>0)}function b(e,t){var i,n,a,r,s,o=e.weightGradient;if(e.gCanvas)n=e.gCanvas.getContext("2d");else{if(e.gCanvas=i=y(1024,1),!i)return null;r=(n=i.getContext("2d")).createLinearGradient(0,0,1024,0);for(a in o)r.addColorStop(1-a,o[a]);n.fillStyle=r,n.fillRect(0,0,1024,1)}return"rgba("+(s=n.getImageData(~~(1023*t),0,1,1).data)[0]+","+s[1]+","+s[2]+","+s[3]/255+")"}function T(e,t,i,n,a,r,s,o,l,u){var p,d,c=a+(s||0)+(o&&o[0]<0?se(o[0]):0),h=a+(s||0)+(o&&o[1]<0?se(o[1]):0);for(e.font=t,e.textBaseline="top",e.fillStyle=i,r&&(e.shadowColor=r),s&&(e.shadowBlur=s),o&&(e.shadowOffsetX=o[0],e.shadowOffsetY=o[1]),p=0;p<n.length;++p)d=u?(l-u[p])/2:0,e.fillText(n[p],c+d,h),h+=parseInt(t)}function C(e,t,i,n,a,r,s){r?(e.beginPath(),e.moveTo(t,i+a-r),e.arcTo(t,i,t+r,i,r),e.arcTo(t+n,i,t+n,i+r,r),e.arcTo(t+n,i+a,t+n-r,i+a,r),e.arcTo(t,i+a,t,i+a-r,r),e.closePath(),e[s?"stroke":"fill"]()):e[s?"strokeRect":"fillRect"](t,i,n,a)}function S(e,t,i,n,a,r,s,o,l,u,p,d,c,h,f){var m,g,v,w,x,b,S=i+se(p[0])+2*(u+d)+o,z=n+se(p[1])+2*(u+d)+o;return(m=y(S,z))?(v=x=o/2,w=S-o,b=z-o,d+=v,g=m.getContext("2d"),r&&(g.fillStyle=r,C(g,v,x,w,b,c)),o&&(g.strokeStyle=s,g.lineWidth=o,C(g,v,x,w,b,c,!0)),T(g,t,a,e,d,l,u,p,h,f),m):null}function z(e,t,i,n,a,r,s){var o,l,u,p,d,c,h,f=e.width+2*a+i,m=e.height+2*a+i,g=y(f,m);return g?(l=u=i/2,p=f-i,d=m-i,a+=l,o=g.getContext("2d"),t&&(o.fillStyle=t,C(o,l,u,p,d,r)),i&&(o.strokeStyle=n,o.lineWidth=i,C(o,l,u,p,d,r,!0)),s?((h=(c=y(f,m)).getContext("2d")).drawImage(e,a,a,e.width,e.height),h.globalCompositeOperation="source-in",h.fillStyle=n,h.fillRect(0,0,f,m),h.globalCompositeOperation="destination-over",h.drawImage(g,0,0),h.globalCompositeOperation="source-over",o.drawImage(c,0,0)):o.drawImage(e,a,a,e.width,e.height),g):null}function E(e,t,i,n){var a,r,s=se(n[0]),o=se(n[1]),l=e.width+(s>i?s+i:2*i),u=e.height+(o>i?o+i:2*i),p=(i||0)+(n[0]<0?s:0),d=(i||0)+(n[1]<0?o:0);return(a=y(l,u))?(r=a.getContext("2d"),t&&(r.shadowColor=t),i&&(r.shadowBlur=i),n&&(r.shadowOffsetX=n[0],r.shadowOffsetY=n[1]),r.drawImage(e,p,d,e.width,e.height),a):null}function M(e,t,i){var n,a,r,s,o,l,u,p,d=parseInt(e.toString().length*i),c=parseInt(2*i*e.length),h=y(d,c);if(!h)return null;for((n=h.getContext("2d")).fillStyle="#000",n.fillRect(0,0,d,c),T(n,i+"px "+t,"#fff",e,0,0,0,[]),p={min:{x:r=(a=n.getImageData(0,0,d,c)).width,y:s=a.height},max:{x:-1,y:-1}},l=0;l<s;++l)for(o=0;o<r;++o)u=4*(l*r+o),a.data[u+1]>0&&(o<p.min.x&&(p.min.x=o),o>p.max.x&&(p.max.x=o),l<p.min.y&&(p.min.y=l),l>p.max.y&&(p.max.y=l));return r!=d&&(p.min.x*=d/r,p.max.x*=d/r),s!=c&&(p.min.y*=d/s,p.max.y*=d/s),h=null,p}function k(e){return"'"+e.replace(/(\'|\")/g,"").replace(/\s*,\s*/g,"', '")+"'"}function D(e,t,i){(i=i||ve).addEventListener?i.addEventListener(e,t,!1):i.attachEvent("on"+e,t)}function P(e,t,i,n){var a,r,s,o=n.imageScale;return t.complete?e.complete?(t.width=t.width,t.height=t.height,o&&(e.width=t.width*o,e.height=t.height*o),i.w=e.width,i.h=e.height,void(n.txtOpt&&(n.shadow&&(a=E(e,n.shadow,n.shadowBlur,n.shadowOffset))&&(i.image=a,i.w=a.width,i.h=a.height),(n.bgColour||n.bgOutlineThickness)&&(r="tag"==n.bgColour?L(i.a,"background-color"):n.bgColour,s="tag"==n.bgOutline?L(i.a,"color"):n.bgOutline||n.textColour,a=z(i.image,r,n.bgOutlineThickness,s,n.padding,n.bgRadius),"colour"==n.outlineMethod&&(i.oimage=z(i.image,r,n.bgOutlineThickness,n.outlineColour,n.padding,n.bgRadius,!0)),a&&(i.image=a,i.w=a.width,i.h=a.height))))):D("load",function(){P(e,t,i,n)},e):D("load",function(){P(e,t,i,n)},t)}function L(e,t){var i=ve.defaultView,n=t.replace(/\-([a-z])/g,function(e){return e.charAt(1).toUpperCase()});return i&&i.getComputedStyle&&i.getComputedStyle(e,null).getPropertyValue(t)||e.currentStyle&&e.currentStyle[n]}function I(e,t){var i,n=1;return e.weightFrom?n=1*(t.getAttribute(e.weightFrom)||e.textHeight):(i=L(t,"font-size"))?n=i.indexOf("px")>-1&&1*i.replace("px","")||i.indexOf("pt")>-1&&1.25*i.replace("pt","")||3.3*i:e.weight=!1,n}function A(e){return e.target&&t(e.target.id)?e.target.id:e.srcElement.parentNode.id}function N(e,i){var n,a,r=parseInt(L(i,"width"))/i.width,s=parseInt(L(i,"height"))/i.height;return t(e.offsetX)?n={x:e.offsetX,y:e.offsetY}:(a=Y(i.id),t(e.changedTouches)&&(e=e.changedTouches[0]),e.pageX&&(n={x:e.pageX-a.x,y:e.pageY-a.y})),n&&r&&s&&(n.x/=r,n.y/=s),n}function B(e){var t=e.target||e.fromElement.parentNode,i=U.tc[t.id];i&&(i.mx=i.my=-1,i.UnFreeze(),i.EndDrag())}function H(e){var t,i,n,a=U,r=A(e);for(t in a.tc)(i=a.tc[t]).tttimer&&(clearTimeout(i.tttimer),i.tttimer=null);r&&a.tc[r]&&((n=N(e,(i=a.tc[r]).canvas))&&(i.mx=n.x,i.my=n.y,i.Drag(e,n)),i.drawn=0)}function O(e){var t=U,i=ve.addEventListener?0:1,n=A(e);n&&e.button==i&&t.tc[n]&&t.tc[n].BeginDrag(e)}function R(e){var t,i=U,n=ve.addEventListener?0:1,a=A(e);a&&e.button==n&&i.tc[a]&&(t=i.tc[a],H(e),t.EndDrag()||t.touched||t.Clicked(e))}function F(e){var t=U,i=A(e);i&&e.changedTouches&&t.tc[i]&&(t.tc[i].touched=1,t.tc[i].BeginDrag(e))}function q(e){var t=U,i=A(e);i&&e.changedTouches&&t.tc[i]&&(W(e),t.tc[i].EndDrag()||(t.tc[i].Draw(),t.tc[i].Clicked(e)))}function W(e){var t,i,n,a=U,r=A(e);for(t in a.tc)(i=a.tc[t]).tttimer&&(clearTimeout(i.tttimer),i.tttimer=null);r&&a.tc[r]&&e.changedTouches&&((n=N(e,(i=a.tc[r]).canvas))&&(i.mx=n.x,i.my=n.y,i.Drag(e,n)),i.drawn=0)}function j(e){var t=U,i=A(e);i&&t.tc[i]&&(e.cancelBubble=!0,e.returnValue=!1,e.preventDefault&&e.preventDefault(),t.tc[i].Wheel((e.wheelDelta||e.detail)>0))}function X(e){var t,i,n=U.tc;e=e||r();for(t in n)i=n[t].interval,n[t].Draw(e);U.NextFrame(i)}function Y(e){var t=ve.getElementById(e).getBoundingClientRect(),i=ve.documentElement,n=ve.body,a=window,r=a.pageXOffset||i.scrollLeft,s=a.pageYOffset||i.scrollTop,o=i.clientLeft||n.clientLeft,l=i.clientTop||n.clientTop;return{x:t.left+r-o,y:t.top+s-l}}function G(e,t,i,n){var a=e.radius*e.z1/(e.z1+e.z2+t.z);return{x:t.x*a*i,y:t.y*a*n,z:t.z,w:(e.z1-t.z)/e.z2}}function _(e){this.e=e,this.br=0,this.line=[],this.text=[],this.original=e.innerText||e.textContent}function V(e,t){this.ts=r(),this.tc=e,this.tag=t,this.x=this.y=this.w=this.h=this.sc=1,this.z=0,this.Draw=e.pulsateTo<1&&"colour"!=e.outlineMethod?this.DrawPulsate:this.DrawSimple,this.radius=0|e.outlineRadius,this.SetMethod(e.outlineMethod)}function $(e,t,i,n,a,r,s,o,u,p,d,c,h,f){var m=e.ctxt;this.tc=e,this.image=t.src?t:null,this.text=t.src?[]:t,this.text_original=f,this.line_widths=[],this.title=i.title||null,this.a=i,this.position=new l(n[0],n[1],n[2]),this.x=this.y=this.z=0,this.w=a,this.h=r,this.colour=s||e.textColour,this.bgColour=o||e.bgColour,this.bgRadius=0|u,this.bgOutline=p||this.colour,this.bgOutlineThickness=0|d,this.textFont=c||e.textFont,this.padding=0|h,this.weight=this.sc=this.alpha=1,this.weighted=!e.weight,this.outline=new V(e,this),this.image||(this.textHeight=e.textHeight,this.extents=M(this.text,this.textFont,this.textHeight),this.Measure(m,e)),this.SetShadowColour=e.shadowAlpha?this.SetShadowColourAlpha:this.SetShadowColourFixed,this.SetDraw(e)}function U(e,i,s){var o,l,u=ve.getElementById(e),d=["id","class","innerHTML"];if(!u)throw 0;if(t(window.G_vmlCanvasManager)&&(u=window.G_vmlCanvasManager.initElement(u),this.ie=parseFloat(navigator.appVersion.split("MSIE")[1])),u&&(!u.getContext||!u.getContext("2d").fillText)){for(l=ve.createElement("DIV"),o=0;o<d.length;++o)l[d[o]]=u[d[o]];throw u.parentNode.insertBefore(l,u),u.parentNode.removeChild(u),0}for(o in U.options)this[o]=s&&t(s[o])?s[o]:t(U[o])?U[o]:U.options[o];this.canvas=u,this.ctxt=u.getContext("2d"),this.z1=250/this.depth,this.z2=this.z1/this.zoom,this.radius=.0075*pe(u.height,u.width),this.max_weight=0,this.min_weight=200,this.textFont=this.textFont&&k(this.textFont),this.textHeight*=1,this.pulsateTo=n(this.pulsateTo,0,1),this.minBrightness=n(this.minBrightness,0,1),this.maxBrightness=n(this.maxBrightness,this.minBrightness,1),this.ctxt.textBaseline="top",this.lx=(this.lock+"").indexOf("x")+1,this.ly=(this.lock+"").indexOf("y")+1,this.frozen=this.dx=this.dy=this.fixedAnim=this.touched=0,this.fixedAlpha=1,this.source=i||e,this.transform=p.Identity(),this.startTime=this.time=r(),this.Animate=this.dragControl?this.AnimateDrag:this.AnimatePosition,this.animTiming="function"==typeof U[this.animTiming]?U[this.animTiming]:U.Smooth,this.shadowBlur||this.shadowOffset[0]||this.shadowOffset[1]?(this.ctxt.shadowColor=this.shadow,this.shadow=this.ctxt.shadowColor,this.shadowAlpha=x()):delete this.shadow,this.Load(),i&&this.hideTags&&function(e){U.loaded?e.HideTags():D("load",function(){e.HideTags()},window)}(this),this.yaw=this.initial?this.initial[0]*this.maxSpeed:0,this.pitch=this.initial?this.initial[1]*this.maxSpeed:0,this.tooltip?"native"==this.tooltip?this.Tooltip=this.TooltipNative:(this.Tooltip=this.TooltipDiv,this.ttdiv||(this.ttdiv=ve.createElement("div"),this.ttdiv.className=this.tooltipClass,this.ttdiv.style.position="absolute",this.ttdiv.style.zIndex=u.style.zIndex+1,D("mouseover",function(e){e.target.style.display="none"},this.ttdiv),ve.body.appendChild(this.ttdiv))):this.Tooltip=this.TooltipNone,this.noMouse||we[e]||(D("mousemove",H,u),D("mouseout",B,u),D("mouseup",R,u),D("touchstart",F,u),D("touchend",q,u),D("touchcancel",q,u),D("touchmove",W,u),this.dragControl&&(D("mousedown",O,u),D("selectstart",a,u)),this.wheelZoom&&(D("mousewheel",j,u),D("DOMMouseScroll",j,u)),we[e]=1),U.started||(U.started=setTimeout(X,this.interval))}function K(e,t){U.tc[t]&&U.tc[t][e]()}var Q,Z,J,ee,te,ie,ne,ae,re,se=Math.abs,oe=Math.sin,le=Math.cos,ue=Math.max,pe=Math.min,de=Math.ceil,ce=Math.sqrt,he=Math.pow,fe={},me={},ge={0:"0,",1:"17,",2:"34,",3:"51,",4:"68,",5:"85,",6:"102,",7:"119,",8:"136,",9:"153,",a:"170,",A:"170,",b:"187,",B:"187,",c:"204,",C:"204,",d:"221,",D:"221,",e:"238,",E:"238,",f:"255,",F:"255,"},ve=document,we={};for(Q=0;Q<256;++Q)Z=Q.toString(16),Q<16&&(Z="0"+Z),me[Z]=me[Z.toUpperCase()]=Q.toString()+",";(ne=l.prototype).length=function(){return ce(this.x*this.x+this.y*this.y+this.z*this.z)},ne.dot=function(e){return this.x*e.x+this.y*e.y+this.z*e.z},ne.cross=function(e){return new l(this.y*e.z-this.z*e.y,this.z*e.x-this.x*e.z,this.x*e.y-this.y*e.x)},ne.angle=function(e){var t,i=this.dot(e);return 0==i?Math.PI/2:(t=i/(this.length()*e.length()))>=1?0:t<=-1?Math.PI:Math.acos(t)},ne.unit=function(){var e=this.length();return new l(this.x/e,this.y/e,this.z/e)},ie=p.prototype,p.Identity=function(){return new p([1,0,0,0,1,0,0,0,1])},p.Rotation=function(e,t){var i=oe(e),n=le(e),a=1-n;return new p([n+he(t.x,2)*a,t.x*t.y*a-t.z*i,t.x*t.z*a+t.y*i,t.y*t.x*a+t.z*i,n+he(t.y,2)*a,t.y*t.z*a-t.x*i,t.z*t.x*a-t.y*i,t.z*t.y*a+t.x*i,n+he(t.z,2)*a])},ie.mul=function(e){var t,i,n=[],a=e.xform?1:0;for(t=1;t<=3;++t)for(i=1;i<=3;++i)a?n.push(this[t][1]*e[1][i]+this[t][2]*e[2][i]+this[t][3]*e[3][i]):n.push(this[t][i]*e);return new p(n)},ie.xform=function(e){var t={},i=e.x,n=e.y,a=e.z;return t.x=i*this[1][1]+n*this[2][1]+a*this[3][1],t.y=i*this[1][2]+n*this[2][2]+a*this[3][2],t.z=i*this[1][3]+n*this[2][3]+a*this[3][3],t},(ae=_.prototype).Lines=function(e){var t,i,n,a=e?1:0;for(i=(t=(e=e||this.e).childNodes).length,n=0;n<i;++n)"BR"==t[n].nodeName?(this.text.push(this.line.join(" ")),this.br=1):3==t[n].nodeType?this.br?(this.line=[t[n].nodeValue],this.br=0):this.line.push(t[n].nodeValue):this.Lines(t[n]);return a||this.br||this.text.push(this.line.join(" ")),this.text},ae.SplitWidth=function(e,t,i,n){var a,r,s,o=[];for(t.font=n+"px "+i,a=0;a<this.text.length;++a){for(s=this.text[a].split(/\s+/),this.line=[s[0]],r=1;r<s.length;++r)t.measureText(this.line.join(" ")+" "+s[r]).width>e?(o.push(this.line.join(" ")),this.line=[s[r]]):this.line.push(s[r]);o.push(this.line.join(" "))}return this.text=o},(J=V.prototype).SetMethod=function(e){var t={block:["PreDraw","DrawBlock"],colour:["PreDraw","DrawColour"],outline:["PostDraw","DrawOutline"],classic:["LastDraw","DrawOutline"],none:["LastDraw"]},i=t[e]||t.outline;"none"==e?this.Draw=function(){return 1}:this.drawFunc=this[i[1]],this[i[0]]=this.Draw},J.Update=function(e,t,i,n,a,r,s,o){var l=this.tc.outlineOffset,u=2*l;this.x=a*e+s-l,this.y=a*t+o-l,this.w=a*i+u,this.h=a*n+u,this.sc=a,this.z=r},J.DrawOutline=function(e,t,i,n,a,r){e.strokeStyle=r,C(e,t,i,n,a,this.radius,!0)},J.DrawColour=function(e,t,i,n,a,r,s,o,l){return s.oimage?(s.alpha=1,s.Draw(e,o,l,s.oimage),1):this[s.image?"DrawColourImage":"DrawColourText"](e,t,i,n,a,r,s,o,l)},J.DrawColourText=function(e,t,i,n,a,r,s,o,l){var u=s.colour;return s.colour=r,s.alpha=1,s.Draw(e,o,l),s.colour=u,1},J.DrawColourImage=function(e,t,i,n,a,r,s,o,l){var u=e.canvas,p=~~ue(t,0),d=~~ue(i,0),c=pe(u.width-p,n)+.5|0,h=pe(u.height-d,a)+.5|0;return re?(re.width=c,re.height=h):re=y(c,h),re?(re.getContext("2d").drawImage(u,p,d,c,h,0,0,c,h),e.clearRect(p,d,c,h),s.alpha=1,s.Draw(e,o,l),e.setTransform(1,0,0,1,0,0),e.save(),e.beginPath(),e.rect(p,d,c,h),e.clip(),e.globalCompositeOperation="source-in",e.fillStyle=r,e.fillRect(p,d,c,h),e.restore(),e.globalCompositeOperation="destination-over",e.drawImage(re,0,0,c,h,p,d,c,h),e.globalCompositeOperation="source-over",1):this.SetMethod("outline")},J.DrawBlock=function(e,t,i,n,a,r){e.fillStyle=r,C(e,t,i,n,a,this.radius)},J.DrawSimple=function(e,t,i,n){var a=this.tc;return e.setTransform(1,0,0,1,0,0),e.strokeStyle=a.outlineColour,e.lineWidth=a.outlineThickness,e.shadowBlur=e.shadowOffsetX=e.shadowOffsetY=0,e.globalAlpha=1,this.drawFunc(e,this.x,this.y,this.w,this.h,a.outlineColour,t,i,n)},J.DrawPulsate=function(e,t,i,n){var a=r()-this.ts,s=this.tc;return e.setTransform(1,0,0,1,0,0),e.strokeStyle=s.outlineColour,e.lineWidth=s.outlineThickness,e.shadowBlur=e.shadowOffsetX=e.shadowOffsetY=0,e.globalAlpha=s.pulsateTo+(1-s.pulsateTo)*(.5+le(2*Math.PI*a/(1e3*s.pulsateTime))/2),this.drawFunc(e,this.x,this.y,this.w,this.h,s.outlineColour,t,i,n)},J.Active=function(e,t,i){return t>=this.x&&i>=this.y&&t<=this.x+this.w&&i<=this.y+this.h},J.PreDraw=J.PostDraw=J.LastDraw=a,(ee=$.prototype).EqualTo=function(e){var t=e.getElementsByTagName("img");return this.a.href!=e.href?0:t.length?this.image.src==t[0].src:(e.innerText||e.textContent)==this.text_original},ee.SetDraw=function(e){this.Draw=this.image?e.ie>7?this.DrawImageIE:this.DrawImage:this.DrawText,e.noSelect&&(this.CheckActive=a)},ee.MeasureText=function(e){var t,i,n=this.text.length,a=0;for(t=0;t<n;++t)this.line_widths[t]=i=e.measureText(this.text[t]).width,a=ue(a,i);return a},ee.Measure=function(e,t){if(this.h=this.extents?this.extents.max.y+this.extents.min.y:this.textHeight,e.font=this.font=this.textHeight+"px "+this.textFont,this.w=this.MeasureText(e),t.txtOpt){var i,n=t.txtScale,a=n*this.textHeight+"px "+this.textFont,r=[n*t.shadowOffset[0],n*t.shadowOffset[1]];e.font=a,i=this.MeasureText(e),this.image=S(this.text,a,i+n,n*this.h+n,this.colour,this.bgColour,this.bgOutline,n*this.bgOutlineThickness,t.shadow,n*t.shadowBlur,r,n*this.padding,n*this.bgRadius,i,this.line_widths),"colour"==t.outlineMethod&&(this.oimage=S(this.text,a,i+n,n*this.h+n,t.outlineColour,this.bgColour,t.outlineColour,n*this.bgOutlineThickness,t.shadow,n*t.shadowBlur,r,n*this.padding,n*this.bgRadius,i,this.line_widths)),this.image&&(this.w=this.image.width/n,this.h=this.image.height/n),this.SetDraw(t),t.txtOpt=!!this.image}},ee.SetFont=function(e,t){this.textFont=e,this.colour=t,this.extents=M(this.text,this.textFont,this.textHeight),this.Measure(this.tc.ctxt,this.tc)},ee.SetWeight=function(e){this.text.length&&(this.weight=e,this.Weight(this.tc.ctxt,this.tc),this.Measure(this.tc.ctxt,this.tc))},ee.Weight=function(e,t){var i=this.weight,n=t.weightMode;this.weighted=!0,"colour"!=n&&"both"!=n||(this.colour=b(t,(i-t.min_weight)/(t.max_weight-t.min_weight))),"size"!=n&&"both"!=n||(t.weightSizeMin>0&&t.weightSizeMax>t.weightSizeMin?this.textHeight=t.weightSize*(t.weightSizeMin+(t.weightSizeMax-t.weightSizeMin)*(i-t.min_weight)/(t.max_weight-t.min_weight)):this.textHeight=i*t.weightSize),this.extents=M(this.text,this.textFont,this.textHeight)},ee.SetShadowColourFixed=function(e,t,i){e.shadowColor=t},ee.SetShadowColourAlpha=function(e,t,i){e.shadowColor=w(t,i)},ee.DrawText=function(e,t,i){var n,a,r=this.tc,s=this.x,o=this.y,l=this.sc;for(e.globalAlpha=this.alpha,e.fillStyle=this.colour,r.shadow&&this.SetShadowColour(e,r.shadow,this.alpha),e.font=this.font,s+=t/l,o+=i/l-this.h/2,n=0;n<this.text.length;++n)a=s-this.line_widths[n]/2,e.setTransform(l,0,0,l,l*a,l*o),e.fillText(this.text[n],0,0),o+=this.textHeight},ee.DrawImage=function(e,t,i,n){var a=this.x,r=this.y,s=this.sc,o=n||this.image,l=this.w,u=this.h,p=this.alpha,d=this.shadow;e.globalAlpha=p,d&&this.SetShadowColour(e,d,p),a+=t/s-l/2,r+=i/s-u/2,e.setTransform(s,0,0,s,s*a,s*r),e.drawImage(o,0,0,l,u)},ee.DrawImageIE=function(e,t,i){var n=this.image,a=this.sc,r=n.width=this.w*a,s=n.height=this.h*a,o=this.x*a+t-r/2,l=this.y*a+i-s/2;e.setTransform(1,0,0,1,0,0),e.globalAlpha=this.alpha,e.drawImage(n,o,l)},ee.Calc=function(e,t){var i,a=this.tc,r=a.minBrightness,s=a.maxBrightness,o=a.max_radius;i=e.xform(this.position),this.xformed=i,i=G(a,i,a.stretchX,a.stretchY),this.x=i.x,this.y=i.y,this.z=i.z,this.sc=i.w,this.alpha=t*n(r+(s-r)*(o-this.z)/(2*o),0,1)},ee.UpdateActive=function(e,t,i){var n=this.outline,a=this.w,r=this.h,s=this.x-a/2,o=this.y-r/2;return n.Update(s,o,a,r,this.sc,this.z,t,i),n},ee.CheckActive=function(e,t,i){var n=this.tc,a=this.UpdateActive(e,t,i);return a.Active(e,n.mx,n.my)?a:null},ee.Clicked=function(e){var t,i=this.a,n=i.target,a=i.href;if(""==n||"_self"==n){if(ve.createEvent){if((t=ve.createEvent("MouseEvents")).initMouseEvent("click",1,1,window,0,0,0,0,0,0,0,0,0,0,null),!i.dispatchEvent(t))return}else if(i.fireEvent&&!i.fireEvent("onclick"))return;ve.location=a}else if(self.frames[n])self.frames[n].document.location=a;else{try{if(top.frames[n])return void(top.frames[n].document.location=a)}catch(e){}window.open(a,n)}},(te=U.prototype).SourceElements=function(){return ve.querySelectorAll?ve.querySelectorAll("#"+this.source):[ve.getElementById(this.source)]},te.HideTags=function(){var e,t=this.SourceElements();for(e=0;e<t.length;++e)t[e].style.display="none"},te.GetTags=function(){var e,t,i,n=this.SourceElements(),a=[];for(t=0;t<n.length;++t)for(e=n[t].getElementsByTagName("a"),i=0;i<e.length;++i)a.push(e[i]);return a},te.CreateTag=function(e,t){var i,n,a,r,s,o,l=e.getElementsByTagName("img");return t=t||[0,0,0],l.length?(i=new Image,i.src=l[0].src,n=new $(this,i,e,t,0,0),P(i,l[0],n,this),n):(a=new _(e),n=a.Lines(),r=this.textFont||k(L(e,"font-family")),this.splitWidth&&(n=a.SplitWidth(this.splitWidth,this.ctxt,r,this.textHeight)),s="tag"==this.bgColour?L(e,"background-color"):this.bgColour,o="tag"==this.bgOutline?L(e,"color"):this.bgOutline,new $(this,n,e,t,2,this.textHeight+2,this.textColour||L(e,"color"),s,this.bgRadius,o,this.bgOutlineThickness,r,this.padding,a.original))},te.UpdateTag=function(e,t){var i=this.textColour||L(t,"color"),n=this.textFont||k(L(t,"font-family"));e.a=t,e.title=t.title,e.colour==i&&e.textFont==n||e.SetFont(n,i)},te.Weight=function(e){var t,i,n=e.length,a=[];for(i=0;i<n;++i)(t=I(this,e[i].a))>this.max_weight&&(this.max_weight=t),t<this.min_weight&&(this.min_weight=t),a.push(t);if(this.max_weight>this.min_weight)for(i=0;i<n;++i)e[i].SetWeight(a[i])},te.Load=function(){var e,t,i,n,a,r,s,l=this.GetTags(),u=[],p=[],c={sphere:d,vcylinder:f,hcylinder:m,vring:g,hring:v};if(l.length){for(p.length=l.length,s=0;s<l.length;++s)p[s]=s;for(this.shuffleTags&&o(p),i=100*this.radiusX,n=100*this.radiusY,a=100*this.radiusZ,this.max_radius=ue(i,ue(n,a)),this.shapeArgs?this.shapeArgs[0]=l.length:(e=(t=this.shape.toString().split(/[(),]/)).shift(),this.shape=c[e]||c.sphere,this.shapeArgs=[l.length,i,n,a].concat(t)),r=this.shape.apply(this,this.shapeArgs),this.listLength=l.length,s=0;s<l.length;++s)u.push(this.CreateTag(l[p[s]],r[s]));this.weight&&this.Weight(u,!0)}this.taglist=u},te.Update=function(){var e,t,i,n,a,r,s=this.GetTags(),u=[],p=this.taglist,d=[],c=[];if(!this.shapeArgs)return this.Load();if(s.length){for(n=this.listLength=s.length,i=p.length,a=0;a<i;++a)u.push(p[a]),c.push(a);for(a=0;a<n;++a){for(r=0,e=0;r<i;++r)p[r].EqualTo(s[a])&&(this.UpdateTag(u[r],s[a]),e=c[r]=-1);e||d.push(a)}for(a=0,r=0;a<i;++a)-1==c[r]?c.splice(r,1):++r;if(c.length){for(o(c);c.length&&d.length;)a=c.shift(),r=d.shift(),u[a]=this.CreateTag(s[r]);for(c.sort(function(e,t){return e-t});c.length;)u.splice(c.pop(),1)}for(r=u.length/(d.length+1),a=0;d.length;)u.splice(de(++a*r),0,this.CreateTag(s[d.shift()]));for(this.shapeArgs[0]=n=u.length,t=this.shape.apply(this,this.shapeArgs),a=0;a<n;++a)u[a].position=new l(t[a][0],t[a][1],t[a][2]);this.weight&&this.Weight(u)}this.taglist=u},te.SetShadow=function(e){e.shadowBlur=this.shadowBlur,e.shadowOffsetX=this.shadowOffset[0],e.shadowOffsetY=this.shadowOffset[1]},te.Draw=function(e){if(!this.paused){var t,i,n,r,o=this.canvas,l=o.width,u=o.height,p=0,d=(e-this.time)*this.interval/1e3,c=l/2+this.offsetX,h=u/2+this.offsetY,f=this.ctxt,m=-1,g=this.taglist,v=g.length,w=this.frontSelect,y=this.centreFunc==a;if(this.time=e,this.frozen&&this.drawn)return this.Animate(l,u,d);for(r=this.AnimateFixed(),f.setTransform(1,0,0,1,0,0),n=0;n<v;++n)g[n].Calc(this.transform,this.fixedAlpha);if(g=s(g,function(e,t){return t.z-e.z}),r&&this.fixedAnim.active)t=this.fixedAnim.tag.UpdateActive(f,c,h);else{for(this.active=null,n=0;n<v;++n)(i=this.mx>=0&&this.my>=0&&this.taglist[n].CheckActive(f,c,h))&&i.sc>p&&(!w||i.z<=0)&&(m=n,(t=i).tag=this.taglist[n],p=i.sc);this.active=t}for(this.txtOpt||this.shadow&&this.SetShadow(f),f.clearRect(0,0,l,u),n=0;n<v;++n){if(!y&&g[n].z<=0){try{this.centreFunc(f,l,u,c,h)}catch(e){alert(e),this.centreFunc=a}y=!0}t&&t.tag==g[n]&&t.PreDraw(f,g[n],c,h)||g[n].Draw(f,c,h),t&&t.tag==g[n]&&t.PostDraw(f)}this.freezeActive&&t?this.Freeze():(this.UnFreeze(),this.drawn=v==this.listLength),this.fixedCallback&&(this.fixedCallback(this,this.fixedCallbackTag),this.fixedCallback=null),r||this.Animate(l,u,d),t&&t.LastDraw(f),o.style.cursor=t?this.activeCursor:"",this.Tooltip(t,this.taglist[m])}},te.TooltipNone=function(){},te.TooltipNative=function(e,t){this.canvas.title=e&&t.title?t.title:""},te.TooltipDiv=function(e,t){var i=this,n=i.ttdiv.style,a=i.canvas.id,r="none";e&&t.title?(t.title!=i.ttdiv.innerHTML&&(n.display=r),i.ttdiv.innerHTML=t.title,t.title=i.ttdiv.innerHTML,n.display!=r||i.tttimer||(i.tttimer=setTimeout(function(){var e=Y(a);n.display="block",n.left=e.x+i.mx+"px",n.top=e.y+i.my+24+"px",i.tttimer=null},i.tooltipDelay))):n.display=r},te.Transform=function(e,t,i){if(t||i){var n=oe(t),a=le(t),r=oe(i),s=le(i),o=new p([s,0,r,0,1,0,-r,0,s]),l=new p([1,0,0,0,a,-n,0,n,a]);e.transform=e.transform.mul(o.mul(l))}},te.AnimateFixed=function(){var e,t,i,n,a;return this.fadeIn&&((t=r()-this.startTime)>=this.fadeIn?(this.fadeIn=0,this.fixedAlpha=1):this.fixedAlpha=t/this.fadeIn),!!this.fixedAnim&&(this.fixedAnim.transform||(this.fixedAnim.transform=this.transform),e=this.fixedAnim,t=r()-e.t0,i=e.angle,a=this.animTiming(e.t,t),this.transform=e.transform,t>=e.t?(this.fixedCallbackTag=e.tag,this.fixedCallback=e.cb,this.fixedAnim=this.yaw=this.pitch=0):i*=a,n=p.Rotation(i,e.axis),this.transform=this.transform.mul(n),0!=this.fixedAnim)},te.AnimatePosition=function(e,t,i){var n,a,r=this,s=r.mx,o=r.my;!r.frozen&&s>=0&&o>=0&&s<e&&o<t?(n=r.maxSpeed,a=r.reverse?-1:1,r.lx||(r.yaw=a*i*(2*n*s/e-n)),r.ly||(r.pitch=a*i*-(2*n*o/t-n)),r.initial=null):r.initial||(r.frozen&&!r.freezeDecel?r.yaw=r.pitch=0:r.Decel(r)),this.Transform(r,r.pitch,r.yaw)},te.AnimateDrag=function(e,t,i){var n=this,a=100*i*n.maxSpeed/n.max_radius/n.zoom;n.dx||n.dy?(n.lx||(n.yaw=n.dx*a/n.stretchX),n.ly||(n.pitch=n.dy*-a/n.stretchY),n.dx=n.dy=0,n.initial=null):n.initial||n.Decel(n),this.Transform(n,n.pitch,n.yaw)},te.Freeze=function(){this.frozen||(this.preFreeze=[this.yaw,this.pitch],this.frozen=1,this.drawn=0)},te.UnFreeze=function(){this.frozen&&(this.yaw=this.preFreeze[0],this.pitch=this.preFreeze[1],this.frozen=0)},te.Decel=function(e){var t=e.minSpeed,i=se(e.yaw),n=se(e.pitch);!e.lx&&i>t&&(e.yaw=i>e.z0?e.yaw*e.decel:0),!e.ly&&n>t&&(e.pitch=n>e.z0?e.pitch*e.decel:0)},te.Zoom=function(e){this.z2=this.z1*(1/e),this.drawn=0},te.Clicked=function(e){var t=this.active;try{t&&t.tag&&(!1===this.clickToFront||null===this.clickToFront?t.tag.Clicked(e):this.TagToFront(t.tag,this.clickToFront,function(){t.tag.Clicked(e)},!0))}catch(e){}},te.Wheel=function(e){var t=this.zoom+this.zoomStep*(e?1:-1);this.zoom=pe(this.zoomMax,ue(this.zoomMin,t)),this.Zoom(this.zoom)},te.BeginDrag=function(e){this.down=N(e,this.canvas),e.cancelBubble=!0,e.returnValue=!1,e.preventDefault&&e.preventDefault()},te.Drag=function(e,t){if(this.dragControl&&this.down){var i=this.dragThreshold*this.dragThreshold,n=t.x-this.down.x,a=t.y-this.down.y;(this.dragging||n*n+a*a>i)&&(this.dx=n,this.dy=a,this.dragging=1,this.down=t)}},te.EndDrag=function(){var e=this.dragging;return this.dragging=this.down=null,e},te.Pause=function(){this.paused=!0},te.Resume=function(){this.paused=!1},te.SetSpeed=function(e){this.initial=e,this.yaw=e[0]*this.maxSpeed,this.pitch=e[1]*this.maxSpeed},te.FindTag=function(e){if(!t(e))return null;if(t(e.index)&&(e=e.index),!i(e))return this.taglist[e];var n,a,r;for(t(e.id)?(n="id",a=e.id):t(e.text)&&(n="innerText",a=e.text),r=0;r<this.taglist.length;++r)if(this.taglist[r].a[n]==a)return this.taglist[r]},te.RotateTag=function(e,t,i,n,a,s){var o=e.xformed,p=new l(o.x,o.y,o.z),d=u(i,t),c=p.angle(d),h=p.cross(d).unit();0==c?(this.fixedCallbackTag=e,this.fixedCallback=a):this.fixedAnim={angle:-c,axis:h,t:n,t0:r(),cb:a,tag:e,active:s}},te.TagToFront=function(e,t,i,n){this.RotateTag(e,0,0,t,i,n)},U.Start=function(e,t,i){U.tc[e]=new U(e,t,i)},U.Linear=function(e,t){return t/e},U.Smooth=function(e,t){return.5-le(t*Math.PI/e)/2},U.Pause=function(e){K("Pause",e)},U.Resume=function(e){K("Resume",e)},U.Reload=function(e){K("Load",e)},U.Update=function(e){K("Update",e)},U.SetSpeed=function(e,t){return!(!i(t)||!U.tc[e]||isNaN(t[0])||isNaN(t[1]))&&(U.tc[e].SetSpeed(t),!0)},U.TagToFront=function(e,t){return!!i(t)&&(t.lat=t.lng=0,U.RotateTag(e,t))},U.RotateTag=function(e,t){if(i(t)&&U.tc[e]){isNaN(t.time)&&(t.time=500);var n=U.tc[e].FindTag(t);if(n)return U.tc[e].RotateTag(n,t.lat,t.lng,t.time,t.callback,t.active),!0}return!1},U.Delete=function(e){delete we[e],delete U.tc[e]},U.NextFrame=function(e){var t=window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;U.NextFrame=t?U.NextFrameRAF:U.NextFrameTimeout,U.NextFrame(e)},U.NextFrameRAF=function(){requestAnimationFrame(X)},U.NextFrameTimeout=function(e){setTimeout(X,e)},U.tc={},U.options={z1:2e4,z2:2e4,z0:2e-4,freezeActive:!1,freezeDecel:!1,activeCursor:"pointer",pulsateTo:1,pulsateTime:3,reverse:!1,depth:.5,maxSpeed:.05,minSpeed:0,decel:.95,interval:20,minBrightness:.1,maxBrightness:1,outlineColour:"#ffff99",outlineThickness:2,outlineOffset:5,outlineMethod:"outline",outlineRadius:0,textColour:"#ff99ff",textHeight:15,textFont:"Helvetica, Arial, sans-serif",shadow:"#000",shadowBlur:0,shadowOffset:[0,0],initial:null,hideTags:!0,zoom:1,weight:!1,weightMode:"size",weightFrom:null,weightSize:1,weightSizeMin:null,weightSizeMax:null,weightGradient:{0:"#f00",.33:"#ff0",.66:"#0f0",1:"#00f"},txtOpt:!0,txtScale:2,frontSelect:!1,wheelZoom:!0,zoomMin:.3,zoomMax:3,zoomStep:.05,shape:"sphere",lock:null,tooltip:null,tooltipDelay:300,tooltipClass:"tctooltip",radiusX:1,radiusY:1,radiusZ:1,stretchX:1,stretchY:1,offsetX:0,offsetY:0,shuffleTags:!1,noSelect:!1,noMouse:!1,imageScale:1,paused:!1,dragControl:!1,dragThreshold:4,centreFunc:a,splitWidth:0,animTiming:"Smooth",clickToFront:!1,fadeIn:0,padding:0,bgColour:null,bgRadius:0,bgOutline:null,bgOutlineThickness:0};for(Q in U.options)U[Q]=U.options[Q];window.TagCanvas=U,jQuery.fn.tagcanvas=function(t,i){var n={pause:function(){e(this).each(function(){K("Pause",e(this)[0].id)})},resume:function(){e(this).each(function(){K("Resume",e(this)[0].id)})},reload:function(){e(this).each(function(){K("Load",e(this)[0].id)})},update:function(){e(this).each(function(){K("Update",e(this)[0].id)})},tagtofront:function(){e(this).each(function(){U.TagToFront(e(this)[0].id,i)})},rotatetag:function(){e(this).each(function(){U.RotateTag(e(this)[0].id,i)})},delete:function(){e(this).each(function(){U.Delete(e(this)[0].id)})},setspeed:function(){e(this).each(function(){U.SetSpeed(e(this)[0].id,i)})}};return"string"==typeof t&&n[t]?(n[t].apply(this),this):(U.jquery=1,e(this).each(function(){U.Start(e(this)[0].id,i,t)}),U.started)},D("load",function(){U.loaded=1},window)}(jQuery);var swiper=new Swiper(".swiperSidebar",{prevButton:".swiper-button-prev",nextButton:".swiper-button-next",slidesPerView:1,paginationClickable:!0,spaceBetween:30}),autoplay=3e3,swiper=new Swiper(".swiperLatNews",{prevButton:".swiper-button-prev",nextButton:".swiper-button-next",pagination:".swiper-pagination",paginationClickable:!0,direction:"vertical",slidesPerView:3,autoplay:autoplay});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
