function moved(){var e=document.getElementById("progress"),t=1,n=autoplay/100,a=setInterval(function(){t>=100?clearInterval(a):(t++,e.style.width=t+"%")},n)}!function(e,t){"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){function n(e){var t=!!e&&"length"in e&&e.length,n=ae.type(e);return"function"!==n&&!ae.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function a(e,t,n){if(ae.isFunction(t))return ae.grep(e,function(e,a){return!!t.call(e,a,e)!==n});if(t.nodeType)return ae.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(fe.test(t))return ae.filter(t,e,n);t=ae.filter(t,e)}return ae.grep(e,function(e){return Z.call(t,e)>-1!==n})}function r(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function i(e){var t={};return ae.each(e.match(ye)||[],function(e,n){t[n]=!0}),t}function s(){$.removeEventListener("DOMContentLoaded",s),e.removeEventListener("load",s),ae.ready()}function o(){this.expando=ae.expando+o.uid++}function l(e,t,n){var a;if(void 0===n&&1===e.nodeType)if(a="data-"+t.replace(Ee,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(a))){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:Se.test(n)?ae.parseJSON(n):n)}catch(e){}Ce.set(e,t,n)}else n=void 0;return n}function p(e,t,n,a){var r,i=1,s=20,o=a?function(){return a.cur()}:function(){return ae.css(e,t,"")},l=o(),p=n&&n[3]||(ae.cssNumber[t]?"":"px"),u=(ae.cssNumber[t]||"px"!==p&&+l)&&ke.exec(ae.css(e,t));if(u&&u[3]!==p){p=p||u[3],n=n||[],u=+l||1;do{u/=i=i||".5",ae.style(e,t,u+p)}while(i!==(i=o()/l)&&1!==i&&--s)}return n&&(u=+u||+l||0,r=n[1]?u+(n[1]+1)*n[2]:+n[2],a&&(a.unit=p,a.start=u,a.end=r)),r}function u(e,t){var n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&ae.nodeName(e,t)?ae.merge([e],n):n}function d(e,t){for(var n=0,a=e.length;n<a;n++)Te.set(e[n],"globalEval",!t||Te.get(t[n],"globalEval"))}function c(e,t,n,a,r){for(var i,s,o,l,p,c,f=t.createDocumentFragment(),h=[],m=0,g=e.length;m<g;m++)if((i=e[m])||0===i)if("object"===ae.type(i))ae.merge(h,i.nodeType?[i]:i);else if(Ae.test(i)){for(s=s||f.appendChild(t.createElement("div")),o=(Le.exec(i)||["",""])[1].toLowerCase(),l=Ne[o]||Ne._default,s.innerHTML=l[1]+ae.htmlPrefilter(i)+l[2],c=l[0];c--;)s=s.lastChild;ae.merge(h,s.childNodes),(s=f.firstChild).textContent=""}else h.push(t.createTextNode(i));for(f.textContent="",m=0;i=h[m++];)if(a&&ae.inArray(i,a)>-1)r&&r.push(i);else if(p=ae.contains(i.ownerDocument,i),s=u(f.appendChild(i),"script"),p&&d(s),n)for(c=0;i=s[c++];)Ie.test(i.type||"")&&n.push(i);return f}function f(){return!0}function h(){return!1}function m(){try{return $.activeElement}catch(e){}}function g(e,t,n,a,r,i){var s,o;if("object"==typeof t){"string"!=typeof n&&(a=a||n,n=void 0);for(o in t)g(e,o,n,a,t[o],i);return e}if(null==a&&null==r?(r=n,a=n=void 0):null==r&&("string"==typeof n?(r=a,a=void 0):(r=a,a=n,n=void 0)),!1===r)r=h;else if(!r)return e;return 1===i&&(s=r,(r=function(e){return ae().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=ae.guid++)),e.each(function(){ae.event.add(this,t,r,a,n)})}function v(e,t){return ae.nodeName(e,"table")&&ae.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function y(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function w(e){var t=We.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function x(e,t){var n,a,r,i,s,o,l,p;if(1===t.nodeType){if(Te.hasData(e)&&(i=Te.access(e),s=Te.set(t,i),p=i.events)){delete s.handle,s.events={};for(r in p)for(n=0,a=p[r].length;n<a;n++)ae.event.add(t,r,p[r][n])}Ce.hasData(e)&&(o=Ce.access(e),l=ae.extend({},o),Ce.set(t,l))}}function b(e,t){var n=t.nodeName.toLowerCase();"input"===n&&De.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function T(e,t,n,a){t=U.apply([],t);var r,i,s,o,l,p,d=0,f=e.length,h=f-1,m=t[0],g=ae.isFunction(m);if(g||f>1&&"string"==typeof m&&!ne.checkClone&&Re.test(m))return e.each(function(r){var i=e.eq(r);g&&(t[0]=m.call(this,r,i.html())),T(i,t,n,a)});if(f&&(r=c(t,e[0].ownerDocument,!1,e,a),i=r.firstChild,1===r.childNodes.length&&(r=i),i||a)){for(o=(s=ae.map(u(r,"script"),y)).length;d<f;d++)l=r,d!==h&&(l=ae.clone(l,!0,!0),o&&ae.merge(s,u(l,"script"))),n.call(e[d],l,d);if(o)for(p=s[s.length-1].ownerDocument,ae.map(s,w),d=0;d<o;d++)l=s[d],Ie.test(l.type||"")&&!Te.access(l,"globalEval")&&ae.contains(p,l)&&(l.src?ae._evalUrl&&ae._evalUrl(l.src):ae.globalEval(l.textContent.replace(Xe,"")))}return e}function C(e,t,n){for(var a,r=t?ae.filter(t,e):e,i=0;null!=(a=r[i]);i++)n||1!==a.nodeType||ae.cleanData(u(a)),a.parentNode&&(n&&ae.contains(a.ownerDocument,a)&&d(u(a,"script")),a.parentNode.removeChild(a));return e}function S(e,t){var n=ae(t.createElement(e)).appendTo(t.body),a=ae.css(n[0],"display");return n.detach(),a}function E(e){var t=$,n=Ye[e];return n||("none"!==(n=S(e,t))&&n||((t=(Ge=(Ge||ae("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement))[0].contentDocument).write(),t.close(),n=S(e,t),Ge.detach()),Ye[e]=n),n}function M(e,t,n){var a,r,i,s,o=e.style;return n=n||Ve(e),""!==(s=n?n.getPropertyValue(t)||n[t]:void 0)&&void 0!==s||ae.contains(e.ownerDocument,e)||(s=ae.style(e,t)),n&&!ne.pixelMarginRight()&&_e.test(s)&&Fe.test(t)&&(a=o.width,r=o.minWidth,i=o.maxWidth,o.minWidth=o.maxWidth=o.width=s,s=n.width,o.width=a,o.minWidth=r,o.maxWidth=i),void 0!==s?s+"":s}function k(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}function z(e){if(e in et)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=Je.length;n--;)if((e=Je[n]+t)in et)return e}function P(e,t,n){var a=ke.exec(t);return a?Math.max(0,a[2]-(n||0))+(a[3]||"px"):t}function D(e,t,n,a,r){for(var i=n===(a?"border":"content")?4:"width"===t?1:0,s=0;i<4;i+=2)"margin"===n&&(s+=ae.css(e,n+ze[i],!0,r)),a?("content"===n&&(s-=ae.css(e,"padding"+ze[i],!0,r)),"margin"!==n&&(s-=ae.css(e,"border"+ze[i]+"Width",!0,r))):(s+=ae.css(e,"padding"+ze[i],!0,r),"padding"!==n&&(s+=ae.css(e,"border"+ze[i]+"Width",!0,r)));return s}function L(e,t,n){var a=!0,r="width"===t?e.offsetWidth:e.offsetHeight,i=Ve(e),s="border-box"===ae.css(e,"boxSizing",!1,i);if(r<=0||null==r){if(((r=M(e,t,i))<0||null==r)&&(r=e.style[t]),_e.test(r))return r;a=s&&(ne.boxSizingReliable()||r===e.style[t]),r=parseFloat(r)||0}return r+D(e,t,n||(s?"border":"content"),a,i)+"px"}function I(e,t){for(var n,a,r,i=[],s=0,o=e.length;s<o;s++)(a=e[s]).style&&(i[s]=Te.get(a,"olddisplay"),n=a.style.display,t?(i[s]||"none"!==n||(a.style.display=""),""===a.style.display&&Pe(a)&&(i[s]=Te.access(a,"olddisplay",E(a.nodeName)))):(r=Pe(a),"none"===n&&r||Te.set(a,"olddisplay",r?n:ae.css(a,"display"))));for(s=0;s<o;s++)(a=e[s]).style&&(t&&"none"!==a.style.display&&""!==a.style.display||(a.style.display=t?i[s]||"":"none"));return e}function N(e,t,n,a,r){return new N.prototype.init(e,t,n,a,r)}function A(){return e.setTimeout(function(){tt=void 0}),tt=ae.now()}function H(e,t){var n,a=0,r={height:e};for(t=t?1:0;a<4;a+=2-t)r["margin"+(n=ze[a])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function B(e,t,n){for(var a,r=(q.tweeners[t]||[]).concat(q.tweeners["*"]),i=0,s=r.length;i<s;i++)if(a=r[i].call(n,t,e))return a}function O(e,t){var n,a,r,i,s;for(n in e)if(a=ae.camelCase(n),r=t[a],i=e[n],ae.isArray(i)&&(r=i[1],i=e[n]=i[0]),n!==a&&(e[a]=i,delete e[n]),(s=ae.cssHooks[a])&&"expand"in s){i=s.expand(i),delete e[a];for(n in i)n in e||(e[n]=i[n],t[n]=r)}else t[a]=r}function q(e,t,n){var a,r,i=0,s=q.prefilters.length,o=ae.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var t=tt||A(),n=Math.max(0,p.startTime+p.duration-t),a=1-(n/p.duration||0),i=0,s=p.tweens.length;i<s;i++)p.tweens[i].run(a);return o.notifyWith(e,[p,a,n]),a<1&&s?n:(o.resolveWith(e,[p]),!1)},p=o.promise({elem:e,props:ae.extend({},t),opts:ae.extend(!0,{specialEasing:{},easing:ae.easing._default},n),originalProperties:t,originalOptions:n,startTime:tt||A(),duration:n.duration,tweens:[],createTween:function(t,n){var a=ae.Tween(e,p.opts,t,n,p.opts.specialEasing[t]||p.opts.easing);return p.tweens.push(a),a},stop:function(t){var n=0,a=t?p.tweens.length:0;if(r)return this;for(r=!0;n<a;n++)p.tweens[n].run(1);return t?(o.notifyWith(e,[p,1,0]),o.resolveWith(e,[p,t])):o.rejectWith(e,[p,t]),this}}),u=p.props;for(O(u,p.opts.specialEasing);i<s;i++)if(a=q.prefilters[i].call(p,e,u,p.opts))return ae.isFunction(a.stop)&&(ae._queueHooks(p.elem,p.opts.queue).stop=ae.proxy(a.stop,a)),a;return ae.map(u,B,p),ae.isFunction(p.opts.start)&&p.opts.start.call(e,p),ae.fx.timer(ae.extend(l,{elem:e,anim:p,queue:p.opts.queue})),p.progress(p.opts.progress).done(p.opts.done,p.opts.complete).fail(p.opts.fail).always(p.opts.always)}function j(e){return e.getAttribute&&e.getAttribute("class")||""}function R(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var a,r=0,i=t.toLowerCase().match(ye)||[];if(ae.isFunction(n))for(;a=i[r++];)"+"===a[0]?(a=a.slice(1)||"*",(e[a]=e[a]||[]).unshift(n)):(e[a]=e[a]||[]).push(n)}}function W(e,t,n,a){function r(o){var l;return i[o]=!0,ae.each(e[o]||[],function(e,o){var p=o(t,n,a);return"string"!=typeof p||s||i[p]?s?!(l=p):void 0:(t.dataTypes.unshift(p),r(p),!1)}),l}var i={},s=e===Ct;return r(t.dataTypes[0])||!i["*"]&&r("*")}function X(e,t){var n,a,r=ae.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:a||(a={}))[n]=t[n]);return a&&ae.extend(!0,e,a),e}function G(e,t,n){for(var a,r,i,s,o=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===a&&(a=e.mimeType||t.getResponseHeader("Content-Type"));if(a)for(r in o)if(o[r]&&o[r].test(a)){l.unshift(r);break}if(l[0]in n)i=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){i=r;break}s||(s=r)}i=i||s}if(i)return i!==l[0]&&l.unshift(i),n[i]}function Y(e,t,n,a){var r,i,s,o,l,p={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)p[s.toLowerCase()]=e.converters[s];for(i=u.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!l&&a&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=i,i=u.shift())if("*"===i)i=l;else if("*"!==l&&l!==i){if(!(s=p[l+" "+i]||p["* "+i]))for(r in p)if((o=r.split(" "))[1]===i&&(s=p[l+" "+o[0]]||p["* "+o[0]])){!0===s?s=p[r]:!0!==p[r]&&(i=o[0],u.unshift(o[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+i}}}return{state:"success",data:t}}function F(e,t,n,a){var r;if(ae.isArray(t))ae.each(t,function(t,r){n||kt.test(e)?a(e,r):F(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,a)});else if(n||"object"!==ae.type(t))a(e,t);else for(r in t)F(e+"["+r+"]",t[r],n,a)}function _(e){return ae.isWindow(e)?e:9===e.nodeType&&e.defaultView}var V=[],$=e.document,K=V.slice,U=V.concat,Q=V.push,Z=V.indexOf,J={},ee=J.toString,te=J.hasOwnProperty,ne={},ae=function(e,t){return new ae.fn.init(e,t)},re=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,ie=/^-ms-/,se=/-([\da-z])/gi,oe=function(e,t){return t.toUpperCase()};ae.fn=ae.prototype={jquery:"2.2.4",constructor:ae,selector:"",length:0,toArray:function(){return K.call(this)},get:function(e){return null!=e?e<0?this[e+this.length]:this[e]:K.call(this)},pushStack:function(e){var t=ae.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e){return ae.each(this,e)},map:function(e){return this.pushStack(ae.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(K.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:Q,sort:V.sort,splice:V.splice},ae.extend=ae.fn.extend=function(){var e,t,n,a,r,i,s=arguments[0]||{},o=1,l=arguments.length,p=!1;for("boolean"==typeof s&&(p=s,s=arguments[o]||{},o++),"object"==typeof s||ae.isFunction(s)||(s={}),o===l&&(s=this,o--);o<l;o++)if(null!=(e=arguments[o]))for(t in e)n=s[t],s!==(a=e[t])&&(p&&a&&(ae.isPlainObject(a)||(r=ae.isArray(a)))?(r?(r=!1,i=n&&ae.isArray(n)?n:[]):i=n&&ae.isPlainObject(n)?n:{},s[t]=ae.extend(p,i,a)):void 0!==a&&(s[t]=a));return s},ae.extend({expando:"jQuery"+("2.2.4"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===ae.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=e&&e.toString();return!ae.isArray(e)&&t-parseFloat(t)+1>=0},isPlainObject:function(e){var t;if("object"!==ae.type(e)||e.nodeType||ae.isWindow(e))return!1;if(e.constructor&&!te.call(e,"constructor")&&!te.call(e.constructor.prototype||{},"isPrototypeOf"))return!1;for(t in e);return void 0===t||te.call(e,t)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?J[ee.call(e)]||"object":typeof e},globalEval:function(e){var t,n=eval;(e=ae.trim(e))&&(1===e.indexOf("use strict")?((t=$.createElement("script")).text=e,$.head.appendChild(t).parentNode.removeChild(t)):n(e))},camelCase:function(e){return e.replace(ie,"ms-").replace(se,oe)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t){var a,r=0;if(n(e))for(a=e.length;r<a&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(re,"")},makeArray:function(e,t){var a=t||[];return null!=e&&(n(Object(e))?ae.merge(a,"string"==typeof e?[e]:e):Q.call(a,e)),a},inArray:function(e,t,n){return null==t?-1:Z.call(t,e,n)},merge:function(e,t){for(var n=+t.length,a=0,r=e.length;a<n;a++)e[r++]=t[a];return e.length=r,e},grep:function(e,t,n){for(var a=[],r=0,i=e.length,s=!n;r<i;r++)!t(e[r],r)!==s&&a.push(e[r]);return a},map:function(e,t,a){var r,i,s=0,o=[];if(n(e))for(r=e.length;s<r;s++)null!=(i=t(e[s],s,a))&&o.push(i);else for(s in e)null!=(i=t(e[s],s,a))&&o.push(i);return U.apply([],o)},guid:1,proxy:function(e,t){var n,a,r;if("string"==typeof t&&(n=e[t],t=e,e=n),ae.isFunction(e))return a=K.call(arguments,2),r=function(){return e.apply(t||this,a.concat(K.call(arguments)))},r.guid=e.guid=e.guid||ae.guid++,r},now:Date.now,support:ne}),"function"==typeof Symbol&&(ae.fn[Symbol.iterator]=V[Symbol.iterator]),ae.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){J["[object "+t+"]"]=t.toLowerCase()});var le=function(e){function t(e,t,n,a){var r,i,s,o,p,d,c,f,h=t&&t.ownerDocument,m=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==m&&9!==m&&11!==m)return n;if(!a&&((t?t.ownerDocument||t:q)!==D&&P(t),t=t||D,I)){if(11!==m&&(d=me.exec(e)))if(r=d[1]){if(9===m){if(!(s=t.getElementById(r)))return n;if(s.id===r)return n.push(s),n}else if(h&&(s=h.getElementById(r))&&B(t,s)&&s.id===r)return n.push(s),n}else{if(d[2])return U.apply(n,t.getElementsByTagName(e)),n;if((r=d[3])&&w.getElementsByClassName&&t.getElementsByClassName)return U.apply(n,t.getElementsByClassName(r)),n}if(w.qsa&&!G[e+" "]&&(!N||!N.test(e))){if(1!==m)h=t,f=e;else if("object"!==t.nodeName.toLowerCase()){for((o=t.getAttribute("id"))?o=o.replace(ve,"\\$&"):t.setAttribute("id",o=O),i=(c=C(e)).length,p=ue.test(o)?"#"+o:"[id='"+o+"']";i--;)c[i]=p+" "+u(c[i]);f=c.join(","),h=ge.test(e)&&l(t.parentNode)||t}if(f)try{return U.apply(n,h.querySelectorAll(f)),n}catch(e){}finally{o===O&&t.removeAttribute("id")}}}return E(e.replace(ie,"$1"),t,n,a)}function n(){function e(n,a){return t.push(n+" ")>x.cacheLength&&delete e[t.shift()],e[n+" "]=a}var t=[];return e}function a(e){return e[O]=!0,e}function r(e){var t=D.createElement("div");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function i(e,t){for(var n=e.split("|"),a=n.length;a--;)x.attrHandle[n[a]]=t}function s(e,t){var n=t&&e,a=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||F)-(~e.sourceIndex||F);if(a)return a;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function o(e){return a(function(t){return t=+t,a(function(n,a){for(var r,i=e([],n.length,t),s=i.length;s--;)n[r=i[s]]&&(n[r]=!(a[r]=n[r]))})})}function l(e){return e&&void 0!==e.getElementsByTagName&&e}function p(){}function u(e){for(var t=0,n=e.length,a="";t<n;t++)a+=e[t].value;return a}function d(e,t,n){var a=t.dir,r=n&&"parentNode"===a,i=R++;return t.first?function(t,n,i){for(;t=t[a];)if(1===t.nodeType||r)return e(t,n,i)}:function(t,n,s){var o,l,p,u=[j,i];if(s){for(;t=t[a];)if((1===t.nodeType||r)&&e(t,n,s))return!0}else for(;t=t[a];)if(1===t.nodeType||r){if(p=t[O]||(t[O]={}),l=p[t.uniqueID]||(p[t.uniqueID]={}),(o=l[a])&&o[0]===j&&o[1]===i)return u[2]=o[2];if(l[a]=u,u[2]=e(t,n,s))return!0}}}function c(e){return e.length>1?function(t,n,a){for(var r=e.length;r--;)if(!e[r](t,n,a))return!1;return!0}:e[0]}function f(e,n,a){for(var r=0,i=n.length;r<i;r++)t(e,n[r],a);return a}function h(e,t,n,a,r){for(var i,s=[],o=0,l=e.length,p=null!=t;o<l;o++)(i=e[o])&&(n&&!n(i,a,r)||(s.push(i),p&&t.push(o)));return s}function m(e,t,n,r,i,s){return r&&!r[O]&&(r=m(r)),i&&!i[O]&&(i=m(i,s)),a(function(a,s,o,l){var p,u,d,c=[],m=[],g=s.length,v=a||f(t||"*",o.nodeType?[o]:o,[]),y=!e||!a&&t?v:h(v,c,e,o,l),w=n?i||(a?e:g||r)?[]:s:y;if(n&&n(y,w,o,l),r)for(p=h(w,m),r(p,[],o,l),u=p.length;u--;)(d=p[u])&&(w[m[u]]=!(y[m[u]]=d));if(a){if(i||e){if(i){for(p=[],u=w.length;u--;)(d=w[u])&&p.push(y[u]=d);i(null,w=[],p,l)}for(u=w.length;u--;)(d=w[u])&&(p=i?Z(a,d):c[u])>-1&&(a[p]=!(s[p]=d))}}else w=h(w===s?w.splice(g,w.length):w),i?i(null,s,w,l):U.apply(s,w)})}function g(e){for(var t,n,a,r=e.length,i=x.relative[e[0].type],s=i||x.relative[" "],o=i?1:0,l=d(function(e){return e===t},s,!0),p=d(function(e){return Z(t,e)>-1},s,!0),f=[function(e,n,a){var r=!i&&(a||n!==M)||((t=n).nodeType?l(e,n,a):p(e,n,a));return t=null,r}];o<r;o++)if(n=x.relative[e[o].type])f=[d(c(f),n)];else{if((n=x.filter[e[o].type].apply(null,e[o].matches))[O]){for(a=++o;a<r&&!x.relative[e[a].type];a++);return m(o>1&&c(f),o>1&&u(e.slice(0,o-1).concat({value:" "===e[o-2].type?"*":""})).replace(ie,"$1"),n,o<a&&g(e.slice(o,a)),a<r&&g(e=e.slice(a)),a<r&&u(e))}f.push(n)}return c(f)}function v(e,n){var r=n.length>0,i=e.length>0,s=function(a,s,o,l,p){var u,d,c,f=0,m="0",g=a&&[],v=[],y=M,w=a||i&&x.find.TAG("*",p),b=j+=null==y?1:Math.random()||.1,T=w.length;for(p&&(M=s===D||s||p);m!==T&&null!=(u=w[m]);m++){if(i&&u){for(d=0,s||u.ownerDocument===D||(P(u),o=!I);c=e[d++];)if(c(u,s||D,o)){l.push(u);break}p&&(j=b)}r&&((u=!c&&u)&&f--,a&&g.push(u))}if(f+=m,r&&m!==f){for(d=0;c=n[d++];)c(g,v,s,o);if(a){if(f>0)for(;m--;)g[m]||v[m]||(v[m]=$.call(l));v=h(v)}U.apply(l,v),p&&!a&&v.length>0&&f+n.length>1&&t.uniqueSort(l)}return p&&(j=b,M=y),g};return r?a(s):s}var y,w,x,b,T,C,S,E,M,k,z,P,D,L,I,N,A,H,B,O="sizzle"+1*new Date,q=e.document,j=0,R=0,W=n(),X=n(),G=n(),Y=function(e,t){return e===t&&(z=!0),0},F=1<<31,_={}.hasOwnProperty,V=[],$=V.pop,K=V.push,U=V.push,Q=V.slice,Z=function(e,t){for(var n=0,a=e.length;n<a;n++)if(e[n]===t)return n;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ee="[\\x20\\t\\r\\n\\f]",te="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",ne="\\["+ee+"*("+te+")(?:"+ee+"*([*^$|!~]?=)"+ee+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+te+"))|)"+ee+"*\\]",ae=":("+te+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ne+")*)|.*)\\)|)",re=new RegExp(ee+"+","g"),ie=new RegExp("^"+ee+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ee+"+$","g"),se=new RegExp("^"+ee+"*,"+ee+"*"),oe=new RegExp("^"+ee+"*([>+~]|"+ee+")"+ee+"*"),le=new RegExp("="+ee+"*([^\\]'\"]*?)"+ee+"*\\]","g"),pe=new RegExp(ae),ue=new RegExp("^"+te+"$"),de={ID:new RegExp("^#("+te+")"),CLASS:new RegExp("^\\.("+te+")"),TAG:new RegExp("^("+te+"|[*])"),ATTR:new RegExp("^"+ne),PSEUDO:new RegExp("^"+ae),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ee+"*(even|odd|(([+-]|)(\\d*)n|)"+ee+"*(?:([+-]|)"+ee+"*(\\d+)|))"+ee+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+ee+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ee+"*((?:-\\d)?\\d*)"+ee+"*\\)|)(?=[^-]|$)","i")},ce=/^(?:input|select|textarea|button)$/i,fe=/^h\d$/i,he=/^[^{]+\{\s*\[native \w/,me=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ge=/[+~]/,ve=/'|\\/g,ye=new RegExp("\\\\([\\da-f]{1,6}"+ee+"?|("+ee+")|.)","ig"),we=function(e,t,n){var a="0x"+t-65536;return a!==a||n?t:a<0?String.fromCharCode(a+65536):String.fromCharCode(a>>10|55296,1023&a|56320)},xe=function(){P()};try{U.apply(V=Q.call(q.childNodes),q.childNodes),V[q.childNodes.length].nodeType}catch(e){U={apply:V.length?function(e,t){K.apply(e,Q.call(t))}:function(e,t){for(var n=e.length,a=0;e[n++]=t[a++];);e.length=n-1}}}w=t.support={},T=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},P=t.setDocument=function(e){var t,n,a=e?e.ownerDocument||e:q;return a!==D&&9===a.nodeType&&a.documentElement?(D=a,L=D.documentElement,I=!T(D),(n=D.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",xe,!1):n.attachEvent&&n.attachEvent("onunload",xe)),w.attributes=r(function(e){return e.className="i",!e.getAttribute("className")}),w.getElementsByTagName=r(function(e){return e.appendChild(D.createComment("")),!e.getElementsByTagName("*").length}),w.getElementsByClassName=he.test(D.getElementsByClassName),w.getById=r(function(e){return L.appendChild(e).id=O,!D.getElementsByName||!D.getElementsByName(O).length}),w.getById?(x.find.ID=function(e,t){if(void 0!==t.getElementById&&I){var n=t.getElementById(e);return n?[n]:[]}},x.filter.ID=function(e){var t=e.replace(ye,we);return function(e){return e.getAttribute("id")===t}}):(delete x.find.ID,x.filter.ID=function(e){var t=e.replace(ye,we);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),x.find.TAG=w.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):w.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,a=[],r=0,i=t.getElementsByTagName(e);if("*"===e){for(;n=i[r++];)1===n.nodeType&&a.push(n);return a}return i},x.find.CLASS=w.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&I)return t.getElementsByClassName(e)},A=[],N=[],(w.qsa=he.test(D.querySelectorAll))&&(r(function(e){L.appendChild(e).innerHTML="<a id='"+O+"'></a><select id='"+O+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&N.push("[*^$]="+ee+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||N.push("\\["+ee+"*(?:value|"+J+")"),e.querySelectorAll("[id~="+O+"-]").length||N.push("~="),e.querySelectorAll(":checked").length||N.push(":checked"),e.querySelectorAll("a#"+O+"+*").length||N.push(".#.+[+~]")}),r(function(e){var t=D.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&N.push("name"+ee+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||N.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),N.push(",.*:")})),(w.matchesSelector=he.test(H=L.matches||L.webkitMatchesSelector||L.mozMatchesSelector||L.oMatchesSelector||L.msMatchesSelector))&&r(function(e){w.disconnectedMatch=H.call(e,"div"),H.call(e,"[s!='']:x"),A.push("!=",ae)}),N=N.length&&new RegExp(N.join("|")),A=A.length&&new RegExp(A.join("|")),t=he.test(L.compareDocumentPosition),B=t||he.test(L.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,a=t&&t.parentNode;return e===a||!(!a||1!==a.nodeType||!(n.contains?n.contains(a):e.compareDocumentPosition&&16&e.compareDocumentPosition(a)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},Y=t?function(e,t){if(e===t)return z=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!w.sortDetached&&t.compareDocumentPosition(e)===n?e===D||e.ownerDocument===q&&B(q,e)?-1:t===D||t.ownerDocument===q&&B(q,t)?1:k?Z(k,e)-Z(k,t):0:4&n?-1:1)}:function(e,t){if(e===t)return z=!0,0;var n,a=0,r=e.parentNode,i=t.parentNode,o=[e],l=[t];if(!r||!i)return e===D?-1:t===D?1:r?-1:i?1:k?Z(k,e)-Z(k,t):0;if(r===i)return s(e,t);for(n=e;n=n.parentNode;)o.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;o[a]===l[a];)a++;return a?s(o[a],l[a]):o[a]===q?-1:l[a]===q?1:0},D):D},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==D&&P(e),n=n.replace(le,"='$1']"),w.matchesSelector&&I&&!G[n+" "]&&(!A||!A.test(n))&&(!N||!N.test(n)))try{var a=H.call(e,n);if(a||w.disconnectedMatch||e.document&&11!==e.document.nodeType)return a}catch(e){}return t(n,D,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==D&&P(e),B(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==D&&P(e);var n=x.attrHandle[t.toLowerCase()],a=n&&_.call(x.attrHandle,t.toLowerCase())?n(e,t,!I):void 0;return void 0!==a?a:w.attributes||!I?e.getAttribute(t):(a=e.getAttributeNode(t))&&a.specified?a.value:null},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],a=0,r=0;if(z=!w.detectDuplicates,k=!w.sortStable&&e.slice(0),e.sort(Y),z){for(;t=e[r++];)t===e[r]&&(a=n.push(r));for(;a--;)e.splice(n[a],1)}return k=null,e},b=t.getText=function(e){var t,n="",a=0,r=e.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=b(e)}else if(3===r||4===r)return e.nodeValue}else for(;t=e[a++];)n+=b(t);return n},(x=t.selectors={cacheLength:50,createPseudo:a,match:de,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ye,we),e[3]=(e[3]||e[4]||e[5]||"").replace(ye,we),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return de.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&pe.test(n)&&(t=C(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ye,we).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=W[e+" "];return t||(t=new RegExp("(^|"+ee+")"+e+"("+ee+"|$)"))&&W(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,a){return function(r){var i=t.attr(r,e);return null==i?"!="===n:!n||(i+="","="===n?i===a:"!="===n?i!==a:"^="===n?a&&0===i.indexOf(a):"*="===n?a&&i.indexOf(a)>-1:"$="===n?a&&i.slice(-a.length)===a:"~="===n?(" "+i.replace(re," ")+" ").indexOf(a)>-1:"|="===n&&(i===a||i.slice(0,a.length+1)===a+"-"))}},CHILD:function(e,t,n,a,r){var i="nth"!==e.slice(0,3),s="last"!==e.slice(-4),o="of-type"===t;return 1===a&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var p,u,d,c,f,h,m=i!==s?"nextSibling":"previousSibling",g=t.parentNode,v=o&&t.nodeName.toLowerCase(),y=!l&&!o,w=!1;if(g){if(i){for(;m;){for(c=t;c=c[m];)if(o?c.nodeName.toLowerCase()===v:1===c.nodeType)return!1;h=m="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?g.firstChild:g.lastChild],s&&y){for(w=(f=(p=(u=(d=(c=g)[O]||(c[O]={}))[c.uniqueID]||(d[c.uniqueID]={}))[e]||[])[0]===j&&p[1])&&p[2],c=f&&g.childNodes[f];c=++f&&c&&c[m]||(w=f=0)||h.pop();)if(1===c.nodeType&&++w&&c===t){u[e]=[j,f,w];break}}else if(y&&(w=f=(p=(u=(d=(c=t)[O]||(c[O]={}))[c.uniqueID]||(d[c.uniqueID]={}))[e]||[])[0]===j&&p[1]),!1===w)for(;(c=++f&&c&&c[m]||(w=f=0)||h.pop())&&((o?c.nodeName.toLowerCase()!==v:1!==c.nodeType)||!++w||(y&&((u=(d=c[O]||(c[O]={}))[c.uniqueID]||(d[c.uniqueID]={}))[e]=[j,w]),c!==t)););return(w-=r)===a||w%a==0&&w/a>=0}}},PSEUDO:function(e,n){var r,i=x.pseudos[e]||x.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return i[O]?i(n):i.length>1?(r=[e,e,"",n],x.setFilters.hasOwnProperty(e.toLowerCase())?a(function(e,t){for(var a,r=i(e,n),s=r.length;s--;)e[a=Z(e,r[s])]=!(t[a]=r[s])}):function(e){return i(e,0,r)}):i}},pseudos:{not:a(function(e){var t=[],n=[],r=S(e.replace(ie,"$1"));return r[O]?a(function(e,t,n,a){for(var i,s=r(e,null,a,[]),o=e.length;o--;)(i=s[o])&&(e[o]=!(t[o]=i))}):function(e,a,i){return t[0]=e,r(t,null,i,n),t[0]=null,!n.pop()}}),has:a(function(e){return function(n){return t(e,n).length>0}}),contains:a(function(e){return e=e.replace(ye,we),function(t){return(t.textContent||t.innerText||b(t)).indexOf(e)>-1}}),lang:a(function(e){return ue.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(ye,we).toLowerCase(),function(t){var n;do{if(n=I?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===L},focus:function(e){return e===D.activeElement&&(!D.hasFocus||D.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return!1===e.disabled},disabled:function(e){return!0===e.disabled},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return fe.test(e.nodeName)},input:function(e){return ce.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:o(function(){return[0]}),last:o(function(e,t){return[t-1]}),eq:o(function(e,t,n){return[n<0?n+t:n]}),even:o(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:o(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:o(function(e,t,n){for(var a=n<0?n+t:n;--a>=0;)e.push(a);return e}),gt:o(function(e,t,n){for(var a=n<0?n+t:n;++a<t;)e.push(a);return e})}}).pseudos.nth=x.pseudos.eq;for(y in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[y]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(y);for(y in{submit:!0,reset:!0})x.pseudos[y]=function(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}(y);return p.prototype=x.filters=x.pseudos,x.setFilters=new p,C=t.tokenize=function(e,n){var a,r,i,s,o,l,p,u=X[e+" "];if(u)return n?0:u.slice(0);for(o=e,l=[],p=x.preFilter;o;){a&&!(r=se.exec(o))||(r&&(o=o.slice(r[0].length)||o),l.push(i=[])),a=!1,(r=oe.exec(o))&&(a=r.shift(),i.push({value:a,type:r[0].replace(ie," ")}),o=o.slice(a.length));for(s in x.filter)!(r=de[s].exec(o))||p[s]&&!(r=p[s](r))||(a=r.shift(),i.push({value:a,type:s,matches:r}),o=o.slice(a.length));if(!a)break}return n?o.length:o?t.error(e):X(e,l).slice(0)},S=t.compile=function(e,t){var n,a=[],r=[],i=G[e+" "];if(!i){for(t||(t=C(e)),n=t.length;n--;)(i=g(t[n]))[O]?a.push(i):r.push(i);(i=G(e,v(r,a))).selector=e}return i},E=t.select=function(e,t,n,a){var r,i,s,o,p,d="function"==typeof e&&e,c=!a&&C(e=d.selector||e);if(n=n||[],1===c.length){if((i=c[0]=c[0].slice(0)).length>2&&"ID"===(s=i[0]).type&&w.getById&&9===t.nodeType&&I&&x.relative[i[1].type]){if(!(t=(x.find.ID(s.matches[0].replace(ye,we),t)||[])[0]))return n;d&&(t=t.parentNode),e=e.slice(i.shift().value.length)}for(r=de.needsContext.test(e)?0:i.length;r--&&(s=i[r],!x.relative[o=s.type]);)if((p=x.find[o])&&(a=p(s.matches[0].replace(ye,we),ge.test(i[0].type)&&l(t.parentNode)||t))){if(i.splice(r,1),!(e=a.length&&u(i)))return U.apply(n,a),n;break}}return(d||S(e,c))(a,t,!I,n,!t||ge.test(e)&&l(t.parentNode)||t),n},w.sortStable=O.split("").sort(Y).join("")===O,w.detectDuplicates=!!z,P(),w.sortDetached=r(function(e){return 1&e.compareDocumentPosition(D.createElement("div"))}),r(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||i("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),w.attributes&&r(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||i("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),r(function(e){return null==e.getAttribute("disabled")})||i(J,function(e,t,n){var a;if(!n)return!0===e[t]?t.toLowerCase():(a=e.getAttributeNode(t))&&a.specified?a.value:null}),t}(e);ae.find=le,ae.expr=le.selectors,ae.expr[":"]=ae.expr.pseudos,ae.uniqueSort=ae.unique=le.uniqueSort,ae.text=le.getText,ae.isXMLDoc=le.isXML,ae.contains=le.contains;var pe=function(e,t,n){for(var a=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&ae(e).is(n))break;a.push(e)}return a},ue=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},de=ae.expr.match.needsContext,ce=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,fe=/^.[^:#\[\.,]*$/;ae.filter=function(e,t,n){var a=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===a.nodeType?ae.find.matchesSelector(a,e)?[a]:[]:ae.find.matches(e,ae.grep(t,function(e){return 1===e.nodeType}))},ae.fn.extend({find:function(e){var t,n=this.length,a=[],r=this;if("string"!=typeof e)return this.pushStack(ae(e).filter(function(){for(t=0;t<n;t++)if(ae.contains(r[t],this))return!0}));for(t=0;t<n;t++)ae.find(e,r[t],a);return a=this.pushStack(n>1?ae.unique(a):a),a.selector=this.selector?this.selector+" "+e:e,a},filter:function(e){return this.pushStack(a(this,e||[],!1))},not:function(e){return this.pushStack(a(this,e||[],!0))},is:function(e){return!!a(this,"string"==typeof e&&de.test(e)?ae(e):e||[],!1).length}});var he,me=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;(ae.fn.init=function(e,t,n){var a,r;if(!e)return this;if(n=n||he,"string"==typeof e){if(!(a="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:me.exec(e))||!a[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(a[1]){if(t=t instanceof ae?t[0]:t,ae.merge(this,ae.parseHTML(a[1],t&&t.nodeType?t.ownerDocument||t:$,!0)),ce.test(a[1])&&ae.isPlainObject(t))for(a in t)ae.isFunction(this[a])?this[a](t[a]):this.attr(a,t[a]);return this}return(r=$.getElementById(a[2]))&&r.parentNode&&(this.length=1,this[0]=r),this.context=$,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):ae.isFunction(e)?void 0!==n.ready?n.ready(e):e(ae):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),ae.makeArray(e,this))}).prototype=ae.fn,he=ae($);var ge=/^(?:parents|prev(?:Until|All))/,ve={children:!0,contents:!0,next:!0,prev:!0};ae.fn.extend({has:function(e){var t=ae(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(ae.contains(this,t[e]))return!0})},closest:function(e,t){for(var n,a=0,r=this.length,i=[],s=de.test(e)||"string"!=typeof e?ae(e,t||this.context):0;a<r;a++)for(n=this[a];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&ae.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?ae.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?Z.call(ae(e),this[0]):Z.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(ae.uniqueSort(ae.merge(this.get(),ae(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),ae.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return pe(e,"parentNode")},parentsUntil:function(e,t,n){return pe(e,"parentNode",n)},next:function(e){return r(e,"nextSibling")},prev:function(e){return r(e,"previousSibling")},nextAll:function(e){return pe(e,"nextSibling")},prevAll:function(e){return pe(e,"previousSibling")},nextUntil:function(e,t,n){return pe(e,"nextSibling",n)},prevUntil:function(e,t,n){return pe(e,"previousSibling",n)},siblings:function(e){return ue((e.parentNode||{}).firstChild,e)},children:function(e){return ue(e.firstChild)},contents:function(e){return e.contentDocument||ae.merge([],e.childNodes)}},function(e,t){ae.fn[e]=function(n,a){var r=ae.map(this,t,n);return"Until"!==e.slice(-5)&&(a=n),a&&"string"==typeof a&&(r=ae.filter(a,r)),this.length>1&&(ve[e]||ae.uniqueSort(r),ge.test(e)&&r.reverse()),this.pushStack(r)}});var ye=/\S+/g;ae.Callbacks=function(e){e="string"==typeof e?i(e):ae.extend({},e);var t,n,a,r,s=[],o=[],l=-1,p=function(){for(r=e.once,a=t=!0;o.length;l=-1)for(n=o.shift();++l<s.length;)!1===s[l].apply(n[0],n[1])&&e.stopOnFalse&&(l=s.length,n=!1);e.memory||(n=!1),t=!1,r&&(s=n?[]:"")},u={add:function(){return s&&(n&&!t&&(l=s.length-1,o.push(n)),function t(n){ae.each(n,function(n,a){ae.isFunction(a)?e.unique&&u.has(a)||s.push(a):a&&a.length&&"string"!==ae.type(a)&&t(a)})}(arguments),n&&!t&&p()),this},remove:function(){return ae.each(arguments,function(e,t){for(var n;(n=ae.inArray(t,s,n))>-1;)s.splice(n,1),n<=l&&l--}),this},has:function(e){return e?ae.inArray(e,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return r=o=[],s=n="",this},disabled:function(){return!s},lock:function(){return r=o=[],n||(s=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=[e,(n=n||[]).slice?n.slice():n],o.push(n),t||p()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!a}};return u},ae.extend({Deferred:function(e){var t=[["resolve","done",ae.Callbacks("once memory"),"resolved"],["reject","fail",ae.Callbacks("once memory"),"rejected"],["notify","progress",ae.Callbacks("memory")]],n="pending",a={state:function(){return n},always:function(){return r.done(arguments).fail(arguments),this},then:function(){var e=arguments;return ae.Deferred(function(n){ae.each(t,function(t,i){var s=ae.isFunction(e[t])&&e[t];r[i[1]](function(){var e=s&&s.apply(this,arguments);e&&ae.isFunction(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this===a?n.promise():this,s?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?ae.extend(e,a):a}},r={};return a.pipe=a.then,ae.each(t,function(e,i){var s=i[2],o=i[3];a[i[1]]=s.add,o&&s.add(function(){n=o},t[1^e][2].disable,t[2][2].lock),r[i[0]]=function(){return r[i[0]+"With"](this===r?a:this,arguments),this},r[i[0]+"With"]=s.fireWith}),a.promise(r),e&&e.call(r,r),r},when:function(e){var t,n,a,r=0,i=K.call(arguments),s=i.length,o=1!==s||e&&ae.isFunction(e.promise)?s:0,l=1===o?e:ae.Deferred(),p=function(e,n,a){return function(r){n[e]=this,a[e]=arguments.length>1?K.call(arguments):r,a===t?l.notifyWith(n,a):--o||l.resolveWith(n,a)}};if(s>1)for(t=new Array(s),n=new Array(s),a=new Array(s);r<s;r++)i[r]&&ae.isFunction(i[r].promise)?i[r].promise().progress(p(r,n,t)).done(p(r,a,i)).fail(l.reject):--o;return o||l.resolveWith(a,i),l.promise()}});var we;ae.fn.ready=function(e){return ae.ready.promise().done(e),this},ae.extend({isReady:!1,readyWait:1,holdReady:function(e){e?ae.readyWait++:ae.ready(!0)},ready:function(e){(!0===e?--ae.readyWait:ae.isReady)||(ae.isReady=!0,!0!==e&&--ae.readyWait>0||(we.resolveWith($,[ae]),ae.fn.triggerHandler&&(ae($).triggerHandler("ready"),ae($).off("ready"))))}}),ae.ready.promise=function(t){return we||(we=ae.Deferred(),"complete"===$.readyState||"loading"!==$.readyState&&!$.documentElement.doScroll?e.setTimeout(ae.ready):($.addEventListener("DOMContentLoaded",s),e.addEventListener("load",s))),we.promise(t)},ae.ready.promise();var xe=function(e,t,n,a,r,i,s){var o=0,l=e.length,p=null==n;if("object"===ae.type(n)){r=!0;for(o in n)xe(e,t,o,n[o],!0,i,s)}else if(void 0!==a&&(r=!0,ae.isFunction(a)||(s=!0),p&&(s?(t.call(e,a),t=null):(p=t,t=function(e,t,n){return p.call(ae(e),n)})),t))for(;o<l;o++)t(e[o],n,s?a:a.call(e[o],o,t(e[o],n)));return r?e:p?t.call(e):l?t(e[0],n):i},be=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};o.uid=1,o.prototype={register:function(e,t){var n=t||{};return e.nodeType?e[this.expando]=n:Object.defineProperty(e,this.expando,{value:n,writable:!0,configurable:!0}),e[this.expando]},cache:function(e){if(!be(e))return{};var t=e[this.expando];return t||(t={},be(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var a,r=this.cache(e);if("string"==typeof t)r[t]=n;else for(a in t)r[a]=t[a];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][t]},access:function(e,t,n){var a;return void 0===t||t&&"string"==typeof t&&void 0===n?void 0!==(a=this.get(e,t))?a:this.get(e,ae.camelCase(t)):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,a,r,i=e[this.expando];if(void 0!==i){if(void 0===t)this.register(e);else{ae.isArray(t)?a=t.concat(t.map(ae.camelCase)):(r=ae.camelCase(t),a=t in i?[t,r]:(a=r)in i?[a]:a.match(ye)||[]),n=a.length;for(;n--;)delete i[a[n]]}(void 0===t||ae.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!ae.isEmptyObject(t)}};var Te=new o,Ce=new o,Se=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Ee=/[A-Z]/g;ae.extend({hasData:function(e){return Ce.hasData(e)||Te.hasData(e)},data:function(e,t,n){return Ce.access(e,t,n)},removeData:function(e,t){Ce.remove(e,t)},_data:function(e,t,n){return Te.access(e,t,n)},_removeData:function(e,t){Te.remove(e,t)}}),ae.fn.extend({data:function(e,t){var n,a,r,i=this[0],s=i&&i.attributes;if(void 0===e){if(this.length&&(r=Ce.get(i),1===i.nodeType&&!Te.get(i,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(a=s[n].name).indexOf("data-")&&(a=ae.camelCase(a.slice(5)),l(i,a,r[a]));Te.set(i,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each(function(){Ce.set(this,e)}):xe(this,function(t){var n,a;if(i&&void 0===t){if(void 0!==(n=Ce.get(i,e)||Ce.get(i,e.replace(Ee,"-$&").toLowerCase())))return n;if(a=ae.camelCase(e),void 0!==(n=Ce.get(i,a)))return n;if(void 0!==(n=l(i,a,void 0)))return n}else a=ae.camelCase(e),this.each(function(){var n=Ce.get(this,a);Ce.set(this,a,t),e.indexOf("-")>-1&&void 0!==n&&Ce.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Ce.remove(this,e)})}}),ae.extend({queue:function(e,t,n){var a;if(e)return t=(t||"fx")+"queue",a=Te.get(e,t),n&&(!a||ae.isArray(n)?a=Te.access(e,t,ae.makeArray(n)):a.push(n)),a||[]},dequeue:function(e,t){t=t||"fx";var n=ae.queue(e,t),a=n.length,r=n.shift(),i=ae._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),a--),r&&("fx"===t&&n.unshift("inprogress"),delete i.stop,r.call(e,function(){ae.dequeue(e,t)},i)),!a&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Te.get(e,n)||Te.access(e,n,{empty:ae.Callbacks("once memory").add(function(){Te.remove(e,[t+"queue",n])})})}}),ae.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?ae.queue(this[0],e):void 0===t?this:this.each(function(){var n=ae.queue(this,e,t);ae._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&ae.dequeue(this,e)})},dequeue:function(e){return this.each(function(){ae.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,a=1,r=ae.Deferred(),i=this,s=this.length,o=function(){--a||r.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=Te.get(i[s],e+"queueHooks"))&&n.empty&&(a++,n.empty.add(o));return o(),r.promise(t)}});var Me=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ke=new RegExp("^(?:([+-])=|)("+Me+")([a-z%]*)$","i"),ze=["Top","Right","Bottom","Left"],Pe=function(e,t){return e=t||e,"none"===ae.css(e,"display")||!ae.contains(e.ownerDocument,e)},De=/^(?:checkbox|radio)$/i,Le=/<([\w:-]+)/,Ie=/^$|\/(?:java|ecma)script/i,Ne={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ne.optgroup=Ne.option,Ne.tbody=Ne.tfoot=Ne.colgroup=Ne.caption=Ne.thead,Ne.th=Ne.td;var Ae=/<|&#?\w+;/;!function(){var e=$.createDocumentFragment().appendChild($.createElement("div")),t=$.createElement("input");t.setAttribute("type","radio"),t.setAttribute("checked","checked"),t.setAttribute("name","t"),e.appendChild(t),ne.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",ne.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var He=/^key/,Be=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Oe=/^([^.]*)(?:\.(.+)|)/;ae.event={global:{},add:function(e,t,n,a,r){var i,s,o,l,p,u,d,c,f,h,m,g=Te.get(e);if(g)for(n.handler&&(n=(i=n).handler,r=i.selector),n.guid||(n.guid=ae.guid++),(l=g.events)||(l=g.events={}),(s=g.handle)||(s=g.handle=function(t){return void 0!==ae&&ae.event.triggered!==t.type?ae.event.dispatch.apply(e,arguments):void 0}),p=(t=(t||"").match(ye)||[""]).length;p--;)f=m=(o=Oe.exec(t[p])||[])[1],h=(o[2]||"").split(".").sort(),f&&(d=ae.event.special[f]||{},f=(r?d.delegateType:d.bindType)||f,d=ae.event.special[f]||{},u=ae.extend({type:f,origType:m,data:a,handler:n,guid:n.guid,selector:r,needsContext:r&&ae.expr.match.needsContext.test(r),namespace:h.join(".")},i),(c=l[f])||((c=l[f]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,a,h,s)||e.addEventListener&&e.addEventListener(f,s)),d.add&&(d.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),r?c.splice(c.delegateCount++,0,u):c.push(u),ae.event.global[f]=!0)},remove:function(e,t,n,a,r){var i,s,o,l,p,u,d,c,f,h,m,g=Te.hasData(e)&&Te.get(e);if(g&&(l=g.events)){for(p=(t=(t||"").match(ye)||[""]).length;p--;)if(o=Oe.exec(t[p])||[],f=m=o[1],h=(o[2]||"").split(".").sort(),f){for(d=ae.event.special[f]||{},c=l[f=(a?d.delegateType:d.bindType)||f]||[],o=o[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=i=c.length;i--;)u=c[i],!r&&m!==u.origType||n&&n.guid!==u.guid||o&&!o.test(u.namespace)||a&&a!==u.selector&&("**"!==a||!u.selector)||(c.splice(i,1),u.selector&&c.delegateCount--,d.remove&&d.remove.call(e,u));s&&!c.length&&(d.teardown&&!1!==d.teardown.call(e,h,g.handle)||ae.removeEvent(e,f,g.handle),delete l[f])}else for(f in l)ae.event.remove(e,f+t[p],n,a,!0);ae.isEmptyObject(l)&&Te.remove(e,"handle events")}},dispatch:function(e){e=ae.event.fix(e);var t,n,a,r,i,s=[],o=K.call(arguments),l=(Te.get(this,"events")||{})[e.type]||[],p=ae.event.special[e.type]||{};if(o[0]=e,e.delegateTarget=this,!p.preDispatch||!1!==p.preDispatch.call(this,e)){for(s=ae.event.handlers.call(this,e,l),t=0;(r=s[t++])&&!e.isPropagationStopped();)for(e.currentTarget=r.elem,n=0;(i=r.handlers[n++])&&!e.isImmediatePropagationStopped();)e.rnamespace&&!e.rnamespace.test(i.namespace)||(e.handleObj=i,e.data=i.data,void 0!==(a=((ae.event.special[i.origType]||{}).handle||i.handler).apply(r.elem,o))&&!1===(e.result=a)&&(e.preventDefault(),e.stopPropagation()));return p.postDispatch&&p.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,a,r,i,s=[],o=t.delegateCount,l=e.target;if(o&&l.nodeType&&("click"!==e.type||isNaN(e.button)||e.button<1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&(!0!==l.disabled||"click"!==e.type)){for(a=[],n=0;n<o;n++)void 0===a[r=(i=t[n]).selector+" "]&&(a[r]=i.needsContext?ae(r,this).index(l)>-1:ae.find(r,this,null,[l]).length),a[r]&&a.push(i);a.length&&s.push({elem:l,handlers:a})}return o<t.length&&s.push({elem:this,handlers:t.slice(o)}),s},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,a,r,i=t.button;return null==e.pageX&&null!=t.clientX&&(a=(n=e.target.ownerDocument||$).documentElement,r=n.body,e.pageX=t.clientX+(a&&a.scrollLeft||r&&r.scrollLeft||0)-(a&&a.clientLeft||r&&r.clientLeft||0),e.pageY=t.clientY+(a&&a.scrollTop||r&&r.scrollTop||0)-(a&&a.clientTop||r&&r.clientTop||0)),e.which||void 0===i||(e.which=1&i?1:2&i?3:4&i?2:0),e}},fix:function(e){if(e[ae.expando])return e;var t,n,a,r=e.type,i=e,s=this.fixHooks[r];for(s||(this.fixHooks[r]=s=Be.test(r)?this.mouseHooks:He.test(r)?this.keyHooks:{}),a=s.props?this.props.concat(s.props):this.props,e=new ae.Event(i),t=a.length;t--;)e[n=a[t]]=i[n];return e.target||(e.target=$),3===e.target.nodeType&&(e.target=e.target.parentNode),s.filter?s.filter(e,i):e},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==m()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===m()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&ae.nodeName(this,"input"))return this.click(),!1},_default:function(e){return ae.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},ae.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},ae.Event=function(e,t){if(!(this instanceof ae.Event))return new ae.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?f:h):this.type=e,t&&ae.extend(this,t),this.timeStamp=e&&e.timeStamp||ae.now(),this[ae.expando]=!0},ae.Event.prototype={constructor:ae.Event,isDefaultPrevented:h,isPropagationStopped:h,isImmediatePropagationStopped:h,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=f,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=f,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=f,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},ae.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){ae.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,a=this,r=e.relatedTarget,i=e.handleObj;return r&&(r===a||ae.contains(a,r))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}}),ae.fn.extend({on:function(e,t,n,a){return g(this,e,t,n,a)},one:function(e,t,n,a){return g(this,e,t,n,a,1)},off:function(e,t,n){var a,r;if(e&&e.preventDefault&&e.handleObj)return a=e.handleObj,ae(e.delegateTarget).off(a.namespace?a.origType+"."+a.namespace:a.origType,a.selector,a.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=h),this.each(function(){ae.event.remove(this,e,n,t)})}});var qe=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,je=/<script|<style|<link/i,Re=/checked\s*(?:[^=]|=\s*.checked.)/i,We=/^true\/(.*)/,Xe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;ae.extend({htmlPrefilter:function(e){return e.replace(qe,"<$1></$2>")},clone:function(e,t,n){var a,r,i,s,o=e.cloneNode(!0),l=ae.contains(e.ownerDocument,e);if(!(ne.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||ae.isXMLDoc(e)))for(s=u(o),a=0,r=(i=u(e)).length;a<r;a++)b(i[a],s[a]);if(t)if(n)for(i=i||u(e),s=s||u(o),a=0,r=i.length;a<r;a++)x(i[a],s[a]);else x(e,o);return(s=u(o,"script")).length>0&&d(s,!l&&u(e,"script")),o},cleanData:function(e){for(var t,n,a,r=ae.event.special,i=0;void 0!==(n=e[i]);i++)if(be(n)){if(t=n[Te.expando]){if(t.events)for(a in t.events)r[a]?ae.event.remove(n,a):ae.removeEvent(n,a,t.handle);n[Te.expando]=void 0}n[Ce.expando]&&(n[Ce.expando]=void 0)}}}),ae.fn.extend({domManip:T,detach:function(e){return C(this,e,!0)},remove:function(e){return C(this,e)},text:function(e){return xe(this,function(e){return void 0===e?ae.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return T(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||v(this,e).appendChild(e)})},prepend:function(){return T(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=v(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return T(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return T(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(ae.cleanData(u(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return ae.clone(this,e,t)})},html:function(e){return xe(this,function(e){var t=this[0]||{},n=0,a=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!je.test(e)&&!Ne[(Le.exec(e)||["",""])[1].toLowerCase()]){e=ae.htmlPrefilter(e);try{for(;n<a;n++)1===(t=this[n]||{}).nodeType&&(ae.cleanData(u(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return T(this,arguments,function(t){var n=this.parentNode;ae.inArray(this,e)<0&&(ae.cleanData(u(this)),n&&n.replaceChild(t,this))},e)}}),ae.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){ae.fn[e]=function(e){for(var n,a=[],r=ae(e),i=r.length-1,s=0;s<=i;s++)n=s===i?this:this.clone(!0),ae(r[s])[t](n),Q.apply(a,n.get());return this.pushStack(a)}});var Ge,Ye={HTML:"block",BODY:"block"},Fe=/^margin/,_e=new RegExp("^("+Me+")(?!px)[a-z%]+$","i"),Ve=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)},$e=function(e,t,n,a){var r,i,s={};for(i in t)s[i]=e.style[i],e.style[i]=t[i];r=n.apply(e,a||[]);for(i in t)e.style[i]=s[i];return r},Ke=$.documentElement;!function(){function t(){o.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",o.innerHTML="",Ke.appendChild(s);var t=e.getComputedStyle(o);n="1%"!==t.top,i="2px"===t.marginLeft,a="4px"===t.width,o.style.marginRight="50%",r="4px"===t.marginRight,Ke.removeChild(s)}var n,a,r,i,s=$.createElement("div"),o=$.createElement("div");o.style&&(o.style.backgroundClip="content-box",o.cloneNode(!0).style.backgroundClip="",ne.clearCloneStyle="content-box"===o.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(o),ae.extend(ne,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return null==a&&t(),a},pixelMarginRight:function(){return null==a&&t(),r},reliableMarginLeft:function(){return null==a&&t(),i},reliableMarginRight:function(){var t,n=o.appendChild($.createElement("div"));return n.style.cssText=o.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",n.style.marginRight=n.style.width="0",o.style.width="1px",Ke.appendChild(s),t=!parseFloat(e.getComputedStyle(n).marginRight),Ke.removeChild(s),o.removeChild(n),t}}))}();var Ue=/^(none|table(?!-c[ea]).+)/,Qe={position:"absolute",visibility:"hidden",display:"block"},Ze={letterSpacing:"0",fontWeight:"400"},Je=["Webkit","O","Moz","ms"],et=$.createElement("div").style;ae.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=M(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,a){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,i,s,o=ae.camelCase(t),l=e.style;if(t=ae.cssProps[o]||(ae.cssProps[o]=z(o)||o),s=ae.cssHooks[t]||ae.cssHooks[o],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(e,!1,a))?r:l[t];"string"==(i=typeof n)&&(r=ke.exec(n))&&r[1]&&(n=p(e,t,r),i="number"),null!=n&&n===n&&("number"===i&&(n+=r&&r[3]||(ae.cssNumber[o]?"":"px")),ne.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,a))||(l[t]=n))}},css:function(e,t,n,a){var r,i,s,o=ae.camelCase(t);return t=ae.cssProps[o]||(ae.cssProps[o]=z(o)||o),(s=ae.cssHooks[t]||ae.cssHooks[o])&&"get"in s&&(r=s.get(e,!0,n)),void 0===r&&(r=M(e,t,a)),"normal"===r&&t in Ze&&(r=Ze[t]),""===n||n?(i=parseFloat(r),!0===n||isFinite(i)?i||0:r):r}}),ae.each(["height","width"],function(e,t){ae.cssHooks[t]={get:function(e,n,a){if(n)return Ue.test(ae.css(e,"display"))&&0===e.offsetWidth?$e(e,Qe,function(){return L(e,t,a)}):L(e,t,a)},set:function(e,n,a){var r,i=a&&Ve(e),s=a&&D(e,t,a,"border-box"===ae.css(e,"boxSizing",!1,i),i);return s&&(r=ke.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=ae.css(e,t)),P(0,n,s)}}}),ae.cssHooks.marginLeft=k(ne.reliableMarginLeft,function(e,t){if(t)return(parseFloat(M(e,"marginLeft"))||e.getBoundingClientRect().left-$e(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),ae.cssHooks.marginRight=k(ne.reliableMarginRight,function(e,t){if(t)return $e(e,{display:"inline-block"},M,[e,"marginRight"])}),ae.each({margin:"",padding:"",border:"Width"},function(e,t){ae.cssHooks[e+t]={expand:function(n){for(var a=0,r={},i="string"==typeof n?n.split(" "):[n];a<4;a++)r[e+ze[a]+t]=i[a]||i[a-2]||i[0];return r}},Fe.test(e)||(ae.cssHooks[e+t].set=P)}),ae.fn.extend({css:function(e,t){return xe(this,function(e,t,n){var a,r,i={},s=0;if(ae.isArray(t)){for(a=Ve(e),r=t.length;s<r;s++)i[t[s]]=ae.css(e,t[s],!1,a);return i}return void 0!==n?ae.style(e,t,n):ae.css(e,t)},e,t,arguments.length>1)},show:function(){return I(this,!0)},hide:function(){return I(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Pe(this)?ae(this).show():ae(this).hide()})}}),ae.Tween=N,N.prototype={constructor:N,init:function(e,t,n,a,r,i){this.elem=e,this.prop=n,this.easing=r||ae.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=a,this.unit=i||(ae.cssNumber[n]?"":"px")},cur:function(){var e=N.propHooks[this.prop];return e&&e.get?e.get(this):N.propHooks._default.get(this)},run:function(e){var t,n=N.propHooks[this.prop];return this.options.duration?this.pos=t=ae.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):N.propHooks._default.set(this),this}},N.prototype.init.prototype=N.prototype,N.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=ae.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){ae.fx.step[e.prop]?ae.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[ae.cssProps[e.prop]]&&!ae.cssHooks[e.prop]?e.elem[e.prop]=e.now:ae.style(e.elem,e.prop,e.now+e.unit)}}},N.propHooks.scrollTop=N.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},ae.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},ae.fx=N.prototype.init,ae.fx.step={};var tt,nt,at=/^(?:toggle|show|hide)$/,rt=/queueHooks$/;ae.Animation=ae.extend(q,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return p(n.elem,e,ke.exec(t),n),n}]},tweener:function(e,t){ae.isFunction(e)?(t=e,e=["*"]):e=e.match(ye);for(var n,a=0,r=e.length;a<r;a++)n=e[a],q.tweeners[n]=q.tweeners[n]||[],q.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var a,r,i,s,o,l,p,u=this,d={},c=e.style,f=e.nodeType&&Pe(e),h=Te.get(e,"fxshow");n.queue||(null==(o=ae._queueHooks(e,"fx")).unqueued&&(o.unqueued=0,l=o.empty.fire,o.empty.fire=function(){o.unqueued||l()}),o.unqueued++,u.always(function(){u.always(function(){o.unqueued--,ae.queue(e,"fx").length||o.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[c.overflow,c.overflowX,c.overflowY],"inline"===("none"===(p=ae.css(e,"display"))?Te.get(e,"olddisplay")||E(e.nodeName):p)&&"none"===ae.css(e,"float")&&(c.display="inline-block")),n.overflow&&(c.overflow="hidden",u.always(function(){c.overflow=n.overflow[0],c.overflowX=n.overflow[1],c.overflowY=n.overflow[2]}));for(a in t)if(r=t[a],at.exec(r)){if(delete t[a],i=i||"toggle"===r,r===(f?"hide":"show")){if("show"!==r||!h||void 0===h[a])continue;f=!0}d[a]=h&&h[a]||ae.style(e,a)}else p=void 0;if(ae.isEmptyObject(d))"inline"===("none"===p?E(e.nodeName):p)&&(c.display=p);else{h?"hidden"in h&&(f=h.hidden):h=Te.access(e,"fxshow",{}),i&&(h.hidden=!f),f?ae(e).show():u.done(function(){ae(e).hide()}),u.done(function(){var t;Te.remove(e,"fxshow");for(t in d)ae.style(e,t,d[t])});for(a in d)s=B(f?h[a]:0,a,u),a in h||(h[a]=s.start,f&&(s.end=s.start,s.start="width"===a||"height"===a?1:0))}}],prefilter:function(e,t){t?q.prefilters.unshift(e):q.prefilters.push(e)}}),ae.speed=function(e,t,n){var a=e&&"object"==typeof e?ae.extend({},e):{complete:n||!n&&t||ae.isFunction(e)&&e,duration:e,easing:n&&t||t&&!ae.isFunction(t)&&t};return a.duration=ae.fx.off?0:"number"==typeof a.duration?a.duration:a.duration in ae.fx.speeds?ae.fx.speeds[a.duration]:ae.fx.speeds._default,null!=a.queue&&!0!==a.queue||(a.queue="fx"),a.old=a.complete,a.complete=function(){ae.isFunction(a.old)&&a.old.call(this),a.queue&&ae.dequeue(this,a.queue)},a},ae.fn.extend({fadeTo:function(e,t,n,a){return this.filter(Pe).css("opacity",0).show().end().animate({opacity:t},e,n,a)},animate:function(e,t,n,a){var r=ae.isEmptyObject(e),i=ae.speed(t,n,a),s=function(){var t=q(this,ae.extend({},e),i);(r||Te.get(this,"finish"))&&t.stop(!0)};return s.finish=s,r||!1===i.queue?this.each(s):this.queue(i.queue,s)},stop:function(e,t,n){var a=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,r=null!=e&&e+"queueHooks",i=ae.timers,s=Te.get(this);if(r)s[r]&&s[r].stop&&a(s[r]);else for(r in s)s[r]&&s[r].stop&&rt.test(r)&&a(s[r]);for(r=i.length;r--;)i[r].elem!==this||null!=e&&i[r].queue!==e||(i[r].anim.stop(n),t=!1,i.splice(r,1));!t&&n||ae.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=Te.get(this),a=n[e+"queue"],r=n[e+"queueHooks"],i=ae.timers,s=a?a.length:0;for(n.finish=!0,ae.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<s;t++)a[t]&&a[t].finish&&a[t].finish.call(this);delete n.finish})}}),ae.each(["toggle","show","hide"],function(e,t){var n=ae.fn[t];ae.fn[t]=function(e,a,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(H(t,!0),e,a,r)}}),ae.each({slideDown:H("show"),slideUp:H("hide"),slideToggle:H("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){ae.fn[e]=function(e,n,a){return this.animate(t,e,n,a)}}),ae.timers=[],ae.fx.tick=function(){var e,t=0,n=ae.timers;for(tt=ae.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||ae.fx.stop(),tt=void 0},ae.fx.timer=function(e){ae.timers.push(e),e()?ae.fx.start():ae.timers.pop()},ae.fx.interval=13,ae.fx.start=function(){nt||(nt=e.setInterval(ae.fx.tick,ae.fx.interval))},ae.fx.stop=function(){e.clearInterval(nt),nt=null},ae.fx.speeds={slow:600,fast:200,_default:400},ae.fn.delay=function(t,n){return t=ae.fx?ae.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,a){var r=e.setTimeout(n,t);a.stop=function(){e.clearTimeout(r)}})},function(){var e=$.createElement("input"),t=$.createElement("select"),n=t.appendChild($.createElement("option"));e.type="checkbox",ne.checkOn=""!==e.value,ne.optSelected=n.selected,t.disabled=!0,ne.optDisabled=!n.disabled,(e=$.createElement("input")).value="t",e.type="radio",ne.radioValue="t"===e.value}();var it,st=ae.expr.attrHandle;ae.fn.extend({attr:function(e,t){return xe(this,ae.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){ae.removeAttr(this,e)})}}),ae.extend({attr:function(e,t,n){var a,r,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?ae.prop(e,t,n):(1===i&&ae.isXMLDoc(e)||(t=t.toLowerCase(),r=ae.attrHooks[t]||(ae.expr.match.bool.test(t)?it:void 0)),void 0!==n?null===n?void ae.removeAttr(e,t):r&&"set"in r&&void 0!==(a=r.set(e,n,t))?a:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(a=r.get(e,t))?a:null==(a=ae.find.attr(e,t))?void 0:a)},attrHooks:{type:{set:function(e,t){if(!ne.radioValue&&"radio"===t&&ae.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,a,r=0,i=t&&t.match(ye);if(i&&1===e.nodeType)for(;n=i[r++];)a=ae.propFix[n]||n,ae.expr.match.bool.test(n)&&(e[a]=!1),e.removeAttribute(n)}}),it={set:function(e,t,n){return!1===t?ae.removeAttr(e,n):e.setAttribute(n,n),n}},ae.each(ae.expr.match.bool.source.match(/\w+/g),function(e,t){var n=st[t]||ae.find.attr;st[t]=function(e,t,a){var r,i;return a||(i=st[t],st[t]=r,r=null!=n(e,t,a)?t.toLowerCase():null,st[t]=i),r}});var ot=/^(?:input|select|textarea|button)$/i,lt=/^(?:a|area)$/i;ae.fn.extend({prop:function(e,t){return xe(this,ae.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[ae.propFix[e]||e]})}}),ae.extend({prop:function(e,t,n){var a,r,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&ae.isXMLDoc(e)||(t=ae.propFix[t]||t,r=ae.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(a=r.set(e,n,t))?a:e[t]=n:r&&"get"in r&&null!==(a=r.get(e,t))?a:e[t]},propHooks:{tabIndex:{get:function(e){var t=ae.find.attr(e,"tabindex");return t?parseInt(t,10):ot.test(e.nodeName)||lt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),ne.optSelected||(ae.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),ae.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){ae.propFix[this.toLowerCase()]=this});var pt=/[\t\r\n\f]/g;ae.fn.extend({addClass:function(e){var t,n,a,r,i,s,o,l=0;if(ae.isFunction(e))return this.each(function(t){ae(this).addClass(e.call(this,t,j(this)))});if("string"==typeof e&&e)for(t=e.match(ye)||[];n=this[l++];)if(r=j(n),a=1===n.nodeType&&(" "+r+" ").replace(pt," ")){for(s=0;i=t[s++];)a.indexOf(" "+i+" ")<0&&(a+=i+" ");r!==(o=ae.trim(a))&&n.setAttribute("class",o)}return this},removeClass:function(e){var t,n,a,r,i,s,o,l=0;if(ae.isFunction(e))return this.each(function(t){ae(this).removeClass(e.call(this,t,j(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(ye)||[];n=this[l++];)if(r=j(n),a=1===n.nodeType&&(" "+r+" ").replace(pt," ")){for(s=0;i=t[s++];)for(;a.indexOf(" "+i+" ")>-1;)a=a.replace(" "+i+" "," ");r!==(o=ae.trim(a))&&n.setAttribute("class",o)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):ae.isFunction(e)?this.each(function(n){ae(this).toggleClass(e.call(this,n,j(this),t),t)}):this.each(function(){var t,a,r,i;if("string"===n)for(a=0,r=ae(this),i=e.match(ye)||[];t=i[a++];)r.hasClass(t)?r.removeClass(t):r.addClass(t);else void 0!==e&&"boolean"!==n||((t=j(this))&&Te.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Te.get(this,"__className__")||""))})},hasClass:function(e){var t,n,a=0;for(t=" "+e+" ";n=this[a++];)if(1===n.nodeType&&(" "+j(n)+" ").replace(pt," ").indexOf(t)>-1)return!0;return!1}});var ut=/\r/g,dt=/[\x20\t\r\n\f]+/g;ae.fn.extend({val:function(e){var t,n,a,r=this[0];{if(arguments.length)return a=ae.isFunction(e),this.each(function(n){var r;1===this.nodeType&&(null==(r=a?e.call(this,n,ae(this).val()):e)?r="":"number"==typeof r?r+="":ae.isArray(r)&&(r=ae.map(r,function(e){return null==e?"":e+""})),(t=ae.valHooks[this.type]||ae.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))});if(r)return(t=ae.valHooks[r.type]||ae.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(ut,""):null==n?"":n}}}),ae.extend({valHooks:{option:{get:function(e){var t=ae.find.attr(e,"value");return null!=t?t:ae.trim(ae.text(e)).replace(dt," ")}},select:{get:function(e){for(var t,n,a=e.options,r=e.selectedIndex,i="select-one"===e.type||r<0,s=i?null:[],o=i?r+1:a.length,l=r<0?o:i?r:0;l<o;l++)if(((n=a[l]).selected||l===r)&&(ne.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!ae.nodeName(n.parentNode,"optgroup"))){if(t=ae(n).val(),i)return t;s.push(t)}return s},set:function(e,t){for(var n,a,r=e.options,i=ae.makeArray(t),s=r.length;s--;)((a=r[s]).selected=ae.inArray(ae.valHooks.option.get(a),i)>-1)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),ae.each(["radio","checkbox"],function(){ae.valHooks[this]={set:function(e,t){if(ae.isArray(t))return e.checked=ae.inArray(ae(e).val(),t)>-1}},ne.checkOn||(ae.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var ct=/^(?:focusinfocus|focusoutblur)$/;ae.extend(ae.event,{trigger:function(t,n,a,r){var i,s,o,l,p,u,d,c=[a||$],f=te.call(t,"type")?t.type:t,h=te.call(t,"namespace")?t.namespace.split("."):[];if(s=o=a=a||$,3!==a.nodeType&&8!==a.nodeType&&!ct.test(f+ae.event.triggered)&&(f.indexOf(".")>-1&&(f=(h=f.split(".")).shift(),h.sort()),p=f.indexOf(":")<0&&"on"+f,t=t[ae.expando]?t:new ae.Event(f,"object"==typeof t&&t),t.isTrigger=r?2:3,t.namespace=h.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=a),n=null==n?[t]:ae.makeArray(n,[t]),d=ae.event.special[f]||{},r||!d.trigger||!1!==d.trigger.apply(a,n))){if(!r&&!d.noBubble&&!ae.isWindow(a)){for(l=d.delegateType||f,ct.test(l+f)||(s=s.parentNode);s;s=s.parentNode)c.push(s),o=s;o===(a.ownerDocument||$)&&c.push(o.defaultView||o.parentWindow||e)}for(i=0;(s=c[i++])&&!t.isPropagationStopped();)t.type=i>1?l:d.bindType||f,(u=(Te.get(s,"events")||{})[t.type]&&Te.get(s,"handle"))&&u.apply(s,n),(u=p&&s[p])&&u.apply&&be(s)&&(t.result=u.apply(s,n),!1===t.result&&t.preventDefault());return t.type=f,r||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(c.pop(),n)||!be(a)||p&&ae.isFunction(a[f])&&!ae.isWindow(a)&&((o=a[p])&&(a[p]=null),ae.event.triggered=f,a[f](),ae.event.triggered=void 0,o&&(a[p]=o)),t.result}},simulate:function(e,t,n){var a=ae.extend(new ae.Event,n,{type:e,isSimulated:!0});ae.event.trigger(a,null,t)}}),ae.fn.extend({trigger:function(e,t){return this.each(function(){ae.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return ae.event.trigger(e,t,n,!0)}}),ae.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){ae.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),ae.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),ne.focusin="onfocusin"in e,ne.focusin||ae.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){ae.event.simulate(t,e.target,ae.event.fix(e))};ae.event.special[t]={setup:function(){var a=this.ownerDocument||this,r=Te.access(a,t);r||a.addEventListener(e,n,!0),Te.access(a,t,(r||0)+1)},teardown:function(){var a=this.ownerDocument||this,r=Te.access(a,t)-1;r?Te.access(a,t,r):(a.removeEventListener(e,n,!0),Te.remove(a,t))}}});var ft=e.location,ht=ae.now(),mt=/\?/;ae.parseJSON=function(e){return JSON.parse(e+"")},ae.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||ae.error("Invalid XML: "+t),n};var gt=/#.*$/,vt=/([?&])_=[^&]*/,yt=/^(.*?):[ \t]*([^\r\n]*)$/gm,wt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,xt=/^(?:GET|HEAD)$/,bt=/^\/\//,Tt={},Ct={},St="*/".concat("*"),Et=$.createElement("a");Et.href=ft.href,ae.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ft.href,type:"GET",isLocal:wt.test(ft.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":St,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":ae.parseJSON,"text xml":ae.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?X(X(e,ae.ajaxSettings),t):X(ae.ajaxSettings,e)},ajaxPrefilter:R(Tt),ajaxTransport:R(Ct),ajax:function(t,n){function a(t,n,a,o){var p,d,y,w,b,C=n;2!==x&&(x=2,l&&e.clearTimeout(l),r=void 0,s=o||"",T.readyState=t>0?4:0,p=t>=200&&t<300||304===t,a&&(w=G(c,T,a)),w=Y(c,w,T,p),p?(c.ifModified&&((b=T.getResponseHeader("Last-Modified"))&&(ae.lastModified[i]=b),(b=T.getResponseHeader("etag"))&&(ae.etag[i]=b)),204===t||"HEAD"===c.type?C="nocontent":304===t?C="notmodified":(C=w.state,d=w.data,p=!(y=w.error))):(y=C,!t&&C||(C="error",t<0&&(t=0))),T.status=t,T.statusText=(n||C)+"",p?m.resolveWith(f,[d,C,T]):m.rejectWith(f,[T,C,y]),T.statusCode(v),v=void 0,u&&h.trigger(p?"ajaxSuccess":"ajaxError",[T,c,p?d:y]),g.fireWith(f,[T,C]),u&&(h.trigger("ajaxComplete",[T,c]),--ae.active||ae.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var r,i,s,o,l,p,u,d,c=ae.ajaxSetup({},n),f=c.context||c,h=c.context&&(f.nodeType||f.jquery)?ae(f):ae.event,m=ae.Deferred(),g=ae.Callbacks("once memory"),v=c.statusCode||{},y={},w={},x=0,b="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(2===x){if(!o)for(o={};t=yt.exec(s);)o[t[1].toLowerCase()]=t[2];t=o[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===x?s:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return x||(e=w[n]=w[n]||e,y[e]=t),this},overrideMimeType:function(e){return x||(c.mimeType=e),this},statusCode:function(e){var t;if(e)if(x<2)for(t in e)v[t]=[v[t],e[t]];else T.always(e[T.status]);return this},abort:function(e){var t=e||b;return r&&r.abort(t),a(0,t),this}};if(m.promise(T).complete=g.add,T.success=T.done,T.error=T.fail,c.url=((t||c.url||ft.href)+"").replace(gt,"").replace(bt,ft.protocol+"//"),c.type=n.method||n.type||c.method||c.type,c.dataTypes=ae.trim(c.dataType||"*").toLowerCase().match(ye)||[""],null==c.crossDomain){p=$.createElement("a");try{p.href=c.url,p.href=p.href,c.crossDomain=Et.protocol+"//"+Et.host!=p.protocol+"//"+p.host}catch(e){c.crossDomain=!0}}if(c.data&&c.processData&&"string"!=typeof c.data&&(c.data=ae.param(c.data,c.traditional)),W(Tt,c,n,T),2===x)return T;(u=ae.event&&c.global)&&0==ae.active++&&ae.event.trigger("ajaxStart"),c.type=c.type.toUpperCase(),c.hasContent=!xt.test(c.type),i=c.url,c.hasContent||(c.data&&(i=c.url+=(mt.test(i)?"&":"?")+c.data,delete c.data),!1===c.cache&&(c.url=vt.test(i)?i.replace(vt,"$1_="+ht++):i+(mt.test(i)?"&":"?")+"_="+ht++)),c.ifModified&&(ae.lastModified[i]&&T.setRequestHeader("If-Modified-Since",ae.lastModified[i]),ae.etag[i]&&T.setRequestHeader("If-None-Match",ae.etag[i])),(c.data&&c.hasContent&&!1!==c.contentType||n.contentType)&&T.setRequestHeader("Content-Type",c.contentType),T.setRequestHeader("Accept",c.dataTypes[0]&&c.accepts[c.dataTypes[0]]?c.accepts[c.dataTypes[0]]+("*"!==c.dataTypes[0]?", "+St+"; q=0.01":""):c.accepts["*"]);for(d in c.headers)T.setRequestHeader(d,c.headers[d]);if(c.beforeSend&&(!1===c.beforeSend.call(f,T,c)||2===x))return T.abort();b="abort";for(d in{success:1,error:1,complete:1})T[d](c[d]);if(r=W(Ct,c,n,T)){if(T.readyState=1,u&&h.trigger("ajaxSend",[T,c]),2===x)return T;c.async&&c.timeout>0&&(l=e.setTimeout(function(){T.abort("timeout")},c.timeout));try{x=1,r.send(y,a)}catch(e){if(!(x<2))throw e;a(-1,e)}}else a(-1,"No Transport");return T},getJSON:function(e,t,n){return ae.get(e,t,n,"json")},getScript:function(e,t){return ae.get(e,void 0,t,"script")}}),ae.each(["get","post"],function(e,t){ae[t]=function(e,n,a,r){return ae.isFunction(n)&&(r=r||a,a=n,n=void 0),ae.ajax(ae.extend({url:e,type:t,dataType:r,data:n,success:a},ae.isPlainObject(e)&&e))}}),ae._evalUrl=function(e){return ae.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,throws:!0})},ae.fn.extend({wrapAll:function(e){var t;return ae.isFunction(e)?this.each(function(t){ae(this).wrapAll(e.call(this,t))}):(this[0]&&(t=ae(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this)},wrapInner:function(e){return ae.isFunction(e)?this.each(function(t){ae(this).wrapInner(e.call(this,t))}):this.each(function(){var t=ae(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=ae.isFunction(e);return this.each(function(n){ae(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){ae.nodeName(this,"body")||ae(this).replaceWith(this.childNodes)}).end()}}),ae.expr.filters.hidden=function(e){return!ae.expr.filters.visible(e)},ae.expr.filters.visible=function(e){return e.offsetWidth>0||e.offsetHeight>0||e.getClientRects().length>0};var Mt=/%20/g,kt=/\[\]$/,zt=/\r?\n/g,Pt=/^(?:submit|button|image|reset|file)$/i,Dt=/^(?:input|select|textarea|keygen)/i;ae.param=function(e,t){var n,a=[],r=function(e,t){t=ae.isFunction(t)?t():null==t?"":t,a[a.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=ae.ajaxSettings&&ae.ajaxSettings.traditional),ae.isArray(e)||e.jquery&&!ae.isPlainObject(e))ae.each(e,function(){r(this.name,this.value)});else for(n in e)F(n,e[n],t,r);return a.join("&").replace(Mt,"+")},ae.fn.extend({serialize:function(){return ae.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=ae.prop(this,"elements");return e?ae.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!ae(this).is(":disabled")&&Dt.test(this.nodeName)&&!Pt.test(e)&&(this.checked||!De.test(e))}).map(function(e,t){var n=ae(this).val();return null==n?null:ae.isArray(n)?ae.map(n,function(e){return{name:t.name,value:e.replace(zt,"\r\n")}}):{name:t.name,value:n.replace(zt,"\r\n")}}).get()}}),ae.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Lt={0:200,1223:204},It=ae.ajaxSettings.xhr();ne.cors=!!It&&"withCredentials"in It,ne.ajax=It=!!It,ae.ajaxTransport(function(t){var n,a;if(ne.cors||It&&!t.crossDomain)return{send:function(r,i){var s,o=t.xhr();if(o.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)o[s]=t.xhrFields[s];t.mimeType&&o.overrideMimeType&&o.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest");for(s in r)o.setRequestHeader(s,r[s]);n=function(e){return function(){n&&(n=a=o.onload=o.onerror=o.onabort=o.onreadystatechange=null,"abort"===e?o.abort():"error"===e?"number"!=typeof o.status?i(0,"error"):i(o.status,o.statusText):i(Lt[o.status]||o.status,o.statusText,"text"!==(o.responseType||"text")||"string"!=typeof o.responseText?{binary:o.response}:{text:o.responseText},o.getAllResponseHeaders()))}},o.onload=n(),a=o.onerror=n("error"),void 0!==o.onabort?o.onabort=a:o.onreadystatechange=function(){4===o.readyState&&e.setTimeout(function(){n&&a()})},n=n("abort");try{o.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),ae.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return ae.globalEval(e),e}}}),ae.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),ae.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(a,r){t=ae("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),$.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Nt=[],At=/(=)\?(?=&|$)|\?\?/;ae.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Nt.pop()||ae.expando+"_"+ht++;return this[e]=!0,e}}),ae.ajaxPrefilter("json jsonp",function(t,n,a){var r,i,s,o=!1!==t.jsonp&&(At.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&At.test(t.data)&&"data");if(o||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=ae.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,o?t[o]=t[o].replace(At,"$1"+r):!1!==t.jsonp&&(t.url+=(mt.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return s||ae.error(r+" was not called"),s[0]},t.dataTypes[0]="json",i=e[r],e[r]=function(){s=arguments},a.always(function(){void 0===i?ae(e).removeProp(r):e[r]=i,t[r]&&(t.jsonpCallback=n.jsonpCallback,Nt.push(r)),s&&ae.isFunction(i)&&i(s[0]),s=i=void 0}),"script"}),ae.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||$;var a=ce.exec(e),r=!n&&[];return a?[t.createElement(a[1])]:(a=c([e],t,r),r&&r.length&&ae(r).remove(),ae.merge([],a.childNodes))};var Ht=ae.fn.load;ae.fn.load=function(e,t,n){if("string"!=typeof e&&Ht)return Ht.apply(this,arguments);var a,r,i,s=this,o=e.indexOf(" ");return o>-1&&(a=ae.trim(e.slice(o)),e=e.slice(0,o)),ae.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),s.length>0&&ae.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){i=arguments,s.html(a?ae("<div>").append(ae.parseHTML(e)).find(a):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,i||[e.responseText,t,e])})}),this},ae.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){ae.fn[t]=function(e){return this.on(t,e)}}),ae.expr.filters.animated=function(e){return ae.grep(ae.timers,function(t){return e===t.elem}).length},ae.offset={setOffset:function(e,t,n){var a,r,i,s,o,l,p=ae.css(e,"position"),u=ae(e),d={};"static"===p&&(e.style.position="relative"),o=u.offset(),i=ae.css(e,"top"),l=ae.css(e,"left"),("absolute"===p||"fixed"===p)&&(i+l).indexOf("auto")>-1?(s=(a=u.position()).top,r=a.left):(s=parseFloat(i)||0,r=parseFloat(l)||0),ae.isFunction(t)&&(t=t.call(e,n,ae.extend({},o))),null!=t.top&&(d.top=t.top-o.top+s),null!=t.left&&(d.left=t.left-o.left+r),"using"in t?t.using.call(e,d):u.css(d)}},ae.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){ae.offset.setOffset(this,e,t)});var t,n,a=this[0],r={top:0,left:0},i=a&&a.ownerDocument;if(i)return t=i.documentElement,ae.contains(t,a)?(r=a.getBoundingClientRect(),n=_(i),{top:r.top+n.pageYOffset-t.clientTop,left:r.left+n.pageXOffset-t.clientLeft}):r},position:function(){if(this[0]){var e,t,n=this[0],a={top:0,left:0};return"fixed"===ae.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),ae.nodeName(e[0],"html")||(a=e.offset()),a.top+=ae.css(e[0],"borderTopWidth",!0),a.left+=ae.css(e[0],"borderLeftWidth",!0)),{top:t.top-a.top-ae.css(n,"marginTop",!0),left:t.left-a.left-ae.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===ae.css(e,"position");)e=e.offsetParent;return e||Ke})}}),ae.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;ae.fn[e]=function(a){return xe(this,function(e,a,r){var i=_(e);if(void 0===r)return i?i[t]:e[a];i?i.scrollTo(n?i.pageXOffset:r,n?r:i.pageYOffset):e[a]=r},e,a,arguments.length)}}),ae.each(["top","left"],function(e,t){ae.cssHooks[t]=k(ne.pixelPosition,function(e,n){if(n)return n=M(e,t),_e.test(n)?ae(e).position()[t]+"px":n})}),ae.each({Height:"height",Width:"width"},function(e,t){ae.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,a){ae.fn[a]=function(a,r){var i=arguments.length&&(n||"boolean"!=typeof a),s=n||(!0===a||!0===r?"margin":"border");return xe(this,function(t,n,a){var r;return ae.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(r=t.documentElement,Math.max(t.body["scroll"+e],r["scroll"+e],t.body["offset"+e],r["offset"+e],r["client"+e])):void 0===a?ae.css(t,n,s):ae.style(t,n,a,s)},t,i?a:void 0,i,null)}})}),ae.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,a){return this.on(t,e,n,a)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},size:function(){return this.length}}),ae.fn.andSelf=ae.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return ae});var Bt=e.jQuery,Ot=e.$;return ae.noConflict=function(t){return e.$===ae&&(e.$=Ot),t&&e.jQuery===ae&&(e.jQuery=Bt),ae},t||(e.jQuery=e.$=ae),ae}),function(){"use strict";var e,t=function(a,r){function i(e){return Math.floor(e)}function s(){var e=b.params.autoplay,t=b.slides.eq(b.activeIndex);t.attr("data-swiper-autoplay")&&(e=t.attr("data-swiper-autoplay")||b.params.autoplay),b.autoplayTimeoutId=setTimeout(function(){b.params.loop?(b.fixLoop(),b._slideNext(),b.emit("onAutoplay",b)):b.isEnd?r.autoplayStopOnLast?b.stopAutoplay():(b._slideTo(0),b.emit("onAutoplay",b)):(b._slideNext(),b.emit("onAutoplay",b))},e)}function o(t,n){var a=e(t.target);if(!a.is(n))if("string"==typeof n)a=a.parents(n);else if(n.nodeType){var r;return a.parents().each(function(e,t){t===n&&(r=n)}),r?n:void 0}if(0!==a.length)return a[0]}function l(e,t){t=t||{};var n=new(window.MutationObserver||window.WebkitMutationObserver)(function(e){e.forEach(function(e){b.onResize(!0),b.emit("onObserverUpdate",b,e)})});n.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),b.observers.push(n)}function p(e){e.originalEvent&&(e=e.originalEvent);var t=e.keyCode||e.charCode;if(!b.params.allowSwipeToNext&&(b.isHorizontal()&&39===t||!b.isHorizontal()&&40===t))return!1;if(!b.params.allowSwipeToPrev&&(b.isHorizontal()&&37===t||!b.isHorizontal()&&38===t))return!1;if(!(e.shiftKey||e.altKey||e.ctrlKey||e.metaKey||document.activeElement&&document.activeElement.nodeName&&("input"===document.activeElement.nodeName.toLowerCase()||"textarea"===document.activeElement.nodeName.toLowerCase()))){if(37===t||39===t||38===t||40===t){var n=!1;if(b.container.parents("."+b.params.slideClass).length>0&&0===b.container.parents("."+b.params.slideActiveClass).length)return;var a={left:window.pageXOffset,top:window.pageYOffset},r=window.innerWidth,i=window.innerHeight,s=b.container.offset();b.rtl&&(s.left=s.left-b.container[0].scrollLeft);for(var o=[[s.left,s.top],[s.left+b.width,s.top],[s.left,s.top+b.height],[s.left+b.width,s.top+b.height]],l=0;l<o.length;l++){var p=o[l];p[0]>=a.left&&p[0]<=a.left+r&&p[1]>=a.top&&p[1]<=a.top+i&&(n=!0)}if(!n)return}b.isHorizontal()?(37!==t&&39!==t||(e.preventDefault?e.preventDefault():e.returnValue=!1),(39===t&&!b.rtl||37===t&&b.rtl)&&b.slideNext(),(37===t&&!b.rtl||39===t&&b.rtl)&&b.slidePrev()):(38!==t&&40!==t||(e.preventDefault?e.preventDefault():e.returnValue=!1),40===t&&b.slideNext(),38===t&&b.slidePrev()),b.emit("onKeyPress",b,t)}}function u(e){var t=0,n=0,a=0,r=0;return"detail"in e&&(n=e.detail),"wheelDelta"in e&&(n=-e.wheelDelta/120),"wheelDeltaY"in e&&(n=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=n,n=0),a=10*t,r=10*n,"deltaY"in e&&(r=e.deltaY),"deltaX"in e&&(a=e.deltaX),(a||r)&&e.deltaMode&&(1===e.deltaMode?(a*=40,r*=40):(a*=800,r*=800)),a&&!t&&(t=a<1?-1:1),r&&!n&&(n=r<1?-1:1),{spinX:t,spinY:n,pixelX:a,pixelY:r}}function d(e){e.originalEvent&&(e=e.originalEvent);var t=0,n=b.rtl?-1:1,a=u(e);if(b.params.mousewheelForceToAxis)if(b.isHorizontal()){if(!(Math.abs(a.pixelX)>Math.abs(a.pixelY)))return;t=a.pixelX*n}else{if(!(Math.abs(a.pixelY)>Math.abs(a.pixelX)))return;t=a.pixelY}else t=Math.abs(a.pixelX)>Math.abs(a.pixelY)?-a.pixelX*n:-a.pixelY;if(0!==t){if(b.params.mousewheelInvert&&(t=-t),b.params.freeMode){var r=b.getWrapperTranslate()+t*b.params.mousewheelSensitivity,i=b.isBeginning,s=b.isEnd;if(r>=b.minTranslate()&&(r=b.minTranslate()),r<=b.maxTranslate()&&(r=b.maxTranslate()),b.setWrapperTransition(0),b.setWrapperTranslate(r),b.updateProgress(),b.updateActiveIndex(),(!i&&b.isBeginning||!s&&b.isEnd)&&b.updateClasses(),b.params.freeModeSticky?(clearTimeout(b.mousewheel.timeout),b.mousewheel.timeout=setTimeout(function(){b.slideReset()},300)):b.params.lazyLoading&&b.lazy&&b.lazy.load(),b.emit("onScroll",b,e),b.params.autoplay&&b.params.autoplayDisableOnInteraction&&b.stopAutoplay(),0===r||r===b.maxTranslate())return}else{if((new window.Date).getTime()-b.mousewheel.lastScrollTime>60)if(t<0)if(b.isEnd&&!b.params.loop||b.animating){if(b.params.mousewheelReleaseOnEdges)return!0}else b.slideNext(),b.emit("onScroll",b,e);else if(b.isBeginning&&!b.params.loop||b.animating){if(b.params.mousewheelReleaseOnEdges)return!0}else b.slidePrev(),b.emit("onScroll",b,e);b.mousewheel.lastScrollTime=(new window.Date).getTime()}return e.preventDefault?e.preventDefault():e.returnValue=!1,!1}}function c(t,n){t=e(t);var a,r,i,s=b.rtl?-1:1;a=t.attr("data-swiper-parallax")||"0",r=t.attr("data-swiper-parallax-x"),i=t.attr("data-swiper-parallax-y"),r||i?(r=r||"0",i=i||"0"):b.isHorizontal()?(r=a,i="0"):(i=a,r="0"),r=r.indexOf("%")>=0?parseInt(r,10)*n*s+"%":r*n*s+"px",i=i.indexOf("%")>=0?parseInt(i,10)*n+"%":i*n+"px",t.transform("translate3d("+r+", "+i+",0px)")}function f(e){return 0!==e.indexOf("on")&&(e=e[0]!==e[0].toUpperCase()?"on"+e[0].toUpperCase()+e.substring(1):"on"+e),e}if(!(this instanceof t))return new t(a,r);var h={direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,autoplay:!1,autoplayDisableOnInteraction:!0,autoplayStopOnLast:!1,iOSEdgeSwipeDetection:!1,iOSEdgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",coverflow:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:!0},flip:{slideShadows:!0,limitRotation:!0},cube:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94},fade:{crossFade:!1},parallax:!1,zoom:!1,zoomMax:3,zoomMin:1,zoomToggle:!0,scrollbar:null,scrollbarHide:!0,scrollbarDraggable:!1,scrollbarSnapOnRelease:!1,keyboardControl:!1,mousewheelControl:!1,mousewheelReleaseOnEdges:!1,mousewheelInvert:!1,mousewheelForceToAxis:!1,mousewheelSensitivity:1,mousewheelEventsTarged:"container",hashnav:!1,hashnavWatchState:!1,history:!1,replaceState:!1,breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,centeredSlides:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,onlyExternal:!1,threshold:0,touchMoveStopPropagation:!0,touchReleaseOnEdges:!1,uniqueNavElements:!0,pagination:null,paginationElement:"span",paginationClickable:!1,paginationHide:!1,paginationBulletRender:null,paginationProgressRender:null,paginationFractionRender:null,paginationCustomRender:null,paginationType:"bullets",resistance:!0,resistanceRatio:.85,nextButton:null,prevButton:null,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,lazyLoading:!1,lazyLoadingInPrevNext:!1,lazyLoadingInPrevNextAmount:1,lazyLoadingOnTransitionStart:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,control:void 0,controlInverse:!1,controlBy:"slide",normalizeSlideIndex:!0,allowSwipeToPrev:!0,allowSwipeToNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",buttonDisabledClass:"swiper-button-disabled",paginationCurrentClass:"swiper-pagination-current",paginationTotalClass:"swiper-pagination-total",paginationHiddenClass:"swiper-pagination-hidden",paginationProgressbarClass:"swiper-pagination-progressbar",paginationClickableClass:"swiper-pagination-clickable",paginationModifierClass:"swiper-pagination-",lazyLoadingClass:"swiper-lazy",lazyStatusLoadingClass:"swiper-lazy-loading",lazyStatusLoadedClass:"swiper-lazy-loaded",lazyPreloaderClass:"swiper-lazy-preloader",notificationClass:"swiper-notification",preloaderClass:"preloader",zoomContainerClass:"swiper-zoom-container",observer:!1,observeParents:!1,a11y:!1,prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",runCallbacksOnInit:!0},m=r&&r.virtualTranslate;r=r||{};var g={};for(var v in r)if("object"!=typeof r[v]||null===r[v]||(r[v].nodeType||r[v]===window||r[v]===document||void 0!==n&&r[v]instanceof n||"undefined"!=typeof jQuery&&r[v]instanceof jQuery))g[v]=r[v];else{g[v]={};for(var y in r[v])g[v][y]=r[v][y]}for(var w in h)if(void 0===r[w])r[w]=h[w];else if("object"==typeof r[w])for(var x in h[w])void 0===r[w][x]&&(r[w][x]=h[w][x]);var b=this;if(b.params=r,b.originalParams=g,b.classNames=[],void 0!==e&&void 0!==n&&(e=n),(void 0!==e||(e=void 0===n?window.Dom7||window.Zepto||window.jQuery:n))&&(b.$=e,b.currentBreakpoint=void 0,b.getActiveBreakpoint=function(){if(!b.params.breakpoints)return!1;var e,t=!1,n=[];for(e in b.params.breakpoints)b.params.breakpoints.hasOwnProperty(e)&&n.push(e);n.sort(function(e,t){return parseInt(e,10)>parseInt(t,10)});for(var a=0;a<n.length;a++)(e=n[a])>=window.innerWidth&&!t&&(t=e);return t||"max"},b.setBreakpoint=function(){var e=b.getActiveBreakpoint();if(e&&b.currentBreakpoint!==e){var t=e in b.params.breakpoints?b.params.breakpoints[e]:b.originalParams,n=b.params.loop&&t.slidesPerView!==b.params.slidesPerView;for(var a in t)b.params[a]=t[a];b.currentBreakpoint=e,n&&b.destroyLoop&&b.reLoop(!0)}},b.params.breakpoints&&b.setBreakpoint(),b.container=e(a),0!==b.container.length)){if(b.container.length>1){var T=[];return b.container.each(function(){T.push(new t(this,r))}),T}b.container[0].swiper=b,b.container.data("swiper",b),b.classNames.push(b.params.containerModifierClass+b.params.direction),b.params.freeMode&&b.classNames.push(b.params.containerModifierClass+"free-mode"),b.support.flexbox||(b.classNames.push(b.params.containerModifierClass+"no-flexbox"),b.params.slidesPerColumn=1),b.params.autoHeight&&b.classNames.push(b.params.containerModifierClass+"autoheight"),(b.params.parallax||b.params.watchSlidesVisibility)&&(b.params.watchSlidesProgress=!0),b.params.touchReleaseOnEdges&&(b.params.resistanceRatio=0),["cube","coverflow","flip"].indexOf(b.params.effect)>=0&&(b.support.transforms3d?(b.params.watchSlidesProgress=!0,b.classNames.push(b.params.containerModifierClass+"3d")):b.params.effect="slide"),"slide"!==b.params.effect&&b.classNames.push(b.params.containerModifierClass+b.params.effect),"cube"===b.params.effect&&(b.params.resistanceRatio=0,b.params.slidesPerView=1,b.params.slidesPerColumn=1,b.params.slidesPerGroup=1,b.params.centeredSlides=!1,b.params.spaceBetween=0,b.params.virtualTranslate=!0),"fade"!==b.params.effect&&"flip"!==b.params.effect||(b.params.slidesPerView=1,b.params.slidesPerColumn=1,b.params.slidesPerGroup=1,b.params.watchSlidesProgress=!0,b.params.spaceBetween=0,void 0===m&&(b.params.virtualTranslate=!0)),b.params.grabCursor&&b.support.touch&&(b.params.grabCursor=!1),b.wrapper=b.container.children("."+b.params.wrapperClass),b.params.pagination&&(b.paginationContainer=e(b.params.pagination),b.params.uniqueNavElements&&"string"==typeof b.params.pagination&&b.paginationContainer.length>1&&1===b.container.find(b.params.pagination).length&&(b.paginationContainer=b.container.find(b.params.pagination)),"bullets"===b.params.paginationType&&b.params.paginationClickable?b.paginationContainer.addClass(b.params.paginationModifierClass+"clickable"):b.params.paginationClickable=!1,b.paginationContainer.addClass(b.params.paginationModifierClass+b.params.paginationType)),(b.params.nextButton||b.params.prevButton)&&(b.params.nextButton&&(b.nextButton=e(b.params.nextButton),b.params.uniqueNavElements&&"string"==typeof b.params.nextButton&&b.nextButton.length>1&&1===b.container.find(b.params.nextButton).length&&(b.nextButton=b.container.find(b.params.nextButton))),b.params.prevButton&&(b.prevButton=e(b.params.prevButton),b.params.uniqueNavElements&&"string"==typeof b.params.prevButton&&b.prevButton.length>1&&1===b.container.find(b.params.prevButton).length&&(b.prevButton=b.container.find(b.params.prevButton)))),b.isHorizontal=function(){return"horizontal"===b.params.direction},b.rtl=b.isHorizontal()&&("rtl"===b.container[0].dir.toLowerCase()||"rtl"===b.container.css("direction")),b.rtl&&b.classNames.push(b.params.containerModifierClass+"rtl"),b.rtl&&(b.wrongRTL="-webkit-box"===b.wrapper.css("display")),b.params.slidesPerColumn>1&&b.classNames.push(b.params.containerModifierClass+"multirow"),b.device.android&&b.classNames.push(b.params.containerModifierClass+"android"),b.container.addClass(b.classNames.join(" ")),b.translate=0,b.progress=0,b.velocity=0,b.lockSwipeToNext=function(){b.params.allowSwipeToNext=!1,!1===b.params.allowSwipeToPrev&&b.params.grabCursor&&b.unsetGrabCursor()},b.lockSwipeToPrev=function(){b.params.allowSwipeToPrev=!1,!1===b.params.allowSwipeToNext&&b.params.grabCursor&&b.unsetGrabCursor()},b.lockSwipes=function(){b.params.allowSwipeToNext=b.params.allowSwipeToPrev=!1,b.params.grabCursor&&b.unsetGrabCursor()},b.unlockSwipeToNext=function(){b.params.allowSwipeToNext=!0,!0===b.params.allowSwipeToPrev&&b.params.grabCursor&&b.setGrabCursor()},b.unlockSwipeToPrev=function(){b.params.allowSwipeToPrev=!0,!0===b.params.allowSwipeToNext&&b.params.grabCursor&&b.setGrabCursor()},b.unlockSwipes=function(){b.params.allowSwipeToNext=b.params.allowSwipeToPrev=!0,b.params.grabCursor&&b.setGrabCursor()},b.setGrabCursor=function(e){b.container[0].style.cursor="move",b.container[0].style.cursor=e?"-webkit-grabbing":"-webkit-grab",b.container[0].style.cursor=e?"-moz-grabbin":"-moz-grab",b.container[0].style.cursor=e?"grabbing":"grab"},b.unsetGrabCursor=function(){b.container[0].style.cursor=""},b.params.grabCursor&&b.setGrabCursor(),b.imagesToLoad=[],b.imagesLoaded=0,b.loadImage=function(e,t,n,a,r,i){function s(){i&&i()}var o;e.complete&&r?s():t?((o=new window.Image).onload=s,o.onerror=s,a&&(o.sizes=a),n&&(o.srcset=n),t&&(o.src=t)):s()},b.preloadImages=function(){b.imagesToLoad=b.container.find("img");for(var e=0;e<b.imagesToLoad.length;e++)b.loadImage(b.imagesToLoad[e],b.imagesToLoad[e].currentSrc||b.imagesToLoad[e].getAttribute("src"),b.imagesToLoad[e].srcset||b.imagesToLoad[e].getAttribute("srcset"),b.imagesToLoad[e].sizes||b.imagesToLoad[e].getAttribute("sizes"),!0,function(){void 0!==b&&null!==b&&b&&(void 0!==b.imagesLoaded&&b.imagesLoaded++,b.imagesLoaded===b.imagesToLoad.length&&(b.params.updateOnImagesReady&&b.update(),b.emit("onImagesReady",b)))})},b.autoplayTimeoutId=void 0,b.autoplaying=!1,b.autoplayPaused=!1,b.startAutoplay=function(){return void 0===b.autoplayTimeoutId&&(!!b.params.autoplay&&(!b.autoplaying&&(b.autoplaying=!0,b.emit("onAutoplayStart",b),void s())))},b.stopAutoplay=function(e){b.autoplayTimeoutId&&(b.autoplayTimeoutId&&clearTimeout(b.autoplayTimeoutId),b.autoplaying=!1,b.autoplayTimeoutId=void 0,b.emit("onAutoplayStop",b))},b.pauseAutoplay=function(e){b.autoplayPaused||(b.autoplayTimeoutId&&clearTimeout(b.autoplayTimeoutId),b.autoplayPaused=!0,0===e?(b.autoplayPaused=!1,s()):b.wrapper.transitionEnd(function(){b&&(b.autoplayPaused=!1,b.autoplaying?s():b.stopAutoplay())}))},b.minTranslate=function(){return-b.snapGrid[0]},b.maxTranslate=function(){return-b.snapGrid[b.snapGrid.length-1]},b.updateAutoHeight=function(){var e,t=[],n=0;if("auto"!==b.params.slidesPerView&&b.params.slidesPerView>1)for(e=0;e<Math.ceil(b.params.slidesPerView);e++){var a=b.activeIndex+e;if(a>b.slides.length)break;t.push(b.slides.eq(a)[0])}else t.push(b.slides.eq(b.activeIndex)[0]);for(e=0;e<t.length;e++)if(void 0!==t[e]){var r=t[e].offsetHeight;n=r>n?r:n}n&&b.wrapper.css("height",n+"px")},b.updateContainerSize=function(){var e,t;e=void 0!==b.params.width?b.params.width:b.container[0].clientWidth,t=void 0!==b.params.height?b.params.height:b.container[0].clientHeight,0===e&&b.isHorizontal()||0===t&&!b.isHorizontal()||(e=e-parseInt(b.container.css("padding-left"),10)-parseInt(b.container.css("padding-right"),10),t=t-parseInt(b.container.css("padding-top"),10)-parseInt(b.container.css("padding-bottom"),10),b.width=e,b.height=t,b.size=b.isHorizontal()?b.width:b.height)},b.updateSlidesSize=function(){b.slides=b.wrapper.children("."+b.params.slideClass),b.snapGrid=[],b.slidesGrid=[],b.slidesSizesGrid=[];var e,t=b.params.spaceBetween,n=-b.params.slidesOffsetBefore,a=0,r=0;if(void 0!==b.size){"string"==typeof t&&t.indexOf("%")>=0&&(t=parseFloat(t.replace("%",""))/100*b.size),b.virtualSize=-t,b.rtl?b.slides.css({marginLeft:"",marginTop:""}):b.slides.css({marginRight:"",marginBottom:""});var s;b.params.slidesPerColumn>1&&(s=Math.floor(b.slides.length/b.params.slidesPerColumn)===b.slides.length/b.params.slidesPerColumn?b.slides.length:Math.ceil(b.slides.length/b.params.slidesPerColumn)*b.params.slidesPerColumn,"auto"!==b.params.slidesPerView&&"row"===b.params.slidesPerColumnFill&&(s=Math.max(s,b.params.slidesPerView*b.params.slidesPerColumn)));var o,l=b.params.slidesPerColumn,p=s/l,u=p-(b.params.slidesPerColumn*p-b.slides.length);for(e=0;e<b.slides.length;e++){o=0;var d=b.slides.eq(e);if(b.params.slidesPerColumn>1){var c,f,h;"column"===b.params.slidesPerColumnFill?(h=e-(f=Math.floor(e/l))*l,(f>u||f===u&&h===l-1)&&++h>=l&&(h=0,f++),c=f+h*s/l,d.css({"-webkit-box-ordinal-group":c,"-moz-box-ordinal-group":c,"-ms-flex-order":c,"-webkit-order":c,order:c})):f=e-(h=Math.floor(e/p))*p,d.css("margin-"+(b.isHorizontal()?"top":"left"),0!==h&&b.params.spaceBetween&&b.params.spaceBetween+"px").attr("data-swiper-column",f).attr("data-swiper-row",h)}"none"!==d.css("display")&&("auto"===b.params.slidesPerView?(o=b.isHorizontal()?d.outerWidth(!0):d.outerHeight(!0),b.params.roundLengths&&(o=i(o))):(o=(b.size-(b.params.slidesPerView-1)*t)/b.params.slidesPerView,b.params.roundLengths&&(o=i(o)),b.isHorizontal()?b.slides[e].style.width=o+"px":b.slides[e].style.height=o+"px"),b.slides[e].swiperSlideSize=o,b.slidesSizesGrid.push(o),b.params.centeredSlides?(n=n+o/2+a/2+t,0===a&&0!==e&&(n=n-b.size/2-t),0===e&&(n=n-b.size/2-t),Math.abs(n)<.001&&(n=0),r%b.params.slidesPerGroup==0&&b.snapGrid.push(n),b.slidesGrid.push(n)):(r%b.params.slidesPerGroup==0&&b.snapGrid.push(n),b.slidesGrid.push(n),n=n+o+t),b.virtualSize+=o+t,a=o,r++)}b.virtualSize=Math.max(b.virtualSize,b.size)+b.params.slidesOffsetAfter;var m;if(b.rtl&&b.wrongRTL&&("slide"===b.params.effect||"coverflow"===b.params.effect)&&b.wrapper.css({width:b.virtualSize+b.params.spaceBetween+"px"}),b.support.flexbox&&!b.params.setWrapperSize||(b.isHorizontal()?b.wrapper.css({width:b.virtualSize+b.params.spaceBetween+"px"}):b.wrapper.css({height:b.virtualSize+b.params.spaceBetween+"px"})),b.params.slidesPerColumn>1&&(b.virtualSize=(o+b.params.spaceBetween)*s,b.virtualSize=Math.ceil(b.virtualSize/b.params.slidesPerColumn)-b.params.spaceBetween,b.isHorizontal()?b.wrapper.css({width:b.virtualSize+b.params.spaceBetween+"px"}):b.wrapper.css({height:b.virtualSize+b.params.spaceBetween+"px"}),b.params.centeredSlides)){for(m=[],e=0;e<b.snapGrid.length;e++)b.snapGrid[e]<b.virtualSize+b.snapGrid[0]&&m.push(b.snapGrid[e]);b.snapGrid=m}if(!b.params.centeredSlides){for(m=[],e=0;e<b.snapGrid.length;e++)b.snapGrid[e]<=b.virtualSize-b.size&&m.push(b.snapGrid[e]);b.snapGrid=m,Math.floor(b.virtualSize-b.size)-Math.floor(b.snapGrid[b.snapGrid.length-1])>1&&b.snapGrid.push(b.virtualSize-b.size)}0===b.snapGrid.length&&(b.snapGrid=[0]),0!==b.params.spaceBetween&&(b.isHorizontal()?b.rtl?b.slides.css({marginLeft:t+"px"}):b.slides.css({marginRight:t+"px"}):b.slides.css({marginBottom:t+"px"})),b.params.watchSlidesProgress&&b.updateSlidesOffset()}},b.updateSlidesOffset=function(){for(var e=0;e<b.slides.length;e++)b.slides[e].swiperSlideOffset=b.isHorizontal()?b.slides[e].offsetLeft:b.slides[e].offsetTop},b.currentSlidesPerView=function(){var e,t,n=1;if(b.params.centeredSlides){var a,r=b.slides[b.activeIndex].swiperSlideSize;for(e=b.activeIndex+1;e<b.slides.length;e++)b.slides[e]&&!a&&(n++,(r+=b.slides[e].swiperSlideSize)>b.size&&(a=!0));for(t=b.activeIndex-1;t>=0;t--)b.slides[t]&&!a&&(n++,(r+=b.slides[t].swiperSlideSize)>b.size&&(a=!0))}else for(e=b.activeIndex+1;e<b.slides.length;e++)b.slidesGrid[e]-b.slidesGrid[b.activeIndex]<b.size&&n++;return n},b.updateSlidesProgress=function(e){if(void 0===e&&(e=b.translate||0),0!==b.slides.length){void 0===b.slides[0].swiperSlideOffset&&b.updateSlidesOffset();var t=-e;b.rtl&&(t=e),b.slides.removeClass(b.params.slideVisibleClass);for(var n=0;n<b.slides.length;n++){var a=b.slides[n],r=(t+(b.params.centeredSlides?b.minTranslate():0)-a.swiperSlideOffset)/(a.swiperSlideSize+b.params.spaceBetween);if(b.params.watchSlidesVisibility){var i=-(t-a.swiperSlideOffset),s=i+b.slidesSizesGrid[n];(i>=0&&i<b.size||s>0&&s<=b.size||i<=0&&s>=b.size)&&b.slides.eq(n).addClass(b.params.slideVisibleClass)}a.progress=b.rtl?-r:r}}},b.updateProgress=function(e){void 0===e&&(e=b.translate||0);var t=b.maxTranslate()-b.minTranslate(),n=b.isBeginning,a=b.isEnd;0===t?(b.progress=0,b.isBeginning=b.isEnd=!0):(b.progress=(e-b.minTranslate())/t,b.isBeginning=b.progress<=0,b.isEnd=b.progress>=1),b.isBeginning&&!n&&b.emit("onReachBeginning",b),b.isEnd&&!a&&b.emit("onReachEnd",b),b.params.watchSlidesProgress&&b.updateSlidesProgress(e),b.emit("onProgress",b,b.progress)},b.updateActiveIndex=function(){var e,t,n,a=b.rtl?b.translate:-b.translate;for(t=0;t<b.slidesGrid.length;t++)void 0!==b.slidesGrid[t+1]?a>=b.slidesGrid[t]&&a<b.slidesGrid[t+1]-(b.slidesGrid[t+1]-b.slidesGrid[t])/2?e=t:a>=b.slidesGrid[t]&&a<b.slidesGrid[t+1]&&(e=t+1):a>=b.slidesGrid[t]&&(e=t);b.params.normalizeSlideIndex&&(e<0||void 0===e)&&(e=0),(n=Math.floor(e/b.params.slidesPerGroup))>=b.snapGrid.length&&(n=b.snapGrid.length-1),e!==b.activeIndex&&(b.snapIndex=n,b.previousIndex=b.activeIndex,b.activeIndex=e,b.updateClasses(),b.updateRealIndex())},b.updateRealIndex=function(){b.realIndex=parseInt(b.slides.eq(b.activeIndex).attr("data-swiper-slide-index")||b.activeIndex,10)},b.updateClasses=function(){b.slides.removeClass(b.params.slideActiveClass+" "+b.params.slideNextClass+" "+b.params.slidePrevClass+" "+b.params.slideDuplicateActiveClass+" "+b.params.slideDuplicateNextClass+" "+b.params.slideDuplicatePrevClass);var t=b.slides.eq(b.activeIndex);t.addClass(b.params.slideActiveClass),r.loop&&(t.hasClass(b.params.slideDuplicateClass)?b.wrapper.children("."+b.params.slideClass+":not(."+b.params.slideDuplicateClass+')[data-swiper-slide-index="'+b.realIndex+'"]').addClass(b.params.slideDuplicateActiveClass):b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass+'[data-swiper-slide-index="'+b.realIndex+'"]').addClass(b.params.slideDuplicateActiveClass));var n=t.next("."+b.params.slideClass).addClass(b.params.slideNextClass);b.params.loop&&0===n.length&&(n=b.slides.eq(0)).addClass(b.params.slideNextClass);var a=t.prev("."+b.params.slideClass).addClass(b.params.slidePrevClass);if(b.params.loop&&0===a.length&&(a=b.slides.eq(-1)).addClass(b.params.slidePrevClass),r.loop&&(n.hasClass(b.params.slideDuplicateClass)?b.wrapper.children("."+b.params.slideClass+":not(."+b.params.slideDuplicateClass+')[data-swiper-slide-index="'+n.attr("data-swiper-slide-index")+'"]').addClass(b.params.slideDuplicateNextClass):b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass+'[data-swiper-slide-index="'+n.attr("data-swiper-slide-index")+'"]').addClass(b.params.slideDuplicateNextClass),a.hasClass(b.params.slideDuplicateClass)?b.wrapper.children("."+b.params.slideClass+":not(."+b.params.slideDuplicateClass+')[data-swiper-slide-index="'+a.attr("data-swiper-slide-index")+'"]').addClass(b.params.slideDuplicatePrevClass):b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass+'[data-swiper-slide-index="'+a.attr("data-swiper-slide-index")+'"]').addClass(b.params.slideDuplicatePrevClass)),b.paginationContainer&&b.paginationContainer.length>0){var i,s=b.params.loop?Math.ceil((b.slides.length-2*b.loopedSlides)/b.params.slidesPerGroup):b.snapGrid.length;if(b.params.loop?((i=Math.ceil((b.activeIndex-b.loopedSlides)/b.params.slidesPerGroup))>b.slides.length-1-2*b.loopedSlides&&(i-=b.slides.length-2*b.loopedSlides),i>s-1&&(i-=s),i<0&&"bullets"!==b.params.paginationType&&(i=s+i)):i=void 0!==b.snapIndex?b.snapIndex:b.activeIndex||0,"bullets"===b.params.paginationType&&b.bullets&&b.bullets.length>0&&(b.bullets.removeClass(b.params.bulletActiveClass),b.paginationContainer.length>1?b.bullets.each(function(){e(this).index()===i&&e(this).addClass(b.params.bulletActiveClass)}):b.bullets.eq(i).addClass(b.params.bulletActiveClass)),"fraction"===b.params.paginationType&&(b.paginationContainer.find("."+b.params.paginationCurrentClass).text(i+1),b.paginationContainer.find("."+b.params.paginationTotalClass).text(s)),"progress"===b.params.paginationType){var o=(i+1)/s,l=o,p=1;b.isHorizontal()||(p=o,l=1),b.paginationContainer.find("."+b.params.paginationProgressbarClass).transform("translate3d(0,0,0) scaleX("+l+") scaleY("+p+")").transition(b.params.speed)}"custom"===b.params.paginationType&&b.params.paginationCustomRender&&(b.paginationContainer.html(b.params.paginationCustomRender(b,i+1,s)),b.emit("onPaginationRendered",b,b.paginationContainer[0]))}b.params.loop||(b.params.prevButton&&b.prevButton&&b.prevButton.length>0&&(b.isBeginning?(b.prevButton.addClass(b.params.buttonDisabledClass),b.params.a11y&&b.a11y&&b.a11y.disable(b.prevButton)):(b.prevButton.removeClass(b.params.buttonDisabledClass),b.params.a11y&&b.a11y&&b.a11y.enable(b.prevButton))),b.params.nextButton&&b.nextButton&&b.nextButton.length>0&&(b.isEnd?(b.nextButton.addClass(b.params.buttonDisabledClass),b.params.a11y&&b.a11y&&b.a11y.disable(b.nextButton)):(b.nextButton.removeClass(b.params.buttonDisabledClass),b.params.a11y&&b.a11y&&b.a11y.enable(b.nextButton))))},b.updatePagination=function(){if(b.params.pagination&&b.paginationContainer&&b.paginationContainer.length>0){var e="";if("bullets"===b.params.paginationType){for(var t=b.params.loop?Math.ceil((b.slides.length-2*b.loopedSlides)/b.params.slidesPerGroup):b.snapGrid.length,n=0;n<t;n++)b.params.paginationBulletRender?e+=b.params.paginationBulletRender(b,n,b.params.bulletClass):e+="<"+b.params.paginationElement+' class="'+b.params.bulletClass+'"></'+b.params.paginationElement+">";b.paginationContainer.html(e),b.bullets=b.paginationContainer.find("."+b.params.bulletClass),b.params.paginationClickable&&b.params.a11y&&b.a11y&&b.a11y.initPagination()}"fraction"===b.params.paginationType&&(e=b.params.paginationFractionRender?b.params.paginationFractionRender(b,b.params.paginationCurrentClass,b.params.paginationTotalClass):'<span class="'+b.params.paginationCurrentClass+'"></span> / <span class="'+b.params.paginationTotalClass+'"></span>',b.paginationContainer.html(e)),"progress"===b.params.paginationType&&(e=b.params.paginationProgressRender?b.params.paginationProgressRender(b,b.params.paginationProgressbarClass):'<span class="'+b.params.paginationProgressbarClass+'"></span>',b.paginationContainer.html(e)),"custom"!==b.params.paginationType&&b.emit("onPaginationRendered",b,b.paginationContainer[0])}},b.update=function(e){function t(){b.rtl,b.translate;n=Math.min(Math.max(b.translate,b.maxTranslate()),b.minTranslate()),b.setWrapperTranslate(n),b.updateActiveIndex(),b.updateClasses()}if(b){b.updateContainerSize(),b.updateSlidesSize(),b.updateProgress(),b.updatePagination(),b.updateClasses(),b.params.scrollbar&&b.scrollbar&&b.scrollbar.set();var n;if(e){b.controller&&b.controller.spline&&(b.controller.spline=void 0),b.params.freeMode?(t(),b.params.autoHeight&&b.updateAutoHeight()):(("auto"===b.params.slidesPerView||b.params.slidesPerView>1)&&b.isEnd&&!b.params.centeredSlides?b.slideTo(b.slides.length-1,0,!1,!0):b.slideTo(b.activeIndex,0,!1,!0))||t()}else b.params.autoHeight&&b.updateAutoHeight()}},b.onResize=function(e){b.params.onBeforeResize&&b.params.onBeforeResize(b),b.params.breakpoints&&b.setBreakpoint();var t=b.params.allowSwipeToPrev,n=b.params.allowSwipeToNext;b.params.allowSwipeToPrev=b.params.allowSwipeToNext=!0,b.updateContainerSize(),b.updateSlidesSize(),("auto"===b.params.slidesPerView||b.params.freeMode||e)&&b.updatePagination(),b.params.scrollbar&&b.scrollbar&&b.scrollbar.set(),b.controller&&b.controller.spline&&(b.controller.spline=void 0);var a=!1;if(b.params.freeMode){var r=Math.min(Math.max(b.translate,b.maxTranslate()),b.minTranslate());b.setWrapperTranslate(r),b.updateActiveIndex(),b.updateClasses(),b.params.autoHeight&&b.updateAutoHeight()}else b.updateClasses(),a=("auto"===b.params.slidesPerView||b.params.slidesPerView>1)&&b.isEnd&&!b.params.centeredSlides?b.slideTo(b.slides.length-1,0,!1,!0):b.slideTo(b.activeIndex,0,!1,!0);b.params.lazyLoading&&!a&&b.lazy&&b.lazy.load(),b.params.allowSwipeToPrev=t,b.params.allowSwipeToNext=n,b.params.onAfterResize&&b.params.onAfterResize(b)},b.touchEventsDesktop={start:"mousedown",move:"mousemove",end:"mouseup"},window.navigator.pointerEnabled?b.touchEventsDesktop={start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled&&(b.touchEventsDesktop={start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}),b.touchEvents={start:b.support.touch||!b.params.simulateTouch?"touchstart":b.touchEventsDesktop.start,move:b.support.touch||!b.params.simulateTouch?"touchmove":b.touchEventsDesktop.move,end:b.support.touch||!b.params.simulateTouch?"touchend":b.touchEventsDesktop.end},(window.navigator.pointerEnabled||window.navigator.msPointerEnabled)&&("container"===b.params.touchEventsTarget?b.container:b.wrapper).addClass("swiper-wp8-"+b.params.direction),b.initEvents=function(e){var t=e?"off":"on",n=e?"removeEventListener":"addEventListener",a="container"===b.params.touchEventsTarget?b.container[0]:b.wrapper[0],i=b.support.touch?a:document,s=!!b.params.nested;if(b.browser.ie)a[n](b.touchEvents.start,b.onTouchStart,!1),i[n](b.touchEvents.move,b.onTouchMove,s),i[n](b.touchEvents.end,b.onTouchEnd,!1);else{if(b.support.touch){var o=!("touchstart"!==b.touchEvents.start||!b.support.passiveListener||!b.params.passiveListeners)&&{passive:!0,capture:!1};a[n](b.touchEvents.start,b.onTouchStart,o),a[n](b.touchEvents.move,b.onTouchMove,s),a[n](b.touchEvents.end,b.onTouchEnd,o)}(r.simulateTouch&&!b.device.ios&&!b.device.android||r.simulateTouch&&!b.support.touch&&b.device.ios)&&(a[n]("mousedown",b.onTouchStart,!1),document[n]("mousemove",b.onTouchMove,s),document[n]("mouseup",b.onTouchEnd,!1))}window[n]("resize",b.onResize),b.params.nextButton&&b.nextButton&&b.nextButton.length>0&&(b.nextButton[t]("click",b.onClickNext),b.params.a11y&&b.a11y&&b.nextButton[t]("keydown",b.a11y.onEnterKey)),b.params.prevButton&&b.prevButton&&b.prevButton.length>0&&(b.prevButton[t]("click",b.onClickPrev),b.params.a11y&&b.a11y&&b.prevButton[t]("keydown",b.a11y.onEnterKey)),b.params.pagination&&b.params.paginationClickable&&(b.paginationContainer[t]("click","."+b.params.bulletClass,b.onClickIndex),b.params.a11y&&b.a11y&&b.paginationContainer[t]("keydown","."+b.params.bulletClass,b.a11y.onEnterKey)),(b.params.preventClicks||b.params.preventClicksPropagation)&&a[n]("click",b.preventClicks,!0)},b.attachEvents=function(){b.initEvents()},b.detachEvents=function(){b.initEvents(!0)},b.allowClick=!0,b.preventClicks=function(e){b.allowClick||(b.params.preventClicks&&e.preventDefault(),b.params.preventClicksPropagation&&b.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))},b.onClickNext=function(e){e.preventDefault(),b.isEnd&&!b.params.loop||b.slideNext()},b.onClickPrev=function(e){e.preventDefault(),b.isBeginning&&!b.params.loop||b.slidePrev()},b.onClickIndex=function(t){t.preventDefault();var n=e(this).index()*b.params.slidesPerGroup;b.params.loop&&(n+=b.loopedSlides),b.slideTo(n)},b.updateClickedSlide=function(t){var n=o(t,"."+b.params.slideClass),a=!1;if(n)for(var r=0;r<b.slides.length;r++)b.slides[r]===n&&(a=!0);if(!n||!a)return b.clickedSlide=void 0,void(b.clickedIndex=void 0);if(b.clickedSlide=n,b.clickedIndex=e(n).index(),b.params.slideToClickedSlide&&void 0!==b.clickedIndex&&b.clickedIndex!==b.activeIndex){var i,s=b.clickedIndex,l="auto"===b.params.slidesPerView?b.currentSlidesPerView():b.params.slidesPerView;if(b.params.loop){if(b.animating)return;i=parseInt(e(b.clickedSlide).attr("data-swiper-slide-index"),10),b.params.centeredSlides?s<b.loopedSlides-l/2||s>b.slides.length-b.loopedSlides+l/2?(b.fixLoop(),s=b.wrapper.children("."+b.params.slideClass+'[data-swiper-slide-index="'+i+'"]:not(.'+b.params.slideDuplicateClass+")").eq(0).index(),setTimeout(function(){b.slideTo(s)},0)):b.slideTo(s):s>b.slides.length-l?(b.fixLoop(),s=b.wrapper.children("."+b.params.slideClass+'[data-swiper-slide-index="'+i+'"]:not(.'+b.params.slideDuplicateClass+")").eq(0).index(),setTimeout(function(){b.slideTo(s)},0)):b.slideTo(s)}else b.slideTo(s)}};var C,S,E,M,k,z,P,D,L,I,N="input, select, textarea, button, video",A=Date.now(),H=[];b.animating=!1,b.touches={startX:0,startY:0,currentX:0,currentY:0,diff:0};var B,O;b.onTouchStart=function(t){if(t.originalEvent&&(t=t.originalEvent),(B="touchstart"===t.type)||!("which"in t)||3!==t.which)if(b.params.noSwiping&&o(t,"."+b.params.noSwipingClass))b.allowClick=!0;else if(!b.params.swipeHandler||o(t,b.params.swipeHandler)){var n=b.touches.currentX="touchstart"===t.type?t.targetTouches[0].pageX:t.pageX,a=b.touches.currentY="touchstart"===t.type?t.targetTouches[0].pageY:t.pageY;if(!(b.device.ios&&b.params.iOSEdgeSwipeDetection&&n<=b.params.iOSEdgeSwipeThreshold)){if(C=!0,S=!1,E=!0,k=void 0,O=void 0,b.touches.startX=n,b.touches.startY=a,M=Date.now(),b.allowClick=!0,b.updateContainerSize(),b.swipeDirection=void 0,b.params.threshold>0&&(D=!1),"touchstart"!==t.type){var r=!0;e(t.target).is(N)&&(r=!1),document.activeElement&&e(document.activeElement).is(N)&&document.activeElement.blur(),r&&t.preventDefault()}b.emit("onTouchStart",b,t)}}},b.onTouchMove=function(t){if(t.originalEvent&&(t=t.originalEvent),!B||"mousemove"!==t.type){if(t.preventedByNestedSwiper)return b.touches.startX="touchmove"===t.type?t.targetTouches[0].pageX:t.pageX,void(b.touches.startY="touchmove"===t.type?t.targetTouches[0].pageY:t.pageY);if(b.params.onlyExternal)return b.allowClick=!1,void(C&&(b.touches.startX=b.touches.currentX="touchmove"===t.type?t.targetTouches[0].pageX:t.pageX,b.touches.startY=b.touches.currentY="touchmove"===t.type?t.targetTouches[0].pageY:t.pageY,M=Date.now()));if(B&&b.params.touchReleaseOnEdges&&!b.params.loop)if(b.isHorizontal()){if(b.touches.currentX<b.touches.startX&&b.translate<=b.maxTranslate()||b.touches.currentX>b.touches.startX&&b.translate>=b.minTranslate())return}else if(b.touches.currentY<b.touches.startY&&b.translate<=b.maxTranslate()||b.touches.currentY>b.touches.startY&&b.translate>=b.minTranslate())return;if(B&&document.activeElement&&t.target===document.activeElement&&e(t.target).is(N))return S=!0,void(b.allowClick=!1);if(E&&b.emit("onTouchMove",b,t),!(t.targetTouches&&t.targetTouches.length>1)){if(b.touches.currentX="touchmove"===t.type?t.targetTouches[0].pageX:t.pageX,b.touches.currentY="touchmove"===t.type?t.targetTouches[0].pageY:t.pageY,void 0===k){var n;b.isHorizontal()&&b.touches.currentY===b.touches.startY||!b.isHorizontal()&&b.touches.currentX===b.touches.startX?k=!1:(n=180*Math.atan2(Math.abs(b.touches.currentY-b.touches.startY),Math.abs(b.touches.currentX-b.touches.startX))/Math.PI,k=b.isHorizontal()?n>b.params.touchAngle:90-n>b.params.touchAngle)}if(k&&b.emit("onTouchMoveOpposite",b,t),void 0===O&&(b.touches.currentX===b.touches.startX&&b.touches.currentY===b.touches.startY||(O=!0)),C)if(k)C=!1;else if(O){b.allowClick=!1,b.emit("onSliderMove",b,t),t.preventDefault(),b.params.touchMoveStopPropagation&&!b.params.nested&&t.stopPropagation(),S||(r.loop&&b.fixLoop(),P=b.getWrapperTranslate(),b.setWrapperTransition(0),b.animating&&b.wrapper.trigger("webkitTransitionEnd transitionend oTransitionEnd MSTransitionEnd msTransitionEnd"),b.params.autoplay&&b.autoplaying&&(b.params.autoplayDisableOnInteraction?b.stopAutoplay():b.pauseAutoplay()),I=!1,!b.params.grabCursor||!0!==b.params.allowSwipeToNext&&!0!==b.params.allowSwipeToPrev||b.setGrabCursor(!0)),S=!0;var a=b.touches.diff=b.isHorizontal()?b.touches.currentX-b.touches.startX:b.touches.currentY-b.touches.startY;a*=b.params.touchRatio,b.rtl&&(a=-a),b.swipeDirection=a>0?"prev":"next",z=a+P;var i=!0;if(a>0&&z>b.minTranslate()?(i=!1,b.params.resistance&&(z=b.minTranslate()-1+Math.pow(-b.minTranslate()+P+a,b.params.resistanceRatio))):a<0&&z<b.maxTranslate()&&(i=!1,b.params.resistance&&(z=b.maxTranslate()+1-Math.pow(b.maxTranslate()-P-a,b.params.resistanceRatio))),i&&(t.preventedByNestedSwiper=!0),!b.params.allowSwipeToNext&&"next"===b.swipeDirection&&z<P&&(z=P),!b.params.allowSwipeToPrev&&"prev"===b.swipeDirection&&z>P&&(z=P),b.params.threshold>0){if(!(Math.abs(a)>b.params.threshold||D))return void(z=P);if(!D)return D=!0,b.touches.startX=b.touches.currentX,b.touches.startY=b.touches.currentY,z=P,void(b.touches.diff=b.isHorizontal()?b.touches.currentX-b.touches.startX:b.touches.currentY-b.touches.startY)}b.params.followFinger&&((b.params.freeMode||b.params.watchSlidesProgress)&&b.updateActiveIndex(),b.params.freeMode&&(0===H.length&&H.push({position:b.touches[b.isHorizontal()?"startX":"startY"],time:M}),H.push({position:b.touches[b.isHorizontal()?"currentX":"currentY"],time:(new window.Date).getTime()})),b.updateProgress(z),b.setWrapperTranslate(z))}}}},b.onTouchEnd=function(t){if(t.originalEvent&&(t=t.originalEvent),E&&b.emit("onTouchEnd",b,t),E=!1,C){b.params.grabCursor&&S&&C&&(!0===b.params.allowSwipeToNext||!0===b.params.allowSwipeToPrev)&&b.setGrabCursor(!1);var n=Date.now(),a=n-M;if(b.allowClick&&(b.updateClickedSlide(t),b.emit("onTap",b,t),a<300&&n-A>300&&(L&&clearTimeout(L),L=setTimeout(function(){b&&(b.params.paginationHide&&b.paginationContainer.length>0&&!e(t.target).hasClass(b.params.bulletClass)&&b.paginationContainer.toggleClass(b.params.paginationHiddenClass),b.emit("onClick",b,t))},300)),a<300&&n-A<300&&(L&&clearTimeout(L),b.emit("onDoubleTap",b,t))),A=Date.now(),setTimeout(function(){b&&(b.allowClick=!0)},0),C&&S&&b.swipeDirection&&0!==b.touches.diff&&z!==P){C=S=!1;var r;if(r=b.params.followFinger?b.rtl?b.translate:-b.translate:-z,b.params.freeMode){if(r<-b.minTranslate())return void b.slideTo(b.activeIndex);if(r>-b.maxTranslate())return void(b.slides.length<b.snapGrid.length?b.slideTo(b.snapGrid.length-1):b.slideTo(b.slides.length-1));if(b.params.freeModeMomentum){if(H.length>1){var i=H.pop(),s=H.pop(),o=i.position-s.position,l=i.time-s.time;b.velocity=o/l,b.velocity=b.velocity/2,Math.abs(b.velocity)<b.params.freeModeMinimumVelocity&&(b.velocity=0),(l>150||(new window.Date).getTime()-i.time>300)&&(b.velocity=0)}else b.velocity=0;b.velocity=b.velocity*b.params.freeModeMomentumVelocityRatio,H.length=0;var p=1e3*b.params.freeModeMomentumRatio,u=b.velocity*p,d=b.translate+u;b.rtl&&(d=-d);var c,f=!1,h=20*Math.abs(b.velocity)*b.params.freeModeMomentumBounceRatio;if(d<b.maxTranslate())b.params.freeModeMomentumBounce?(d+b.maxTranslate()<-h&&(d=b.maxTranslate()-h),c=b.maxTranslate(),f=!0,I=!0):d=b.maxTranslate();else if(d>b.minTranslate())b.params.freeModeMomentumBounce?(d-b.minTranslate()>h&&(d=b.minTranslate()+h),c=b.minTranslate(),f=!0,I=!0):d=b.minTranslate();else if(b.params.freeModeSticky){var m,g=0;for(g=0;g<b.snapGrid.length;g+=1)if(b.snapGrid[g]>-d){m=g;break}d=Math.abs(b.snapGrid[m]-d)<Math.abs(b.snapGrid[m-1]-d)||"next"===b.swipeDirection?b.snapGrid[m]:b.snapGrid[m-1],b.rtl||(d=-d)}if(0!==b.velocity)p=b.rtl?Math.abs((-d-b.translate)/b.velocity):Math.abs((d-b.translate)/b.velocity);else if(b.params.freeModeSticky)return void b.slideReset();b.params.freeModeMomentumBounce&&f?(b.updateProgress(c),b.setWrapperTransition(p),b.setWrapperTranslate(d),b.onTransitionStart(),b.animating=!0,b.wrapper.transitionEnd(function(){b&&I&&(b.emit("onMomentumBounce",b),b.setWrapperTransition(b.params.speed),b.setWrapperTranslate(c),b.wrapper.transitionEnd(function(){b&&b.onTransitionEnd()}))})):b.velocity?(b.updateProgress(d),b.setWrapperTransition(p),b.setWrapperTranslate(d),b.onTransitionStart(),b.animating||(b.animating=!0,b.wrapper.transitionEnd(function(){b&&b.onTransitionEnd()}))):b.updateProgress(d),b.updateActiveIndex()}(!b.params.freeModeMomentum||a>=b.params.longSwipesMs)&&(b.updateProgress(),b.updateActiveIndex())}else{var v,y=0,w=b.slidesSizesGrid[0];for(v=0;v<b.slidesGrid.length;v+=b.params.slidesPerGroup)void 0!==b.slidesGrid[v+b.params.slidesPerGroup]?r>=b.slidesGrid[v]&&r<b.slidesGrid[v+b.params.slidesPerGroup]&&(y=v,w=b.slidesGrid[v+b.params.slidesPerGroup]-b.slidesGrid[v]):r>=b.slidesGrid[v]&&(y=v,w=b.slidesGrid[b.slidesGrid.length-1]-b.slidesGrid[b.slidesGrid.length-2]);var x=(r-b.slidesGrid[y])/w;if(a>b.params.longSwipesMs){if(!b.params.longSwipes)return void b.slideTo(b.activeIndex);"next"===b.swipeDirection&&(x>=b.params.longSwipesRatio?b.slideTo(y+b.params.slidesPerGroup):b.slideTo(y)),"prev"===b.swipeDirection&&(x>1-b.params.longSwipesRatio?b.slideTo(y+b.params.slidesPerGroup):b.slideTo(y))}else{if(!b.params.shortSwipes)return void b.slideTo(b.activeIndex);"next"===b.swipeDirection&&b.slideTo(y+b.params.slidesPerGroup),"prev"===b.swipeDirection&&b.slideTo(y)}}}else C=S=!1}},b._slideTo=function(e,t){return b.slideTo(e,t,!0,!0)},b.slideTo=function(e,t,n,a){void 0===n&&(n=!0),void 0===e&&(e=0),e<0&&(e=0),b.snapIndex=Math.floor(e/b.params.slidesPerGroup),b.snapIndex>=b.snapGrid.length&&(b.snapIndex=b.snapGrid.length-1);var r=-b.snapGrid[b.snapIndex];if(b.params.autoplay&&b.autoplaying&&(a||!b.params.autoplayDisableOnInteraction?b.pauseAutoplay(t):b.stopAutoplay()),b.updateProgress(r),b.params.normalizeSlideIndex)for(var i=0;i<b.slidesGrid.length;i++)-Math.floor(100*r)>=Math.floor(100*b.slidesGrid[i])&&(e=i);return!(!b.params.allowSwipeToNext&&r<b.translate&&r<b.minTranslate())&&(!(!b.params.allowSwipeToPrev&&r>b.translate&&r>b.maxTranslate()&&(b.activeIndex||0)!==e)&&(void 0===t&&(t=b.params.speed),b.previousIndex=b.activeIndex||0,b.activeIndex=e,b.updateRealIndex(),b.rtl&&-r===b.translate||!b.rtl&&r===b.translate?(b.params.autoHeight&&b.updateAutoHeight(),b.updateClasses(),"slide"!==b.params.effect&&b.setWrapperTranslate(r),!1):(b.updateClasses(),b.onTransitionStart(n),0===t||b.browser.lteIE9?(b.setWrapperTranslate(r),b.setWrapperTransition(0),b.onTransitionEnd(n)):(b.setWrapperTranslate(r),b.setWrapperTransition(t),b.animating||(b.animating=!0,b.wrapper.transitionEnd(function(){b&&b.onTransitionEnd(n)}))),!0)))},b.onTransitionStart=function(e){void 0===e&&(e=!0),b.params.autoHeight&&b.updateAutoHeight(),b.lazy&&b.lazy.onTransitionStart(),e&&(b.emit("onTransitionStart",b),b.activeIndex!==b.previousIndex&&(b.emit("onSlideChangeStart",b),b.activeIndex>b.previousIndex?b.emit("onSlideNextStart",b):b.emit("onSlidePrevStart",b)))},b.onTransitionEnd=function(e){b.animating=!1,b.setWrapperTransition(0),void 0===e&&(e=!0),b.lazy&&b.lazy.onTransitionEnd(),e&&(b.emit("onTransitionEnd",b),b.activeIndex!==b.previousIndex&&(b.emit("onSlideChangeEnd",b),b.activeIndex>b.previousIndex?b.emit("onSlideNextEnd",b):b.emit("onSlidePrevEnd",b))),b.params.history&&b.history&&b.history.setHistory(b.params.history,b.activeIndex),b.params.hashnav&&b.hashnav&&b.hashnav.setHash()},b.slideNext=function(e,t,n){if(b.params.loop){if(b.animating)return!1;b.fixLoop();b.container[0].clientLeft;return b.slideTo(b.activeIndex+b.params.slidesPerGroup,t,e,n)}return b.slideTo(b.activeIndex+b.params.slidesPerGroup,t,e,n)},b._slideNext=function(e){return b.slideNext(!0,e,!0)},b.slidePrev=function(e,t,n){if(b.params.loop){if(b.animating)return!1;b.fixLoop();b.container[0].clientLeft;return b.slideTo(b.activeIndex-1,t,e,n)}return b.slideTo(b.activeIndex-1,t,e,n)},b._slidePrev=function(e){return b.slidePrev(!0,e,!0)},b.slideReset=function(e,t,n){return b.slideTo(b.activeIndex,t,e)},b.disableTouchControl=function(){return b.params.onlyExternal=!0,!0},b.enableTouchControl=function(){return b.params.onlyExternal=!1,!0},b.setWrapperTransition=function(e,t){b.wrapper.transition(e),"slide"!==b.params.effect&&b.effects[b.params.effect]&&b.effects[b.params.effect].setTransition(e),b.params.parallax&&b.parallax&&b.parallax.setTransition(e),b.params.scrollbar&&b.scrollbar&&b.scrollbar.setTransition(e),b.params.control&&b.controller&&b.controller.setTransition(e,t),b.emit("onSetTransition",b,e)},b.setWrapperTranslate=function(e,t,n){var a=0,r=0;b.isHorizontal()?a=b.rtl?-e:e:r=e,b.params.roundLengths&&(a=i(a),r=i(r)),b.params.virtualTranslate||(b.support.transforms3d?b.wrapper.transform("translate3d("+a+"px, "+r+"px, 0px)"):b.wrapper.transform("translate("+a+"px, "+r+"px)")),b.translate=b.isHorizontal()?a:r;var s=b.maxTranslate()-b.minTranslate();(0===s?0:(e-b.minTranslate())/s)!==b.progress&&b.updateProgress(e),t&&b.updateActiveIndex(),"slide"!==b.params.effect&&b.effects[b.params.effect]&&b.effects[b.params.effect].setTranslate(b.translate),b.params.parallax&&b.parallax&&b.parallax.setTranslate(b.translate),b.params.scrollbar&&b.scrollbar&&b.scrollbar.setTranslate(b.translate),b.params.control&&b.controller&&b.controller.setTranslate(b.translate,n),b.emit("onSetTranslate",b,b.translate)},b.getTranslate=function(e,t){var n,a,r,i;return void 0===t&&(t="x"),b.params.virtualTranslate?b.rtl?-b.translate:b.translate:(r=window.getComputedStyle(e,null),window.WebKitCSSMatrix?((a=r.transform||r.webkitTransform).split(",").length>6&&(a=a.split(", ").map(function(e){return e.replace(",",".")}).join(", ")),i=new window.WebKitCSSMatrix("none"===a?"":a)):n=(i=r.MozTransform||r.OTransform||r.MsTransform||r.msTransform||r.transform||r.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===t&&(a=window.WebKitCSSMatrix?i.m41:16===n.length?parseFloat(n[12]):parseFloat(n[4])),"y"===t&&(a=window.WebKitCSSMatrix?i.m42:16===n.length?parseFloat(n[13]):parseFloat(n[5])),b.rtl&&a&&(a=-a),a||0)},b.getWrapperTranslate=function(e){return void 0===e&&(e=b.isHorizontal()?"x":"y"),b.getTranslate(b.wrapper[0],e)},b.observers=[],b.initObservers=function(){if(b.params.observeParents)for(var e=b.container.parents(),t=0;t<e.length;t++)l(e[t]);l(b.container[0],{childList:!1}),l(b.wrapper[0],{attributes:!1})},b.disconnectObservers=function(){for(var e=0;e<b.observers.length;e++)b.observers[e].disconnect();b.observers=[]},b.createLoop=function(){b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass).remove();var t=b.wrapper.children("."+b.params.slideClass);"auto"!==b.params.slidesPerView||b.params.loopedSlides||(b.params.loopedSlides=t.length),b.loopedSlides=parseInt(b.params.loopedSlides||b.params.slidesPerView,10),b.loopedSlides=b.loopedSlides+b.params.loopAdditionalSlides,b.loopedSlides>t.length&&(b.loopedSlides=t.length);var n,a=[],r=[];for(t.each(function(n,i){var s=e(this);n<b.loopedSlides&&r.push(i),n<t.length&&n>=t.length-b.loopedSlides&&a.push(i),s.attr("data-swiper-slide-index",n)}),n=0;n<r.length;n++)b.wrapper.append(e(r[n].cloneNode(!0)).addClass(b.params.slideDuplicateClass));for(n=a.length-1;n>=0;n--)b.wrapper.prepend(e(a[n].cloneNode(!0)).addClass(b.params.slideDuplicateClass))},b.destroyLoop=function(){b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass).remove(),b.slides.removeAttr("data-swiper-slide-index")},b.reLoop=function(e){var t=b.activeIndex-b.loopedSlides;b.destroyLoop(),b.createLoop(),b.updateSlidesSize(),e&&b.slideTo(t+b.loopedSlides,0,!1)},b.fixLoop=function(){var e;b.activeIndex<b.loopedSlides?(e=b.slides.length-3*b.loopedSlides+b.activeIndex,e+=b.loopedSlides,b.slideTo(e,0,!1,!0)):("auto"===b.params.slidesPerView&&b.activeIndex>=2*b.loopedSlides||b.activeIndex>b.slides.length-2*b.params.slidesPerView)&&(e=-b.slides.length+b.activeIndex+b.loopedSlides,e+=b.loopedSlides,b.slideTo(e,0,!1,!0))},b.appendSlide=function(e){if(b.params.loop&&b.destroyLoop(),"object"==typeof e&&e.length)for(var t=0;t<e.length;t++)e[t]&&b.wrapper.append(e[t]);else b.wrapper.append(e);b.params.loop&&b.createLoop(),b.params.observer&&b.support.observer||b.update(!0)},b.prependSlide=function(e){b.params.loop&&b.destroyLoop();var t=b.activeIndex+1;if("object"==typeof e&&e.length){for(var n=0;n<e.length;n++)e[n]&&b.wrapper.prepend(e[n]);t=b.activeIndex+e.length}else b.wrapper.prepend(e);b.params.loop&&b.createLoop(),b.params.observer&&b.support.observer||b.update(!0),b.slideTo(t,0,!1)},b.removeSlide=function(e){b.params.loop&&(b.destroyLoop(),b.slides=b.wrapper.children("."+b.params.slideClass));var t,n=b.activeIndex;if("object"==typeof e&&e.length){for(var a=0;a<e.length;a++)t=e[a],b.slides[t]&&b.slides.eq(t).remove(),t<n&&n--;n=Math.max(n,0)}else t=e,b.slides[t]&&b.slides.eq(t).remove(),t<n&&n--,n=Math.max(n,0);b.params.loop&&b.createLoop(),b.params.observer&&b.support.observer||b.update(!0),b.params.loop?b.slideTo(n+b.loopedSlides,0,!1):b.slideTo(n,0,!1)},b.removeAllSlides=function(){for(var e=[],t=0;t<b.slides.length;t++)e.push(t);b.removeSlide(e)},b.effects={fade:{setTranslate:function(){for(var e=0;e<b.slides.length;e++){var t=b.slides.eq(e),n=-t[0].swiperSlideOffset;b.params.virtualTranslate||(n-=b.translate);var a=0;b.isHorizontal()||(a=n,n=0);var r=b.params.fade.crossFade?Math.max(1-Math.abs(t[0].progress),0):1+Math.min(Math.max(t[0].progress,-1),0);t.css({opacity:r}).transform("translate3d("+n+"px, "+a+"px, 0px)")}},setTransition:function(e){if(b.slides.transition(e),b.params.virtualTranslate&&0!==e){var t=!1;b.slides.transitionEnd(function(){if(!t&&b){t=!0,b.animating=!1;for(var e=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],n=0;n<e.length;n++)b.wrapper.trigger(e[n])}})}}},flip:{setTranslate:function(){for(var t=0;t<b.slides.length;t++){var n=b.slides.eq(t),a=n[0].progress;b.params.flip.limitRotation&&(a=Math.max(Math.min(n[0].progress,1),-1));var r=-180*a,i=0,s=-n[0].swiperSlideOffset,o=0;if(b.isHorizontal()?b.rtl&&(r=-r):(o=s,s=0,i=-r,r=0),n[0].style.zIndex=-Math.abs(Math.round(a))+b.slides.length,b.params.flip.slideShadows){var l=b.isHorizontal()?n.find(".swiper-slide-shadow-left"):n.find(".swiper-slide-shadow-top"),p=b.isHorizontal()?n.find(".swiper-slide-shadow-right"):n.find(".swiper-slide-shadow-bottom");0===l.length&&(l=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"left":"top")+'"></div>'),n.append(l)),0===p.length&&(p=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"right":"bottom")+'"></div>'),n.append(p)),l.length&&(l[0].style.opacity=Math.max(-a,0)),p.length&&(p[0].style.opacity=Math.max(a,0))}n.transform("translate3d("+s+"px, "+o+"px, 0px) rotateX("+i+"deg) rotateY("+r+"deg)")}},setTransition:function(t){if(b.slides.transition(t).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(t),b.params.virtualTranslate&&0!==t){var n=!1;b.slides.eq(b.activeIndex).transitionEnd(function(){if(!n&&b&&e(this).hasClass(b.params.slideActiveClass)){n=!0,b.animating=!1;for(var t=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],a=0;a<t.length;a++)b.wrapper.trigger(t[a])}})}}},cube:{setTranslate:function(){var t,n=0;b.params.cube.shadow&&(b.isHorizontal()?(0===(t=b.wrapper.find(".swiper-cube-shadow")).length&&(t=e('<div class="swiper-cube-shadow"></div>'),b.wrapper.append(t)),t.css({height:b.width+"px"})):0===(t=b.container.find(".swiper-cube-shadow")).length&&(t=e('<div class="swiper-cube-shadow"></div>'),b.container.append(t)));for(var a=0;a<b.slides.length;a++){var r=b.slides.eq(a),i=90*a,s=Math.floor(i/360);b.rtl&&(i=-i,s=Math.floor(-i/360));var o=Math.max(Math.min(r[0].progress,1),-1),l=0,p=0,u=0;a%4==0?(l=4*-s*b.size,u=0):(a-1)%4==0?(l=0,u=4*-s*b.size):(a-2)%4==0?(l=b.size+4*s*b.size,u=b.size):(a-3)%4==0&&(l=-b.size,u=3*b.size+4*b.size*s),b.rtl&&(l=-l),b.isHorizontal()||(p=l,l=0);var d="rotateX("+(b.isHorizontal()?0:-i)+"deg) rotateY("+(b.isHorizontal()?i:0)+"deg) translate3d("+l+"px, "+p+"px, "+u+"px)";if(o<=1&&o>-1&&(n=90*a+90*o,b.rtl&&(n=90*-a-90*o)),r.transform(d),b.params.cube.slideShadows){var c=b.isHorizontal()?r.find(".swiper-slide-shadow-left"):r.find(".swiper-slide-shadow-top"),f=b.isHorizontal()?r.find(".swiper-slide-shadow-right"):r.find(".swiper-slide-shadow-bottom");0===c.length&&(c=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"left":"top")+'"></div>'),r.append(c)),0===f.length&&(f=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"right":"bottom")+'"></div>'),r.append(f)),c.length&&(c[0].style.opacity=Math.max(-o,0)),f.length&&(f[0].style.opacity=Math.max(o,0))}}if(b.wrapper.css({"-webkit-transform-origin":"50% 50% -"+b.size/2+"px","-moz-transform-origin":"50% 50% -"+b.size/2+"px","-ms-transform-origin":"50% 50% -"+b.size/2+"px","transform-origin":"50% 50% -"+b.size/2+"px"}),b.params.cube.shadow)if(b.isHorizontal())t.transform("translate3d(0px, "+(b.width/2+b.params.cube.shadowOffset)+"px, "+-b.width/2+"px) rotateX(90deg) rotateZ(0deg) scale("+b.params.cube.shadowScale+")");else{var h=Math.abs(n)-90*Math.floor(Math.abs(n)/90),m=1.5-(Math.sin(2*h*Math.PI/360)/2+Math.cos(2*h*Math.PI/360)/2),g=b.params.cube.shadowScale,v=b.params.cube.shadowScale/m,y=b.params.cube.shadowOffset;t.transform("scale3d("+g+", 1, "+v+") translate3d(0px, "+(b.height/2+y)+"px, "+-b.height/2/v+"px) rotateX(-90deg)")}var w=b.isSafari||b.isUiWebView?-b.size/2:0;b.wrapper.transform("translate3d(0px,0,"+w+"px) rotateX("+(b.isHorizontal()?0:n)+"deg) rotateY("+(b.isHorizontal()?-n:0)+"deg)")},setTransition:function(e){b.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),b.params.cube.shadow&&!b.isHorizontal()&&b.container.find(".swiper-cube-shadow").transition(e)}},coverflow:{setTranslate:function(){for(var t=b.translate,n=b.isHorizontal()?-t+b.width/2:-t+b.height/2,a=b.isHorizontal()?b.params.coverflow.rotate:-b.params.coverflow.rotate,r=b.params.coverflow.depth,i=0,s=b.slides.length;i<s;i++){var o=b.slides.eq(i),l=b.slidesSizesGrid[i],p=(n-o[0].swiperSlideOffset-l/2)/l*b.params.coverflow.modifier,u=b.isHorizontal()?a*p:0,d=b.isHorizontal()?0:a*p,c=-r*Math.abs(p),f=b.isHorizontal()?0:b.params.coverflow.stretch*p,h=b.isHorizontal()?b.params.coverflow.stretch*p:0;Math.abs(h)<.001&&(h=0),Math.abs(f)<.001&&(f=0),Math.abs(c)<.001&&(c=0),Math.abs(u)<.001&&(u=0),Math.abs(d)<.001&&(d=0);var m="translate3d("+h+"px,"+f+"px,"+c+"px)  rotateX("+d+"deg) rotateY("+u+"deg)";if(o.transform(m),o[0].style.zIndex=1-Math.abs(Math.round(p)),b.params.coverflow.slideShadows){var g=b.isHorizontal()?o.find(".swiper-slide-shadow-left"):o.find(".swiper-slide-shadow-top"),v=b.isHorizontal()?o.find(".swiper-slide-shadow-right"):o.find(".swiper-slide-shadow-bottom");0===g.length&&(g=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"left":"top")+'"></div>'),o.append(g)),0===v.length&&(v=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"right":"bottom")+'"></div>'),o.append(v)),g.length&&(g[0].style.opacity=p>0?p:0),v.length&&(v[0].style.opacity=-p>0?-p:0)}}b.browser.ie&&(b.wrapper[0].style.perspectiveOrigin=n+"px 50%")},setTransition:function(e){b.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}}},b.lazy={initialImageLoaded:!1,loadImageInSlide:function(t,n){if(void 0!==t&&(void 0===n&&(n=!0),0!==b.slides.length)){var a=b.slides.eq(t),r=a.find("."+b.params.lazyLoadingClass+":not(."+b.params.lazyStatusLoadedClass+"):not(."+b.params.lazyStatusLoadingClass+")");!a.hasClass(b.params.lazyLoadingClass)||a.hasClass(b.params.lazyStatusLoadedClass)||a.hasClass(b.params.lazyStatusLoadingClass)||(r=r.add(a[0])),0!==r.length&&r.each(function(){var t=e(this);t.addClass(b.params.lazyStatusLoadingClass);var r=t.attr("data-background"),i=t.attr("data-src"),s=t.attr("data-srcset"),o=t.attr("data-sizes");b.loadImage(t[0],i||r,s,o,!1,function(){if(void 0!==b&&null!==b&&b){if(r?(t.css("background-image",'url("'+r+'")'),t.removeAttr("data-background")):(s&&(t.attr("srcset",s),t.removeAttr("data-srcset")),o&&(t.attr("sizes",o),t.removeAttr("data-sizes")),i&&(t.attr("src",i),t.removeAttr("data-src"))),t.addClass(b.params.lazyStatusLoadedClass).removeClass(b.params.lazyStatusLoadingClass),a.find("."+b.params.lazyPreloaderClass+", ."+b.params.preloaderClass).remove(),b.params.loop&&n){var e=a.attr("data-swiper-slide-index");if(a.hasClass(b.params.slideDuplicateClass)){var l=b.wrapper.children('[data-swiper-slide-index="'+e+'"]:not(.'+b.params.slideDuplicateClass+")");b.lazy.loadImageInSlide(l.index(),!1)}else{var p=b.wrapper.children("."+b.params.slideDuplicateClass+'[data-swiper-slide-index="'+e+'"]');b.lazy.loadImageInSlide(p.index(),!1)}}b.emit("onLazyImageReady",b,a[0],t[0])}}),b.emit("onLazyImageLoad",b,a[0],t[0])})}},load:function(){var t,n=b.params.slidesPerView;if("auto"===n&&(n=0),b.lazy.initialImageLoaded||(b.lazy.initialImageLoaded=!0),b.params.watchSlidesVisibility)b.wrapper.children("."+b.params.slideVisibleClass).each(function(){b.lazy.loadImageInSlide(e(this).index())});else if(n>1)for(t=b.activeIndex;t<b.activeIndex+n;t++)b.slides[t]&&b.lazy.loadImageInSlide(t);else b.lazy.loadImageInSlide(b.activeIndex);if(b.params.lazyLoadingInPrevNext)if(n>1||b.params.lazyLoadingInPrevNextAmount&&b.params.lazyLoadingInPrevNextAmount>1){var a=b.params.lazyLoadingInPrevNextAmount,r=n,i=Math.min(b.activeIndex+r+Math.max(a,r),b.slides.length),s=Math.max(b.activeIndex-Math.max(r,a),0);for(t=b.activeIndex+n;t<i;t++)b.slides[t]&&b.lazy.loadImageInSlide(t);for(t=s;t<b.activeIndex;t++)b.slides[t]&&b.lazy.loadImageInSlide(t)}else{var o=b.wrapper.children("."+b.params.slideNextClass);o.length>0&&b.lazy.loadImageInSlide(o.index());var l=b.wrapper.children("."+b.params.slidePrevClass);l.length>0&&b.lazy.loadImageInSlide(l.index())}},onTransitionStart:function(){b.params.lazyLoading&&(b.params.lazyLoadingOnTransitionStart||!b.params.lazyLoadingOnTransitionStart&&!b.lazy.initialImageLoaded)&&b.lazy.load()},onTransitionEnd:function(){b.params.lazyLoading&&!b.params.lazyLoadingOnTransitionStart&&b.lazy.load()}},b.scrollbar={isTouched:!1,setDragPosition:function(e){var t=b.scrollbar,n=(b.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageX:e.pageX||e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageY:e.pageY||e.clientY)-t.track.offset()[b.isHorizontal()?"left":"top"]-t.dragSize/2,a=-b.minTranslate()*t.moveDivider,r=-b.maxTranslate()*t.moveDivider;n<a?n=a:n>r&&(n=r),n=-n/t.moveDivider,b.updateProgress(n),b.setWrapperTranslate(n,!0)},dragStart:function(e){var t=b.scrollbar;t.isTouched=!0,e.preventDefault(),e.stopPropagation(),t.setDragPosition(e),clearTimeout(t.dragTimeout),t.track.transition(0),b.params.scrollbarHide&&t.track.css("opacity",1),b.wrapper.transition(100),t.drag.transition(100),b.emit("onScrollbarDragStart",b)},dragMove:function(e){var t=b.scrollbar;t.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,t.setDragPosition(e),b.wrapper.transition(0),t.track.transition(0),t.drag.transition(0),b.emit("onScrollbarDragMove",b))},dragEnd:function(e){var t=b.scrollbar;t.isTouched&&(t.isTouched=!1,b.params.scrollbarHide&&(clearTimeout(t.dragTimeout),t.dragTimeout=setTimeout(function(){t.track.css("opacity",0),t.track.transition(400)},1e3)),b.emit("onScrollbarDragEnd",b),b.params.scrollbarSnapOnRelease&&b.slideReset())},draggableEvents:!1!==b.params.simulateTouch||b.support.touch?b.touchEvents:b.touchEventsDesktop,enableDraggable:function(){var t=b.scrollbar,n=b.support.touch?t.track:document;e(t.track).on(t.draggableEvents.start,t.dragStart),e(n).on(t.draggableEvents.move,t.dragMove),e(n).on(t.draggableEvents.end,t.dragEnd)},disableDraggable:function(){var t=b.scrollbar,n=b.support.touch?t.track:document;e(t.track).off(t.draggableEvents.start,t.dragStart),e(n).off(t.draggableEvents.move,t.dragMove),e(n).off(t.draggableEvents.end,t.dragEnd)},set:function(){if(b.params.scrollbar){var t=b.scrollbar;t.track=e(b.params.scrollbar),b.params.uniqueNavElements&&"string"==typeof b.params.scrollbar&&t.track.length>1&&1===b.container.find(b.params.scrollbar).length&&(t.track=b.container.find(b.params.scrollbar)),t.drag=t.track.find(".swiper-scrollbar-drag"),0===t.drag.length&&(t.drag=e('<div class="swiper-scrollbar-drag"></div>'),t.track.append(t.drag)),t.drag[0].style.width="",t.drag[0].style.height="",t.trackSize=b.isHorizontal()?t.track[0].offsetWidth:t.track[0].offsetHeight,t.divider=b.size/b.virtualSize,t.moveDivider=t.divider*(t.trackSize/b.size),t.dragSize=t.trackSize*t.divider,b.isHorizontal()?t.drag[0].style.width=t.dragSize+"px":t.drag[0].style.height=t.dragSize+"px",t.divider>=1?t.track[0].style.display="none":t.track[0].style.display="",b.params.scrollbarHide&&(t.track[0].style.opacity=0)}},setTranslate:function(){if(b.params.scrollbar){var e,t=b.scrollbar,n=(b.translate,t.dragSize);e=(t.trackSize-t.dragSize)*b.progress,b.rtl&&b.isHorizontal()?(e=-e)>0?(n=t.dragSize-e,e=0):-e+t.dragSize>t.trackSize&&(n=t.trackSize+e):e<0?(n=t.dragSize+e,e=0):e+t.dragSize>t.trackSize&&(n=t.trackSize-e),b.isHorizontal()?(b.support.transforms3d?t.drag.transform("translate3d("+e+"px, 0, 0)"):t.drag.transform("translateX("+e+"px)"),t.drag[0].style.width=n+"px"):(b.support.transforms3d?t.drag.transform("translate3d(0px, "+e+"px, 0)"):t.drag.transform("translateY("+e+"px)"),t.drag[0].style.height=n+"px"),b.params.scrollbarHide&&(clearTimeout(t.timeout),t.track[0].style.opacity=1,t.timeout=setTimeout(function(){t.track[0].style.opacity=0,t.track.transition(400)},1e3))}},setTransition:function(e){b.params.scrollbar&&b.scrollbar.drag.transition(e)}},b.controller={LinearSpline:function(e,t){var n=function(){var e,t,n;return function(a,r){for(t=-1,e=a.length;e-t>1;)a[n=e+t>>1]<=r?t=n:e=n;return e}}();this.x=e,this.y=t,this.lastIndex=e.length-1;var a,r;this.x.length;this.interpolate=function(e){return e?(r=n(this.x,e),a=r-1,(e-this.x[a])*(this.y[r]-this.y[a])/(this.x[r]-this.x[a])+this.y[a]):0}},getInterpolateFunction:function(e){b.controller.spline||(b.controller.spline=b.params.loop?new b.controller.LinearSpline(b.slidesGrid,e.slidesGrid):new b.controller.LinearSpline(b.snapGrid,e.snapGrid))},setTranslate:function(e,n){function a(t){e=t.rtl&&"horizontal"===t.params.direction?-b.translate:b.translate,"slide"===b.params.controlBy&&(b.controller.getInterpolateFunction(t),i=-b.controller.spline.interpolate(-e)),i&&"container"!==b.params.controlBy||(r=(t.maxTranslate()-t.minTranslate())/(b.maxTranslate()-b.minTranslate()),i=(e-b.minTranslate())*r+t.minTranslate()),b.params.controlInverse&&(i=t.maxTranslate()-i),t.updateProgress(i),t.setWrapperTranslate(i,!1,b),t.updateActiveIndex()}var r,i,s=b.params.control;if(Array.isArray(s))for(var o=0;o<s.length;o++)s[o]!==n&&s[o]instanceof t&&a(s[o]);else s instanceof t&&n!==s&&a(s)},setTransition:function(e,n){function a(t){t.setWrapperTransition(e,b),0!==e&&(t.onTransitionStart(),t.wrapper.transitionEnd(function(){i&&(t.params.loop&&"slide"===b.params.controlBy&&t.fixLoop(),t.onTransitionEnd())}))}var r,i=b.params.control;if(Array.isArray(i))for(r=0;r<i.length;r++)i[r]!==n&&i[r]instanceof t&&a(i[r]);else i instanceof t&&n!==i&&a(i)}},b.hashnav={onHashCange:function(e,t){var n=document.location.hash.replace("#","");n!==b.slides.eq(b.activeIndex).attr("data-hash")&&b.slideTo(b.wrapper.children("."+b.params.slideClass+'[data-hash="'+n+'"]').index())},attachEvents:function(t){var n=t?"off":"on";e(window)[n]("hashchange",b.hashnav.onHashCange)},setHash:function(){if(b.hashnav.initialized&&b.params.hashnav)if(b.params.replaceState&&window.history&&window.history.replaceState)window.history.replaceState(null,null,"#"+b.slides.eq(b.activeIndex).attr("data-hash")||"");else{var e=b.slides.eq(b.activeIndex),t=e.attr("data-hash")||e.attr("data-history");document.location.hash=t||""}},init:function(){if(b.params.hashnav&&!b.params.history){b.hashnav.initialized=!0;var e=document.location.hash.replace("#","");if(e)for(var t=0,n=b.slides.length;t<n;t++){var a=b.slides.eq(t);if((a.attr("data-hash")||a.attr("data-history"))===e&&!a.hasClass(b.params.slideDuplicateClass)){var r=a.index();b.slideTo(r,0,b.params.runCallbacksOnInit,!0)}}b.params.hashnavWatchState&&b.hashnav.attachEvents()}},destroy:function(){b.params.hashnavWatchState&&b.hashnav.attachEvents(!0)}},b.history={init:function(){if(b.params.history){if(!window.history||!window.history.pushState)return b.params.history=!1,void(b.params.hashnav=!0);b.history.initialized=!0,this.paths=this.getPathValues(),(this.paths.key||this.paths.value)&&(this.scrollToSlide(0,this.paths.value,b.params.runCallbacksOnInit),b.params.replaceState||window.addEventListener("popstate",this.setHistoryPopState))}},setHistoryPopState:function(){b.history.paths=b.history.getPathValues(),b.history.scrollToSlide(b.params.speed,b.history.paths.value,!1)},getPathValues:function(){var e=window.location.pathname.slice(1).split("/"),t=e.length;return{key:e[t-2],value:e[t-1]}},setHistory:function(e,t){if(b.history.initialized&&b.params.history){var n=b.slides.eq(t),a=this.slugify(n.attr("data-history"));window.location.pathname.includes(e)||(a=e+"/"+a),b.params.replaceState?window.history.replaceState(null,null,a):window.history.pushState(null,null,a)}},slugify:function(e){return e.toString().toLowerCase().replace(/\s+/g,"-").replace(/[^\w\-]+/g,"").replace(/\-\-+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},scrollToSlide:function(e,t,n){if(t)for(var a=0,r=b.slides.length;a<r;a++){var i=b.slides.eq(a);if(this.slugify(i.attr("data-history"))===t&&!i.hasClass(b.params.slideDuplicateClass)){var s=i.index();b.slideTo(s,e,n)}}else b.slideTo(0,e,n)}},b.disableKeyboardControl=function(){b.params.keyboardControl=!1,e(document).off("keydown",p)},b.enableKeyboardControl=function(){b.params.keyboardControl=!0,e(document).on("keydown",p)},b.mousewheel={event:!1,lastScrollTime:(new window.Date).getTime()},b.params.mousewheelControl&&(b.mousewheel.event=navigator.userAgent.indexOf("firefox")>-1?"DOMMouseScroll":function(){var e="onwheel"in document;if(!e){var t=document.createElement("div");t.setAttribute("onwheel","return;"),e="function"==typeof t.onwheel}return!e&&document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("","")&&(e=document.implementation.hasFeature("Events.wheel","3.0")),e}()?"wheel":"mousewheel"),b.disableMousewheelControl=function(){if(!b.mousewheel.event)return!1;var t=b.container;return"container"!==b.params.mousewheelEventsTarged&&(t=e(b.params.mousewheelEventsTarged)),t.off(b.mousewheel.event,d),b.params.mousewheelControl=!1,!0},b.enableMousewheelControl=function(){if(!b.mousewheel.event)return!1;var t=b.container;return"container"!==b.params.mousewheelEventsTarged&&(t=e(b.params.mousewheelEventsTarged)),t.on(b.mousewheel.event,d),b.params.mousewheelControl=!0,!0},b.parallax={setTranslate:function(){b.container.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(){c(this,b.progress)}),b.slides.each(function(){var t=e(this);t.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(){c(this,Math.min(Math.max(t[0].progress,-1),1))})})},setTransition:function(t){void 0===t&&(t=b.params.speed),b.container.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(){var n=e(this),a=parseInt(n.attr("data-swiper-parallax-duration"),10)||t;0===t&&(a=0),n.transition(a)})}},b.zoom={scale:1,currentScale:1,isScaling:!1,gesture:{slide:void 0,slideWidth:void 0,slideHeight:void 0,image:void 0,imageWrap:void 0,zoomMax:b.params.zoomMax},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0},getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,n=e.targetTouches[0].pageY,a=e.targetTouches[1].pageX,r=e.targetTouches[1].pageY;return Math.sqrt(Math.pow(a-t,2)+Math.pow(r-n,2))},onGestureStart:function(t){var n=b.zoom;if(!b.support.gestures){if("touchstart"!==t.type||"touchstart"===t.type&&t.targetTouches.length<2)return;n.gesture.scaleStart=n.getDistanceBetweenTouches(t)}n.gesture.slide&&n.gesture.slide.length||(n.gesture.slide=e(this),0===n.gesture.slide.length&&(n.gesture.slide=b.slides.eq(b.activeIndex)),n.gesture.image=n.gesture.slide.find("img, svg, canvas"),n.gesture.imageWrap=n.gesture.image.parent("."+b.params.zoomContainerClass),n.gesture.zoomMax=n.gesture.imageWrap.attr("data-swiper-zoom")||b.params.zoomMax,0!==n.gesture.imageWrap.length)?(n.gesture.image.transition(0),n.isScaling=!0):n.gesture.image=void 0},onGestureChange:function(e){var t=b.zoom;if(!b.support.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;t.gesture.scaleMove=t.getDistanceBetweenTouches(e)}t.gesture.image&&0!==t.gesture.image.length&&(b.support.gestures?t.scale=e.scale*t.currentScale:t.scale=t.gesture.scaleMove/t.gesture.scaleStart*t.currentScale,t.scale>t.gesture.zoomMax&&(t.scale=t.gesture.zoomMax-1+Math.pow(t.scale-t.gesture.zoomMax+1,.5)),t.scale<b.params.zoomMin&&(t.scale=b.params.zoomMin+1-Math.pow(b.params.zoomMin-t.scale+1,.5)),t.gesture.image.transform("translate3d(0,0,0) scale("+t.scale+")"))},onGestureEnd:function(e){var t=b.zoom;!b.support.gestures&&("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2)||t.gesture.image&&0!==t.gesture.image.length&&(t.scale=Math.max(Math.min(t.scale,t.gesture.zoomMax),b.params.zoomMin),t.gesture.image.transition(b.params.speed).transform("translate3d(0,0,0) scale("+t.scale+")"),t.currentScale=t.scale,t.isScaling=!1,1===t.scale&&(t.gesture.slide=void 0))},onTouchStart:function(e,t){var n=e.zoom;n.gesture.image&&0!==n.gesture.image.length&&(n.image.isTouched||("android"===e.device.os&&t.preventDefault(),n.image.isTouched=!0,n.image.touchesStart.x="touchstart"===t.type?t.targetTouches[0].pageX:t.pageX,n.image.touchesStart.y="touchstart"===t.type?t.targetTouches[0].pageY:t.pageY))},onTouchMove:function(e){var t=b.zoom;if(t.gesture.image&&0!==t.gesture.image.length&&(b.allowClick=!1,t.image.isTouched&&t.gesture.slide)){t.image.isMoved||(t.image.width=t.gesture.image[0].offsetWidth,t.image.height=t.gesture.image[0].offsetHeight,t.image.startX=b.getTranslate(t.gesture.imageWrap[0],"x")||0,t.image.startY=b.getTranslate(t.gesture.imageWrap[0],"y")||0,t.gesture.slideWidth=t.gesture.slide[0].offsetWidth,t.gesture.slideHeight=t.gesture.slide[0].offsetHeight,t.gesture.imageWrap.transition(0),b.rtl&&(t.image.startX=-t.image.startX),b.rtl&&(t.image.startY=-t.image.startY));var n=t.image.width*t.scale,a=t.image.height*t.scale;if(!(n<t.gesture.slideWidth&&a<t.gesture.slideHeight)){if(t.image.minX=Math.min(t.gesture.slideWidth/2-n/2,0),t.image.maxX=-t.image.minX,t.image.minY=Math.min(t.gesture.slideHeight/2-a/2,0),t.image.maxY=-t.image.minY,t.image.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,t.image.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!t.image.isMoved&&!t.isScaling){if(b.isHorizontal()&&Math.floor(t.image.minX)===Math.floor(t.image.startX)&&t.image.touchesCurrent.x<t.image.touchesStart.x||Math.floor(t.image.maxX)===Math.floor(t.image.startX)&&t.image.touchesCurrent.x>t.image.touchesStart.x)return void(t.image.isTouched=!1);if(!b.isHorizontal()&&Math.floor(t.image.minY)===Math.floor(t.image.startY)&&t.image.touchesCurrent.y<t.image.touchesStart.y||Math.floor(t.image.maxY)===Math.floor(t.image.startY)&&t.image.touchesCurrent.y>t.image.touchesStart.y)return void(t.image.isTouched=!1)}e.preventDefault(),e.stopPropagation(),t.image.isMoved=!0,t.image.currentX=t.image.touchesCurrent.x-t.image.touchesStart.x+t.image.startX,t.image.currentY=t.image.touchesCurrent.y-t.image.touchesStart.y+t.image.startY,t.image.currentX<t.image.minX&&(t.image.currentX=t.image.minX+1-Math.pow(t.image.minX-t.image.currentX+1,.8)),t.image.currentX>t.image.maxX&&(t.image.currentX=t.image.maxX-1+Math.pow(t.image.currentX-t.image.maxX+1,.8)),t.image.currentY<t.image.minY&&(t.image.currentY=t.image.minY+1-Math.pow(t.image.minY-t.image.currentY+1,.8)),t.image.currentY>t.image.maxY&&(t.image.currentY=t.image.maxY-1+Math.pow(t.image.currentY-t.image.maxY+1,.8)),t.velocity.prevPositionX||(t.velocity.prevPositionX=t.image.touchesCurrent.x),t.velocity.prevPositionY||(t.velocity.prevPositionY=t.image.touchesCurrent.y),t.velocity.prevTime||(t.velocity.prevTime=Date.now()),t.velocity.x=(t.image.touchesCurrent.x-t.velocity.prevPositionX)/(Date.now()-t.velocity.prevTime)/2,t.velocity.y=(t.image.touchesCurrent.y-t.velocity.prevPositionY)/(Date.now()-t.velocity.prevTime)/2,Math.abs(t.image.touchesCurrent.x-t.velocity.prevPositionX)<2&&(t.velocity.x=0),Math.abs(t.image.touchesCurrent.y-t.velocity.prevPositionY)<2&&(t.velocity.y=0),t.velocity.prevPositionX=t.image.touchesCurrent.x,t.velocity.prevPositionY=t.image.touchesCurrent.y,t.velocity.prevTime=Date.now(),t.gesture.imageWrap.transform("translate3d("+t.image.currentX+"px, "+t.image.currentY+"px,0)")}}},onTouchEnd:function(e,t){var n=e.zoom;if(n.gesture.image&&0!==n.gesture.image.length){if(!n.image.isTouched||!n.image.isMoved)return n.image.isTouched=!1,void(n.image.isMoved=!1);n.image.isTouched=!1,n.image.isMoved=!1;var a=300,r=300,i=n.velocity.x*a,s=n.image.currentX+i,o=n.velocity.y*r,l=n.image.currentY+o;0!==n.velocity.x&&(a=Math.abs((s-n.image.currentX)/n.velocity.x)),0!==n.velocity.y&&(r=Math.abs((l-n.image.currentY)/n.velocity.y));var p=Math.max(a,r);n.image.currentX=s,n.image.currentY=l;var u=n.image.width*n.scale,d=n.image.height*n.scale;n.image.minX=Math.min(n.gesture.slideWidth/2-u/2,0),n.image.maxX=-n.image.minX,n.image.minY=Math.min(n.gesture.slideHeight/2-d/2,0),n.image.maxY=-n.image.minY,n.image.currentX=Math.max(Math.min(n.image.currentX,n.image.maxX),n.image.minX),n.image.currentY=Math.max(Math.min(n.image.currentY,n.image.maxY),n.image.minY),n.gesture.imageWrap.transition(p).transform("translate3d("+n.image.currentX+"px, "+n.image.currentY+"px,0)")}},onTransitionEnd:function(e){var t=e.zoom;t.gesture.slide&&e.previousIndex!==e.activeIndex&&(t.gesture.image.transform("translate3d(0,0,0) scale(1)"),t.gesture.imageWrap.transform("translate3d(0,0,0)"),t.gesture.slide=t.gesture.image=t.gesture.imageWrap=void 0,t.scale=t.currentScale=1)},toggleZoom:function(t,n){var a=t.zoom;if(a.gesture.slide||(a.gesture.slide=t.clickedSlide?e(t.clickedSlide):t.slides.eq(t.activeIndex),a.gesture.image=a.gesture.slide.find("img, svg, canvas"),a.gesture.imageWrap=a.gesture.image.parent("."+t.params.zoomContainerClass)),a.gesture.image&&0!==a.gesture.image.length){var r,i,s,o,l,p,u,d,c,f,h,m,g,v,y,w;void 0===a.image.touchesStart.x&&n?(r="touchend"===n.type?n.changedTouches[0].pageX:n.pageX,i="touchend"===n.type?n.changedTouches[0].pageY:n.pageY):(r=a.image.touchesStart.x,i=a.image.touchesStart.y),a.scale&&1!==a.scale?(a.scale=a.currentScale=1,a.gesture.imageWrap.transition(300).transform("translate3d(0,0,0)"),a.gesture.image.transition(300).transform("translate3d(0,0,0) scale(1)"),a.gesture.slide=void 0):(a.scale=a.currentScale=a.gesture.imageWrap.attr("data-swiper-zoom")||t.params.zoomMax,n?(y=a.gesture.slide[0].offsetWidth,w=a.gesture.slide[0].offsetHeight,s=a.gesture.slide.offset().left+y/2-r,o=a.gesture.slide.offset().top+w/2-i,u=a.gesture.image[0].offsetWidth,d=a.gesture.image[0].offsetHeight,c=u*a.scale,f=d*a.scale,g=-(h=Math.min(y/2-c/2,0)),v=-(m=Math.min(w/2-f/2,0)),l=s*a.scale,p=o*a.scale,l<h&&(l=h),l>g&&(l=g),p<m&&(p=m),p>v&&(p=v)):(l=0,p=0),a.gesture.imageWrap.transition(300).transform("translate3d("+l+"px, "+p+"px,0)"),a.gesture.image.transition(300).transform("translate3d(0,0,0) scale("+a.scale+")"))}},attachEvents:function(t){var n=t?"off":"on";if(b.params.zoom){b.slides;var a=!("touchstart"!==b.touchEvents.start||!b.support.passiveListener||!b.params.passiveListeners)&&{passive:!0,capture:!1};b.support.gestures?(b.slides[n]("gesturestart",b.zoom.onGestureStart,a),b.slides[n]("gesturechange",b.zoom.onGestureChange,a),b.slides[n]("gestureend",b.zoom.onGestureEnd,a)):"touchstart"===b.touchEvents.start&&(b.slides[n](b.touchEvents.start,b.zoom.onGestureStart,a),b.slides[n](b.touchEvents.move,b.zoom.onGestureChange,a),b.slides[n](b.touchEvents.end,b.zoom.onGestureEnd,a)),b[n]("touchStart",b.zoom.onTouchStart),b.slides.each(function(t,a){e(a).find("."+b.params.zoomContainerClass).length>0&&e(a)[n](b.touchEvents.move,b.zoom.onTouchMove)}),b[n]("touchEnd",b.zoom.onTouchEnd),b[n]("transitionEnd",b.zoom.onTransitionEnd),b.params.zoomToggle&&b.on("doubleTap",b.zoom.toggleZoom)}},init:function(){b.zoom.attachEvents()},destroy:function(){b.zoom.attachEvents(!0)}},b._plugins=[];for(var q in b.plugins){var j=b.plugins[q](b,b.params[q]);j&&b._plugins.push(j)}return b.callPlugins=function(e){for(var t=0;t<b._plugins.length;t++)e in b._plugins[t]&&b._plugins[t][e](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5])},b.emitterEventListeners={},b.emit=function(e){b.params[e]&&b.params[e](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);var t;if(b.emitterEventListeners[e])for(t=0;t<b.emitterEventListeners[e].length;t++)b.emitterEventListeners[e][t](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);b.callPlugins&&b.callPlugins(e,arguments[1],arguments[2],arguments[3],arguments[4],arguments[5])},b.on=function(e,t){return e=f(e),b.emitterEventListeners[e]||(b.emitterEventListeners[e]=[]),b.emitterEventListeners[e].push(t),b},b.off=function(e,t){var n;if(e=f(e),void 0===t)return b.emitterEventListeners[e]=[],b;if(b.emitterEventListeners[e]&&0!==b.emitterEventListeners[e].length){for(n=0;n<b.emitterEventListeners[e].length;n++)b.emitterEventListeners[e][n]===t&&b.emitterEventListeners[e].splice(n,1);return b}},b.once=function(e,t){e=f(e);var n=function(){t(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4]),b.off(e,n)};return b.on(e,n),b},b.a11y={makeFocusable:function(e){return e.attr("tabIndex","0"),e},addRole:function(e,t){return e.attr("role",t),e},addLabel:function(e,t){return e.attr("aria-label",t),e},disable:function(e){return e.attr("aria-disabled",!0),e},enable:function(e){return e.attr("aria-disabled",!1),e},onEnterKey:function(t){13===t.keyCode&&(e(t.target).is(b.params.nextButton)?(b.onClickNext(t),b.isEnd?b.a11y.notify(b.params.lastSlideMessage):b.a11y.notify(b.params.nextSlideMessage)):e(t.target).is(b.params.prevButton)&&(b.onClickPrev(t),b.isBeginning?b.a11y.notify(b.params.firstSlideMessage):b.a11y.notify(b.params.prevSlideMessage)),e(t.target).is("."+b.params.bulletClass)&&e(t.target)[0].click())},liveRegion:e('<span class="'+b.params.notificationClass+'" aria-live="assertive" aria-atomic="true"></span>'),notify:function(e){var t=b.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},init:function(){b.params.nextButton&&b.nextButton&&b.nextButton.length>0&&(b.a11y.makeFocusable(b.nextButton),b.a11y.addRole(b.nextButton,"button"),b.a11y.addLabel(b.nextButton,b.params.nextSlideMessage)),b.params.prevButton&&b.prevButton&&b.prevButton.length>0&&(b.a11y.makeFocusable(b.prevButton),b.a11y.addRole(b.prevButton,"button"),b.a11y.addLabel(b.prevButton,b.params.prevSlideMessage)),e(b.container).append(b.a11y.liveRegion)},initPagination:function(){b.params.pagination&&b.params.paginationClickable&&b.bullets&&b.bullets.length&&b.bullets.each(function(){var t=e(this);b.a11y.makeFocusable(t),b.a11y.addRole(t,"button"),b.a11y.addLabel(t,b.params.paginationBulletMessage.replace(/{{index}}/,t.index()+1))})},destroy:function(){b.a11y.liveRegion&&b.a11y.liveRegion.length>0&&b.a11y.liveRegion.remove()}},b.init=function(){b.params.loop&&b.createLoop(),b.updateContainerSize(),b.updateSlidesSize(),b.updatePagination(),b.params.scrollbar&&b.scrollbar&&(b.scrollbar.set(),b.params.scrollbarDraggable&&b.scrollbar.enableDraggable()),"slide"!==b.params.effect&&b.effects[b.params.effect]&&(b.params.loop||b.updateProgress(),b.effects[b.params.effect].setTranslate()),b.params.loop?b.slideTo(b.params.initialSlide+b.loopedSlides,0,b.params.runCallbacksOnInit):(b.slideTo(b.params.initialSlide,0,b.params.runCallbacksOnInit),0===b.params.initialSlide&&(b.parallax&&b.params.parallax&&b.parallax.setTranslate(),b.lazy&&b.params.lazyLoading&&(b.lazy.load(),b.lazy.initialImageLoaded=!0))),b.attachEvents(),b.params.observer&&b.support.observer&&b.initObservers(),b.params.preloadImages&&!b.params.lazyLoading&&b.preloadImages(),b.params.zoom&&b.zoom&&b.zoom.init(),b.params.autoplay&&b.startAutoplay(),b.params.keyboardControl&&b.enableKeyboardControl&&b.enableKeyboardControl(),b.params.mousewheelControl&&b.enableMousewheelControl&&b.enableMousewheelControl(),b.params.hashnavReplaceState&&(b.params.replaceState=b.params.hashnavReplaceState),b.params.history&&b.history&&b.history.init(),b.params.hashnav&&b.hashnav&&b.hashnav.init(),b.params.a11y&&b.a11y&&b.a11y.init(),b.emit("onInit",b)},b.cleanupStyles=function(){b.container.removeClass(b.classNames.join(" ")).removeAttr("style"),b.wrapper.removeAttr("style"),b.slides&&b.slides.length&&b.slides.removeClass([b.params.slideVisibleClass,b.params.slideActiveClass,b.params.slideNextClass,b.params.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-column").removeAttr("data-swiper-row"),b.paginationContainer&&b.paginationContainer.length&&b.paginationContainer.removeClass(b.params.paginationHiddenClass),b.bullets&&b.bullets.length&&b.bullets.removeClass(b.params.bulletActiveClass),b.params.prevButton&&e(b.params.prevButton).removeClass(b.params.buttonDisabledClass),b.params.nextButton&&e(b.params.nextButton).removeClass(b.params.buttonDisabledClass),b.params.scrollbar&&b.scrollbar&&(b.scrollbar.track&&b.scrollbar.track.length&&b.scrollbar.track.removeAttr("style"),b.scrollbar.drag&&b.scrollbar.drag.length&&b.scrollbar.drag.removeAttr("style"))},b.destroy=function(e,t){b.detachEvents(),b.stopAutoplay(),b.params.scrollbar&&b.scrollbar&&b.params.scrollbarDraggable&&b.scrollbar.disableDraggable(),b.params.loop&&b.destroyLoop(),t&&b.cleanupStyles(),b.disconnectObservers(),b.params.zoom&&b.zoom&&b.zoom.destroy(),b.params.keyboardControl&&b.disableKeyboardControl&&b.disableKeyboardControl(),b.params.mousewheelControl&&b.disableMousewheelControl&&b.disableMousewheelControl(),b.params.a11y&&b.a11y&&b.a11y.destroy(),b.params.history&&!b.params.replaceState&&window.removeEventListener("popstate",b.history.setHistoryPopState),b.params.hashnav&&b.hashnav&&b.hashnav.destroy(),b.emit("onDestroy"),!1!==e&&(b=null)},b.init(),b}};t.prototype={isSafari:function(){var e=window.navigator.userAgent.toLowerCase();return e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0}(),isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent),isArray:function(e){return"[object Array]"===Object.prototype.toString.apply(e)},browser:{ie:window.navigator.pointerEnabled||window.navigator.msPointerEnabled,ieTouch:window.navigator.msPointerEnabled&&window.navigator.msMaxTouchPoints>1||window.navigator.pointerEnabled&&window.navigator.maxTouchPoints>1,lteIE9:function(){var e=document.createElement("div");return e.innerHTML="\x3c!--[if lte IE 9]><i></i><![endif]--\x3e",1===e.getElementsByTagName("i").length}()},device:function(){var e=window.navigator.userAgent,t=e.match(/(Android);?[\s\/]+([\d.]+)?/),n=e.match(/(iPad).*OS\s([\d_]+)/),a=e.match(/(iPod)(.*OS\s([\d_]+))?/),r=!n&&e.match(/(iPhone\sOS|iOS)\s([\d_]+)/);return{ios:n||r||a,android:t}}(),support:{touch:window.Modernizr&&!0===Modernizr.touch||!!("ontouchstart"in window||window.DocumentTouch&&document instanceof DocumentTouch),transforms3d:window.Modernizr&&!0===Modernizr.csstransforms3d||function(){var e=document.createElement("div").style;return"webkitPerspective"in e||"MozPerspective"in e||"OPerspective"in e||"MsPerspective"in e||"perspective"in e}(),flexbox:function(){for(var e=document.createElement("div").style,t="alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient".split(" "),n=0;n<t.length;n++)if(t[n]in e)return!0}(),observer:"MutationObserver"in window||"WebkitMutationObserver"in window,passiveListener:function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});window.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:"ongesturestart"in window},plugins:{}};for(var n=function(){var e=function(e){var t=this,n=0;for(n=0;n<e.length;n++)t[n]=e[n];return t.length=e.length,this},t=function(t,n){var a=[],r=0;if(t&&!n&&t instanceof e)return t;if(t)if("string"==typeof t){var i,s,o=t.trim();if(o.indexOf("<")>=0&&o.indexOf(">")>=0){var l="div";for(0===o.indexOf("<li")&&(l="ul"),0===o.indexOf("<tr")&&(l="tbody"),0!==o.indexOf("<td")&&0!==o.indexOf("<th")||(l="tr"),0===o.indexOf("<tbody")&&(l="table"),0===o.indexOf("<option")&&(l="select"),(s=document.createElement(l)).innerHTML=t,r=0;r<s.childNodes.length;r++)a.push(s.childNodes[r])}else for(i=n||"#"!==t[0]||t.match(/[ .<>:~]/)?(n||document).querySelectorAll(t):[document.getElementById(t.split("#")[1])],r=0;r<i.length;r++)i[r]&&a.push(i[r])}else if(t.nodeType||t===window||t===document)a.push(t);else if(t.length>0&&t[0].nodeType)for(r=0;r<t.length;r++)a.push(t[r]);return new e(a)};return e.prototype={addClass:function(e){if(void 0===e)return this;for(var t=e.split(" "),n=0;n<t.length;n++)for(var a=0;a<this.length;a++)this[a].classList.add(t[n]);return this},removeClass:function(e){for(var t=e.split(" "),n=0;n<t.length;n++)for(var a=0;a<this.length;a++)this[a].classList.remove(t[n]);return this},hasClass:function(e){return!!this[0]&&this[0].classList.contains(e)},toggleClass:function(e){for(var t=e.split(" "),n=0;n<t.length;n++)for(var a=0;a<this.length;a++)this[a].classList.toggle(t[n]);return this},attr:function(e,t){if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var n=0;n<this.length;n++)if(2===arguments.length)this[n].setAttribute(e,t);else for(var a in e)this[n][a]=e[a],this[n].setAttribute(a,e[a]);return this},removeAttr:function(e){for(var t=0;t<this.length;t++)this[t].removeAttribute(e);return this},data:function(e,t){if(void 0!==t){for(var n=0;n<this.length;n++){var a=this[n];a.dom7ElementDataStorage||(a.dom7ElementDataStorage={}),a.dom7ElementDataStorage[e]=t}return this}if(this[0]){var r=this[0].getAttribute("data-"+e);return r||(this[0].dom7ElementDataStorage&&e in this[0].dom7ElementDataStorage?this[0].dom7ElementDataStorage[e]:void 0)}},transform:function(e){for(var t=0;t<this.length;t++){var n=this[t].style;n.webkitTransform=n.MsTransform=n.msTransform=n.MozTransform=n.OTransform=n.transform=e}return this},transition:function(e){"string"!=typeof e&&(e+="ms");for(var t=0;t<this.length;t++){var n=this[t].style;n.webkitTransitionDuration=n.MsTransitionDuration=n.msTransitionDuration=n.MozTransitionDuration=n.OTransitionDuration=n.transitionDuration=e}return this},on:function(e,n,a,r){function i(e){var r=e.target;if(t(r).is(n))a.call(r,e);else for(var i=t(r).parents(),s=0;s<i.length;s++)t(i[s]).is(n)&&a.call(i[s],e)}var s,o,l=e.split(" ");for(s=0;s<this.length;s++)if("function"==typeof n||!1===n)for("function"==typeof n&&(a=arguments[1],r=arguments[2]||!1),o=0;o<l.length;o++)this[s].addEventListener(l[o],a,r);else for(o=0;o<l.length;o++)this[s].dom7LiveListeners||(this[s].dom7LiveListeners=[]),this[s].dom7LiveListeners.push({listener:a,liveListener:i}),this[s].addEventListener(l[o],i,r);return this},off:function(e,t,n,a){for(var r=e.split(" "),i=0;i<r.length;i++)for(var s=0;s<this.length;s++)if("function"==typeof t||!1===t)"function"==typeof t&&(n=arguments[1],a=arguments[2]||!1),this[s].removeEventListener(r[i],n,a);else if(this[s].dom7LiveListeners)for(var o=0;o<this[s].dom7LiveListeners.length;o++)this[s].dom7LiveListeners[o].listener===n&&this[s].removeEventListener(r[i],this[s].dom7LiveListeners[o].liveListener,a);return this},once:function(e,t,n,a){function r(s){n(s),i.off(e,t,r,a)}var i=this;"function"==typeof t&&(t=!1,n=arguments[1],a=arguments[2]),i.on(e,t,r,a)},trigger:function(e,t){for(var n=0;n<this.length;n++){var a;try{a=new window.CustomEvent(e,{detail:t,bubbles:!0,cancelable:!0})}catch(n){(a=document.createEvent("Event")).initEvent(e,!0,!0),a.detail=t}this[n].dispatchEvent(a)}return this},transitionEnd:function(e){function t(i){if(i.target===this)for(e.call(this,i),n=0;n<a.length;n++)r.off(a[n],t)}var n,a=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],r=this;if(e)for(n=0;n<a.length;n++)r.on(a[n],t);return this},width:function(){return this[0]===window?window.innerWidth:this.length>0?parseFloat(this.css("width")):null},outerWidth:function(e){return this.length>0?e?this[0].offsetWidth+parseFloat(this.css("margin-right"))+parseFloat(this.css("margin-left")):this[0].offsetWidth:null},height:function(){return this[0]===window?window.innerHeight:this.length>0?parseFloat(this.css("height")):null},outerHeight:function(e){return this.length>0?e?this[0].offsetHeight+parseFloat(this.css("margin-top"))+parseFloat(this.css("margin-bottom")):this[0].offsetHeight:null},offset:function(){if(this.length>0){var e=this[0],t=e.getBoundingClientRect(),n=document.body,a=e.clientTop||n.clientTop||0,r=e.clientLeft||n.clientLeft||0,i=window.pageYOffset||e.scrollTop,s=window.pageXOffset||e.scrollLeft;return{top:t.top+i-a,left:t.left+s-r}}return null},css:function(e,t){var n;if(1===arguments.length){if("string"!=typeof e){for(n=0;n<this.length;n++)for(var a in e)this[n].style[a]=e[a];return this}if(this[0])return window.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&"string"==typeof e){for(n=0;n<this.length;n++)this[n].style[e]=t;return this}return this},each:function(e){for(var t=0;t<this.length;t++)e.call(this[t],t,this[t]);return this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:void 0;for(var t=0;t<this.length;t++)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t++)this[t].textContent=e;return this},is:function(n){if(!this[0])return!1;var a,r;if("string"==typeof n){var i=this[0];if(i===document)return n===document;if(i===window)return n===window;if(i.matches)return i.matches(n);if(i.webkitMatchesSelector)return i.webkitMatchesSelector(n);if(i.mozMatchesSelector)return i.mozMatchesSelector(n);if(i.msMatchesSelector)return i.msMatchesSelector(n);for(a=t(n),r=0;r<a.length;r++)if(a[r]===this[0])return!0;return!1}if(n===document)return this[0]===document;if(n===window)return this[0]===window;if(n.nodeType||n instanceof e){for(a=n.nodeType?[n]:n,r=0;r<a.length;r++)if(a[r]===this[0])return!0;return!1}return!1},index:function(){if(this[0]){for(var e=this[0],t=0;null!==(e=e.previousSibling);)1===e.nodeType&&t++;return t}},eq:function(t){if(void 0===t)return this;var n,a=this.length;return t>a-1?new e([]):t<0?(n=a+t,new e(n<0?[]:[this[n]])):new e([this[t]])},append:function(t){var n,a;for(n=0;n<this.length;n++)if("string"==typeof t){var r=document.createElement("div");for(r.innerHTML=t;r.firstChild;)this[n].appendChild(r.firstChild)}else if(t instanceof e)for(a=0;a<t.length;a++)this[n].appendChild(t[a]);else this[n].appendChild(t);return this},prepend:function(t){var n,a;for(n=0;n<this.length;n++)if("string"==typeof t){var r=document.createElement("div");for(r.innerHTML=t,a=r.childNodes.length-1;a>=0;a--)this[n].insertBefore(r.childNodes[a],this[n].childNodes[0])}else if(t instanceof e)for(a=0;a<t.length;a++)this[n].insertBefore(t[a],this[n].childNodes[0]);else this[n].insertBefore(t,this[n].childNodes[0]);return this},insertBefore:function(e){for(var n=t(e),a=0;a<this.length;a++)if(1===n.length)n[0].parentNode.insertBefore(this[a],n[0]);else if(n.length>1)for(var r=0;r<n.length;r++)n[r].parentNode.insertBefore(this[a].cloneNode(!0),n[r])},insertAfter:function(e){for(var n=t(e),a=0;a<this.length;a++)if(1===n.length)n[0].parentNode.insertBefore(this[a],n[0].nextSibling);else if(n.length>1)for(var r=0;r<n.length;r++)n[r].parentNode.insertBefore(this[a].cloneNode(!0),n[r].nextSibling)},next:function(n){return new e(this.length>0?n?this[0].nextElementSibling&&t(this[0].nextElementSibling).is(n)?[this[0].nextElementSibling]:[]:this[0].nextElementSibling?[this[0].nextElementSibling]:[]:[])},nextAll:function(n){var a=[],r=this[0];if(!r)return new e([]);for(;r.nextElementSibling;){var i=r.nextElementSibling;n?t(i).is(n)&&a.push(i):a.push(i),r=i}return new e(a)},prev:function(n){return new e(this.length>0?n?this[0].previousElementSibling&&t(this[0].previousElementSibling).is(n)?[this[0].previousElementSibling]:[]:this[0].previousElementSibling?[this[0].previousElementSibling]:[]:[])},prevAll:function(n){var a=[],r=this[0];if(!r)return new e([]);for(;r.previousElementSibling;){var i=r.previousElementSibling;n?t(i).is(n)&&a.push(i):a.push(i),r=i}return new e(a)},parent:function(e){for(var n=[],a=0;a<this.length;a++)e?t(this[a].parentNode).is(e)&&n.push(this[a].parentNode):n.push(this[a].parentNode);return t(t.unique(n))},parents:function(e){for(var n=[],a=0;a<this.length;a++)for(var r=this[a].parentNode;r;)e?t(r).is(e)&&n.push(r):n.push(r),r=r.parentNode;return t(t.unique(n))},find:function(t){for(var n=[],a=0;a<this.length;a++)for(var r=this[a].querySelectorAll(t),i=0;i<r.length;i++)n.push(r[i]);return new e(n)},children:function(n){for(var a=[],r=0;r<this.length;r++)for(var i=this[r].childNodes,s=0;s<i.length;s++)n?1===i[s].nodeType&&t(i[s]).is(n)&&a.push(i[s]):1===i[s].nodeType&&a.push(i[s]);return new e(t.unique(a))},remove:function(){for(var e=0;e<this.length;e++)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this},add:function(){var e,n,a=this;for(e=0;e<arguments.length;e++){var r=t(arguments[e]);for(n=0;n<r.length;n++)a[a.length]=r[n],a.length++}return a}},t.fn=e.prototype,t.unique=function(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t},t}(),a=["jQuery","Zepto","Dom7"],r=0;r<a.length;r++)window[a[r]]&&function(e){e.fn.swiper=function(n){var a;return e(this).each(function(){var e=new t(this,n);a||(a=e)}),a}}(window[a[r]]);var i;(i=void 0===n?window.Dom7||window.Zepto||window.jQuery:n)&&("transitionEnd"in i.fn||(i.fn.transitionEnd=function(e){function t(i){if(i.target===this)for(e.call(this,i),n=0;n<a.length;n++)r.off(a[n],t)}var n,a=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],r=this;if(e)for(n=0;n<a.length;n++)r.on(a[n],t);return this}),"transform"in i.fn||(i.fn.transform=function(e){for(var t=0;t<this.length;t++){var n=this[t].style;n.webkitTransform=n.MsTransform=n.msTransform=n.MozTransform=n.OTransform=n.transform=e}return this}),"transition"in i.fn||(i.fn.transition=function(e){"string"!=typeof e&&(e+="ms");for(var t=0;t<this.length;t++){var n=this[t].style;n.webkitTransitionDuration=n.MsTransitionDuration=n.msTransitionDuration=n.MozTransitionDuration=n.OTransitionDuration=n.transitionDuration=e}return this}),"outerWidth"in i.fn||(i.fn.outerWidth=function(e){return this.length>0?e?this[0].offsetWidth+parseFloat(this.css("margin-right"))+parseFloat(this.css("margin-left")):this[0].offsetWidth:null})),window.Swiper=t}(),"undefined"!=typeof module?module.exports=window.Swiper:"function"==typeof define&&define.amd&&define([],function(){"use strict";return window.Swiper});var swiper=new Swiper(".swiper1",{pagination:".swiper-pagination",nextButton:".swiper-button-next",prevButton:".swiper-button-prev",paginationClickable:!0,spaceBetween:30,centeredSlides:!0,autoplay:5e3,autoplayDisableOnInteraction:!1,watchSlidesProgress:!0});if(document.documentElement.clientWidth<768)var swiper=new Swiper(".swiper2",{prevButton:".swiper-button-prev",nextButton:".swiper-button-next",slidesPerView:1,paginationClickable:!0,spaceBetween:30,freeMode:!0});if(document.documentElement.clientWidth>768)var swiper=new Swiper(".swiper2",{prevButton:".swiper-button-prev",nextButton:".swiper-button-next",slidesPerView:4,paginationClickable:!0,spaceBetween:30,freeMode:!0});if(document.documentElement.clientWidth<768)var swiper=new Swiper(".swiper3",{prevButton:".swiper-button-prev",nextButton:".swiper-button-next",slidesPerView:1,paginationClickable:!0,spaceBetween:30,freeMode:!0});if(document.documentElement.clientWidth>768)var swiper=new Swiper(".swiper3",{prevButton:".swiper-button-prev",nextButton:".swiper-button-next",slidesPerView:2,paginationClickable:!0,spaceBetween:30,freeMode:!0});if(document.documentElement.clientWidth<768)var swiper=new Swiper(".swiper4",{prevButton:".swiper-button-prev",nextButton:".swiper-button-next",slidesPerView:1,paginationClickable:!0,spaceBetween:30,freeMode:!0});if(document.documentElement.clientWidth>768)var swiper=new Swiper(".swiper4",{prevButton:".swiper-button-prev",nextButton:".swiper-button-next",slidesPerView:2,paginationClickable:!0,spaceBetween:30,freeMode:!0});var searchBtn=document.querySelector(".nav-main__search-icon"),searchWin=document.querySelector(".nav-main__search-window");searchBtn.addEventListener("click",function(e){e.preventDefault(),searchWin.classList.toggle("nav-main__search-window--open")});var navOpen=document.querySelector(".nav-main__toggle-open"),navMob=document.querySelector(".nav-main__list"),navSoc=document.querySelector(".nav-main__social");navOpen.addEventListener("click",function(e){e.preventDefault(),navMob.classList.toggle("nav-main__list--open"),navOpen.classList.toggle("nav-main__toggle-open--close"),navSoc.classList.toggle("nav-main__social--open")}),document.documentElement.clientWidth>768&&$(window).scroll(function(){$(window).scrollTop()>179?$(".nav-main__wrapper").addClass("nav-main__wrapper--fixed"):$(".nav-main__wrapper").removeClass("nav-main__wrapper--fixed")}),document.documentElement.clientWidth>992&&$(window).scroll(function(){$(window).scrollTop()>199?$(".nav-main__wrapper").addClass("nav-main__wrapper--fixed"):$(".nav-main__wrapper").removeClass("nav-main__wrapper--fixed")});var top_show=179,delay=1e3;$(document).ready(function(){$(window).scroll(function(){$(this).scrollTop()>top_show?$(".top-btn").fadeIn():$(".top-btn").fadeOut()}),$(".top-btn").click(function(){$("body, html").animate({scrollTop:0},delay)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
